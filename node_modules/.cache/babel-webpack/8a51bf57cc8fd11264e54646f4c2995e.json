{"ast":null,"code":"var util = require(\"util\");\n\nvar querystring = require(\"querystring\");\n\nvar BaseClient = require(\"./client\");\n\nvar extend = require(\"./extend\");\n\nfunction AppAutomateClient(settings) {\n  this.server = {\n    host: \"api.browserstack.com\"\n  };\n  BaseClient.call(this, settings);\n}\n\nutil.inherits(AppAutomateClient, BaseClient); // public API\n\nextend(AppAutomateClient.prototype, {\n  getPlan: function (fn) {\n    this.request({\n      path: this.path(\"/plan.json\")\n    }, fn);\n  },\n  getProjects: function (fn) {\n    this.request({\n      path: this.path(\"/projects.json\")\n    }, this.handleResponse(fn, this.stripChildKeys(\"automation_project\")));\n  },\n  getProject: function (id, fn) {\n    this.request({\n      path: this.path(\"/projects/\" + id + \".json\")\n    }, this.handleResponse(fn, function (project) {\n      project = project.project;\n      project.builds = this.stripChildKeys(\"automation_build\")(project.builds);\n      return project;\n    }.bind(this)));\n  },\n  getBuilds: function (options, fn) {\n    if (typeof options === \"function\") {\n      fn = options;\n      options = {};\n    }\n\n    this.request({\n      path: this.path(\"/builds.json?\" + querystring.stringify(options))\n    }, this.handleResponse(fn, this.stripChildKeys(\"automation_build\")));\n  },\n  getSessions: function (buildId, options, fn) {\n    if (typeof fn === \"undefined\") {\n      fn = options;\n      options = {};\n    }\n\n    this.request({\n      path: this.path(\"/builds/\" + buildId + \"/sessions.json?\" + querystring.stringify(options))\n    }, this.handleResponse(fn, this.stripChildKeys(\"automation_session\")));\n  },\n  getSession: function (id, fn) {\n    this.request({\n      path: this.path(\"/sessions/\" + id + \".json\")\n    }, this.handleResponse(fn, this.stripKey(\"automation_session\")));\n  },\n  updateSession: function (id, options, fn) {\n    var data = JSON.stringify(options);\n    this.request({\n      method: \"PUT\",\n      path: this.path(\"/sessions/\" + id + \".json\")\n    }, data, this.handleResponse(fn, this.stripKey(\"automation_session\")));\n  },\n  deleteSession: function (id, fn) {\n    this.request({\n      method: \"DELETE\",\n      path: this.path(\"/sessions/\" + id + \".json\")\n    }, fn);\n  }\n}); // internal API\n\nextend(AppAutomateClient.prototype, {\n  path: function (path) {\n    return \"/app-automate\" + path;\n  },\n  handleResponse: function (fn, modifier) {\n    return function (error, data) {\n      if (error) {\n        return fn(error);\n      }\n\n      fn(null, modifier(data));\n    };\n  },\n  stripKey: function (key) {\n    return function (item) {\n      return item[key];\n    };\n  },\n  stripChildKeys: function (key) {\n    return function (items) {\n      return items.map(function (item) {\n        return item[key];\n      });\n    };\n  }\n});\nmodule.exports = {\n  createClient: function (settings) {\n    return new AppAutomateClient(settings);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}