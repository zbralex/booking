{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Manages Firefox binaries. This module is considered internal;\n * users should use {@link ./firefox selenium-webdriver/firefox}.\n */\n'use strict';\n\nconst child = require('child_process'),\n      fs = require('fs'),\n      path = require('path'),\n      util = require('util');\n\nconst isDevMode = require('../lib/devmode'),\n      Symbols = require('../lib/symbols'),\n      io = require('../io'),\n      exec = require('../io/exec');\n/** @const */\n\n\nconst NO_FOCUS_LIB_X86 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') : path.join(__dirname, '../lib/firefox/i386/libnoblur.so');\n/** @const */\n\nconst NO_FOCUS_LIB_AMD64 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') : path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so');\nconst X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\n\nfunction findInProgramFiles(file) {\n  let files = [process.env['PROGRAMFILES'] || 'C:\\\\Program Files', process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'].map(prefix => path.join(prefix, file));\n  return io.exists(files[0]).then(function (exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function (exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n *\n * @final\n */\n\n\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */\n    this.darwin_ = darwin;\n    /** @private @const */\n\n    this.win32_ = win32;\n    /** @private {Promise<string>} */\n\n    this.found_ = null;\n  }\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n\n\n  locate() {\n    if (this.found_) {\n      return this.found_;\n    }\n\n    let found;\n\n    switch (process.platform) {\n      case 'darwin':\n        found = io.exists(this.darwin_).then(exists => exists ? this.darwin_ : io.findInPath('firefox'));\n        break;\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_).then(found => found || io.findInPath('firefox.exe'));\n        break;\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'));\n        break;\n    }\n\n    this.found_ = found.then(found => {\n      if (found) {\n        // TODO: verify version info.\n        return found;\n      }\n\n      throw Error('Could not locate Firefox on the current system');\n    });\n    return this.found_;\n  }\n\n}\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>\n */\n\n\nChannel.AURORA = new Channel('/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin', 'Firefox Developer Edition\\\\firefox.exe');\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\n\nChannel.BETA = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\n\nChannel.RELEASE = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox-bin', 'Mozilla Firefox\\\\firefox.exe');\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\n\nChannel.NIGHTLY = new Channel('/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin', 'Nightly\\\\firefox.exe');\n/**\n * Copies the no focus libs into the given profile directory.\n * @param {string} profileDir Path to the profile directory to install into.\n * @return {!Promise<string>} The LD_LIBRARY_PATH prefix string to use\n *     for the installed libs.\n */\n\nfunction installNoFocusLibs(profileDir) {\n  var x86 = path.join(profileDir, 'x86');\n  var amd64 = path.join(profileDir, 'amd64');\n  return io.mkdir(x86).then(() => copyLib(NO_FOCUS_LIB_X86, x86)).then(() => io.mkdir(amd64)).then(() => copyLib(NO_FOCUS_LIB_AMD64, amd64)).then(function () {\n    return x86 + ':' + amd64;\n  });\n\n  function copyLib(src, dir) {\n    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));\n  }\n}\n/**\n * Provides a mechanism to configure and launch Firefox in a subprocess for\n * use with WebDriver.\n *\n * If created _without_ a path for the Firefox binary to use, this class will\n * attempt to find Firefox when {@link #launch()} is called. For MacOS and\n * Windows, this class will look for Firefox in the current platform's default\n * installation location (e.g. /Applications/Firefox.app on MacOS). For all\n * other platforms, the Firefox executable must be available on your system\n * `PATH`.\n *\n * @final\n * @deprecated This class will be removed in 4.0. Use the binary management\n *     functions available on the {@link ./index.Options firefox.Options} class.\n */\n\n\nclass Binary {\n  /**\n   * @param {?(string|Channel)=} opt_exeOrChannel Either the path to a specific\n   *     Firefox binary to use, or a {@link Channel} instance that describes\n   *     how to locate the desired Firefox version.\n   */\n  constructor(opt_exeOrChannel) {\n    /** @private {?(string|Channel)} */\n    this.exe_ = opt_exeOrChannel || null;\n    /** @private {!Array.<string>} */\n\n    this.args_ = [];\n    /** @private {!Object<string, string>} */\n\n    this.env_ = {};\n    Object.assign(this.env_, process.env, {\n      MOZ_CRASHREPORTER_DISABLE: '1',\n      MOZ_NO_REMOTE: '1',\n      NO_EM_RESTART: '1'\n    });\n    /** @private {boolean} */\n\n    this.devEdition_ = false;\n  }\n  /**\n   * @return {(string|undefined)} The path to the Firefox executable to use, or\n   *     `undefined` if WebDriver should attempt to locate Firefox automatically\n   *     on the current system.\n   */\n\n\n  getExe() {\n    return typeof this.exe_ === 'string' ? this.exe_ : undefined;\n  }\n  /**\n   * Add arguments to the command line used to start Firefox.\n   * @param {...(string|!Array.<string>)} var_args Either the arguments to add\n   *     as varargs, or the arguments as an array.\n   * @deprecated Use {@link ./index.Options#addArguments}.\n   */\n\n\n  addArguments(var_args) {\n    for (var i = 0; i < arguments.length; i++) {\n      if (Array.isArray(arguments[i])) {\n        this.args_ = this.args_.concat(arguments[i]);\n      } else {\n        this.args_.push(arguments[i]);\n      }\n    }\n  }\n  /**\n   * @return {!Array<string>} The command line arguments to use when starting\n   *     the browser.\n   */\n\n\n  getArguments() {\n    return this.args_;\n  }\n  /**\n   * Specifies whether to use Firefox Developer Edition instead of the normal\n   * stable channel. Setting this option has no effect if this instance was\n   * created with a path to a specific Firefox binary.\n   *\n   * This method has no effect on Unix systems where the Firefox application\n   * has the same (default) name regardless of version.\n   *\n   * @param {boolean=} opt_use Whether to use the developer edition. Defaults to\n   *     true.\n   * @deprecated Use the {@link Channel} class to indicate the desired Firefox\n   *     version when creating a new binary: `new Binary(Channel.AURORA)`.\n   */\n\n\n  useDevEdition(opt_use) {\n    this.devEdition_ = opt_use === undefined || !!opt_use;\n  }\n  /**\n   * Returns a promise for the Firefox executable used by this instance. The\n   * returned promise will be immediately resolved if the user supplied an\n   * executable path when this instance was created. Otherwise, an attempt will\n   * be made to find Firefox on the current system.\n   *\n   * @return {!Promise<string>} a promise for the path to the Firefox executable\n   *     used by this instance.\n   */\n\n\n  locate() {\n    if (typeof this.exe_ === 'string') {\n      return Promise.resolve(this.exe_);\n    } else if (this.exe_ instanceof Channel) {\n      return this.exe_.locate();\n    }\n\n    let channel = this.devEdition_ ? Channel.AURORA : Channel.RELEASE;\n    return channel.locate();\n  }\n  /**\n   * Launches Firefox and returns a promise that will be fulfilled when the\n   * process terminates.\n   * @param {string} profile Path to the profile directory to use.\n   * @return {!Promise<!exec.Command>} A promise for the handle to the started\n   *     subprocess.\n   */\n\n\n  launch(profile) {\n    let env = {};\n    Object.assign(env, this.env_, {\n      XRE_PROFILE_PATH: profile\n    });\n    let args = ['-foreground'].concat(this.args_);\n    return this.locate().then(function (firefox) {\n      if (process.platform === 'win32' || process.platform === 'darwin') {\n        return exec(firefox, {\n          args: args,\n          env: env\n        });\n      }\n\n      return installNoFocusLibs(profile).then(function (ldLibraryPath) {\n        env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];\n        env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;\n        return exec(firefox, {\n          args: args,\n          env: env\n        });\n      });\n    });\n  }\n  /**\n   * Returns a promise for the wire representation of this binary. Note: the\n   * FirefoxDriver only supports passing the path to the binary executable over\n   * the wire; all command line arguments and environment variables will be\n   * discarded.\n   *\n   * @return {!Promise<string>} A promise for this binary's wire representation.\n   */\n\n\n  [Symbols.serialize]() {\n    return this.locate();\n  }\n\n} // PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;","map":null,"metadata":{},"sourceType":"script"}