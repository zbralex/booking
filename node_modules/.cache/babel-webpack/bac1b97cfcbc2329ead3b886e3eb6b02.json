{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nlet clientSideScripts = require('./clientsidescripts'); // Explicitly define webdriver.By.\n// We do this because we want to inherit the static methods of webdriver.By, as opposed to\n// inheriting from the webdriver.By class itself, which is actually analogous to ProtractorLocator.\n\n\nclass WebdriverBy {\n  constructor() {\n    this.className = selenium_webdriver_1.By.className;\n    this.css = selenium_webdriver_1.By.css;\n    this.id = selenium_webdriver_1.By.id;\n    this.linkText = selenium_webdriver_1.By.linkText;\n    this.js = selenium_webdriver_1.By.js;\n    this.name = selenium_webdriver_1.By.name;\n    this.partialLinkText = selenium_webdriver_1.By.partialLinkText;\n    this.tagName = selenium_webdriver_1.By.tagName;\n    this.xpath = selenium_webdriver_1.By.xpath;\n  }\n\n}\n\nexports.WebdriverBy = WebdriverBy;\n\nfunction isProtractorLocator(x) {\n  return x && typeof x.findElementsOverride === 'function';\n}\n\nexports.isProtractorLocator = isProtractorLocator;\n/**\n * The Protractor Locators. These provide ways of finding elements in\n * Angular applications by binding, model, etc.\n *\n * @alias by\n * @extends {webdriver.By}\n */\n\nclass ProtractorBy extends WebdriverBy {\n  /**\n   * Add a locator to this instance of ProtractorBy. This locator can then be\n   * used with element(by.locatorName(args)).\n   *\n   * @view\n   * <button ng-click=\"doAddition()\">Go!</button>\n   *\n   * @example\n   * // Add the custom locator.\n   * by.addLocator('buttonTextSimple',\n   *     function(buttonText, opt_parentElement, opt_rootSelector) {\n   *   // This function will be serialized as a string and will execute in the\n   *   // browser. The first argument is the text for the button. The second\n   *   // argument is the parent element, if any.\n   *   var using = opt_parentElement || document,\n   *       buttons = using.querySelectorAll('button');\n   *\n   *   // Return an array of buttons with the text.\n   *   return Array.prototype.filter.call(buttons, function(button) {\n   *     return button.textContent === buttonText;\n   *   });\n   * });\n   *\n   * // Use the custom locator.\n   * element(by.buttonTextSimple('Go!')).click();\n   *\n   * @alias by.addLocator(locatorName, functionOrScript)\n   * @param {string} name The name of the new locator.\n   * @param {Function|string} script A script to be run in the context of\n   *     the browser. This script will be passed an array of arguments\n   *     that contains any args passed into the locator followed by the\n   *     element scoping the search and the css selector for the root angular\n   *     element. It should return an array of elements.\n   */\n  addLocator(name, script) {\n    this[name] = (...args) => {\n      let locatorArguments = args;\n      return {\n        findElementsOverride: (driver, using, rootSelector) => {\n          let findElementArguments = [script];\n\n          for (let i = 0; i < locatorArguments.length; i++) {\n            findElementArguments.push(locatorArguments[i]);\n          }\n\n          findElementArguments.push(using);\n          findElementArguments.push(rootSelector);\n          return driver.findElements(selenium_webdriver_1.By.js.apply(selenium_webdriver_1.By, findElementArguments));\n        },\n        toString: () => {\n          return 'by.' + name + '(\"' + Array.prototype.join.call(locatorArguments, '\", \"') + '\")';\n        }\n      };\n    };\n  }\n\n  /**\n   * Find an element by text binding. Does a partial match, so any elements\n   * bound to variables containing the input string will be returned.\n   *\n   * Note: For AngularJS version 1.2, the interpolation brackets, (usually\n   * {{}}), are optionally allowed in the binding description string. For\n   * Angular version 1.3+, they are not allowed, and no elements will be found\n   * if they are used.\n   *\n   * @view\n   * <span>{{person.name}}</span>\n   * <span ng-bind=\"person.email\"></span>\n   *\n   * @example\n   * var span1 = element(by.binding('person.name'));\n   * expect(span1.getText()).toBe('Foo');\n   *\n   * var span2 = element(by.binding('person.email'));\n   * expect(span2.getText()).toBe('foo@bar.com');\n   *\n   * // You can also use a substring for a partial match\n   * var span1alt = element(by.binding('name'));\n   * expect(span1alt.getText()).toBe('Foo');\n   *\n   * // This works for sites using Angular 1.2 but NOT 1.3\n   * var deprecatedSyntax = element(by.binding('{{person.name}}'));\n   *\n   * @param {string} bindingDescriptor\n   * @returns {ProtractorLocator} location strategy\n   */\n  binding(bindingDescriptor) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, false, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.binding(\"' + bindingDescriptor + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find an element by exact binding.\n   *\n   * @view\n   * <span>{{ person.name }}</span>\n   * <span ng-bind=\"person-email\"></span>\n   * <span>{{person_phone|uppercase}}</span>\n   *\n   * @example\n   * expect(element(by.exactBinding('person.name')).isPresent()).toBe(true);\n   * expect(element(by.exactBinding('person-email')).isPresent()).toBe(true);\n   * expect(element(by.exactBinding('person')).isPresent()).toBe(false);\n   * expect(element(by.exactBinding('person_phone')).isPresent()).toBe(true);\n   * expect(element(by.exactBinding('person_phone|uppercase')).isPresent()).toBe(true);\n   * expect(element(by.exactBinding('phone')).isPresent()).toBe(false);\n   *\n   * @param {string} bindingDescriptor\n   * @returns {ProtractorLocator} location strategy\n   */\n  exactBinding(bindingDescriptor) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findBindings, bindingDescriptor, true, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.exactBinding(\"' + bindingDescriptor + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find an element by ng-model expression.\n   *\n   * @alias by.model(modelName)\n   * @view\n   * <input type=\"text\" ng-model=\"person.name\">\n   *\n   * @example\n   * var input = element(by.model('person.name'));\n   * input.sendKeys('123');\n   * expect(input.getAttribute('value')).toBe('Foo123');\n   *\n   * @param {string} model ng-model expression.\n   * @returns {ProtractorLocator} location strategy\n   */\n  model(model) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByModel, model, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.model(\"' + model + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find a button by text.\n   *\n   * @view\n   * <button>Save</button>\n   *\n   * @example\n   * element(by.buttonText('Save'));\n   *\n   * @param {string} searchText\n   * @returns {ProtractorLocator} location strategy\n   */\n  buttonText(searchText) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByButtonText, searchText, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.buttonText(\"' + searchText + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find a button by partial text.\n   *\n   * @view\n   * <button>Save my file</button>\n   *\n   * @example\n   * element(by.partialButtonText('Save'));\n   *\n   * @param {string} searchText\n   * @returns {ProtractorLocator} location strategy\n   */\n  partialButtonText(searchText) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByPartialButtonText, searchText, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.partialButtonText(\"' + searchText + '\")';\n      }\n    };\n  }\n\n  // Generate either by.repeater or by.exactRepeater\n  byRepeaterInner(exact, repeatDescriptor) {\n    let name = 'by.' + (exact ? 'exactR' : 'r') + 'epeater';\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findAllRepeaterRows, repeatDescriptor, exact, using, rootSelector));\n      },\n      toString: () => {\n        return name + '(\"' + repeatDescriptor + '\")';\n      },\n      row: index => {\n        return {\n          findElementsOverride: (driver, using, rootSelector) => {\n            return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterRows, repeatDescriptor, exact, index, using, rootSelector));\n          },\n          toString: () => {\n            return name + '(' + repeatDescriptor + '\").row(\"' + index + '\")\"';\n          },\n          column: binding => {\n            return {\n              findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n              },\n              toString: () => {\n                return name + '(\"' + repeatDescriptor + '\").row(\"' + index + '\").column(\"' + binding + '\")';\n              }\n            };\n          }\n        };\n      },\n      column: binding => {\n        return {\n          findElementsOverride: (driver, using, rootSelector) => {\n            return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterColumn, repeatDescriptor, exact, binding, using, rootSelector));\n          },\n          toString: () => {\n            return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\")';\n          },\n          row: index => {\n            return {\n              findElementsOverride: (driver, using, rootSelector) => {\n                return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findRepeaterElement, repeatDescriptor, exact, index, binding, using, rootSelector));\n              },\n              toString: () => {\n                return name + '(\"' + repeatDescriptor + '\").column(\"' + binding + '\").row(\"' + index + '\")';\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n  /**\n   * Find elements inside an ng-repeat.\n   *\n   * @view\n   * <div ng-repeat=\"cat in pets\">\n   *   <span>{{cat.name}}</span>\n   *   <span>{{cat.age}}</span>\n   * </div>\n   *\n   * <div class=\"book-img\" ng-repeat-start=\"book in library\">\n   *   <span>{{$index}}</span>\n   * </div>\n   * <div class=\"book-info\" ng-repeat-end>\n   *   <h4>{{book.name}}</h4>\n   *   <p>{{book.blurb}}</p>\n   * </div>\n   *\n   * @example\n   * // Returns the DIV for the second cat.\n   * var secondCat = element(by.repeater('cat in pets').row(1));\n   *\n   * // Returns the SPAN for the first cat's name.\n   * var firstCatName = element(by.repeater('cat in pets').\n   *     row(0).column('cat.name'));\n   *\n   * // Returns a promise that resolves to an array of WebElements from a column\n   * var ages = element.all(\n   *     by.repeater('cat in pets').column('cat.age'));\n   *\n   * // Returns a promise that resolves to an array of WebElements containing\n   * // all top level elements repeated by the repeater. For 2 pets rows\n   * // resolves to an array of 2 elements.\n   * var rows = element.all(by.repeater('cat in pets'));\n   *\n   * // Returns a promise that resolves to an array of WebElements containing\n   * // all the elements with a binding to the book's name.\n   * var divs = element.all(by.repeater('book in library').column('book.name'));\n   *\n   * // Returns a promise that resolves to an array of WebElements containing\n   * // the DIVs for the second book.\n   * var bookInfo = element.all(by.repeater('book in library').row(1));\n   *\n   * // Returns the H4 for the first book's name.\n   * var firstBookName = element(by.repeater('book in library').\n   *     row(0).column('book.name'));\n   *\n   * // Returns a promise that resolves to an array of WebElements containing\n   * // all top level elements repeated by the repeater. For 2 books divs\n   * // resolves to an array of 4 elements.\n   * var divs = element.all(by.repeater('book in library'));\n   *\n   * @param {string} repeatDescriptor\n   * @returns {ProtractorLocator} location strategy\n   */\n\n\n  repeater(repeatDescriptor) {\n    return this.byRepeaterInner(false, repeatDescriptor);\n  }\n  /**\n   * Find an element by exact repeater.\n   *\n   * @view\n   * <li ng-repeat=\"person in peopleWithRedHair\"></li>\n   * <li ng-repeat=\"car in cars | orderBy:year\"></li>\n   *\n   * @example\n   * expect(element(by.exactRepeater('person in\n   * peopleWithRedHair')).isPresent())\n   *     .toBe(true);\n   * expect(element(by.exactRepeater('person in\n   * people')).isPresent()).toBe(false);\n   * expect(element(by.exactRepeater('car in cars')).isPresent()).toBe(true);\n   *\n   * @param {string} repeatDescriptor\n   * @returns {ProtractorLocator} location strategy\n   */\n\n\n  exactRepeater(repeatDescriptor) {\n    return this.byRepeaterInner(true, repeatDescriptor);\n  }\n  /**\n   * Find elements by CSS which contain a certain string.\n   *\n   * @view\n   * <ul>\n   *   <li class=\"pet\">Dog</li>\n   *   <li class=\"pet\">Cat</li>\n   * </ul>\n   *\n   * @example\n   * // Returns the li for the dog, but not cat.\n   * var dog = element(by.cssContainingText('.pet', 'Dog'));\n   *\n   * @param {string} cssSelector css selector\n   * @param {string|RegExp} searchString text search\n   * @returns {ProtractorLocator} location strategy\n   */\n\n\n  cssContainingText(cssSelector, searchText) {\n    searchText = searchText instanceof RegExp ? '__REGEXP__' + searchText.toString() : searchText;\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByCssContainingText, cssSelector, searchText, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.cssContainingText(\"' + cssSelector + '\", \"' + searchText + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find an element by ng-options expression.\n   *\n   * @alias by.options(optionsDescriptor)\n   * @view\n   * <select ng-model=\"color\" ng-options=\"c for c in colors\">\n   *   <option value=\"0\" selected=\"selected\">red</option>\n   *   <option value=\"1\">green</option>\n   * </select>\n   *\n   * @example\n   * var allOptions = element.all(by.options('c for c in colors'));\n   * expect(allOptions.count()).toEqual(2);\n   * var firstOption = allOptions.first();\n   * expect(firstOption.getText()).toEqual('red');\n   *\n   * @param {string} optionsDescriptor ng-options expression.\n   * @returns {ProtractorLocator} location strategy\n   */\n  options(optionsDescriptor) {\n    return {\n      findElementsOverride: (driver, using, rootSelector) => {\n        return driver.findElements(selenium_webdriver_1.By.js(clientSideScripts.findByOptions, optionsDescriptor, using, rootSelector));\n      },\n      toString: () => {\n        return 'by.option(\"' + optionsDescriptor + '\")';\n      }\n    };\n  }\n\n  /**\n   * Find an element by css selector within the Shadow DOM.\n   *\n   * @alias by.deepCss(selector)\n   * @view\n   * <div>\n   *   <span id=\"outerspan\">\n   *   <\"shadow tree\">\n   *     <span id=\"span1\"></span>\n   *     <\"shadow tree\">\n   *       <span id=\"span2\"></span>\n   *     </>\n   *   </>\n   * </div>\n   * @example\n   * var spans = element.all(by.deepCss('span'));\n   * expect(spans.count()).toEqual(3);\n   *\n   * @param {string} selector a css selector within the Shadow DOM.\n   * @returns {Locator} location strategy\n   */\n  deepCss(selector) {\n    // TODO(julie): syntax will change from /deep/ to >>> at some point.\n    // When that is supported, switch it here.\n    return selenium_webdriver_1.By.css('* /deep/ ' + selector);\n  }\n\n}\n\nexports.ProtractorBy = ProtractorBy; //# sourceMappingURL=locators.js.map","map":null,"metadata":{},"sourceType":"script"}