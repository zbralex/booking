{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst http = require('selenium-webdriver/http');\n\nlet logger = new logger_1.Logger('attachSession');\n\nclass AttachSession extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n    logger.info('Using session id - ' + this.config_.seleniumSessionId);\n    return q(undefined);\n  }\n  /**\n   * Getting a new driver by attaching an existing session.\n   *\n   * @public\n   * @return {WebDriver} webdriver instance\n   */\n\n\n  getNewDriver() {\n    const httpClient = new http.HttpClient(this.config_.seleniumAddress);\n    const executor = new http.Executor(httpClient);\n    const newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n    this.drivers_.push(newDriver);\n    return newDriver;\n  }\n  /**\n   * Maintains the existing session and does not quit the driver.\n   *\n   * @public\n   */\n\n\n  quitDriver() {\n    return selenium_webdriver_1.promise.when(undefined);\n  }\n\n}\n\nexports.AttachSession = AttachSession; //# sourceMappingURL=attachSession.js.map","map":null,"metadata":{},"sourceType":"script"}