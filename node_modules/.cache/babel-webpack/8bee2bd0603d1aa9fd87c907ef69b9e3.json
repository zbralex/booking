{"ast":null,"code":"\"use strict\";\n/*\n * This is an implementation of the SauceLabs Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst q = require(\"q\");\n\nconst util = require(\"util\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst SauceLabs = require('saucelabs');\n\nconst SAUCE_REGIONS = {\n  'us': '',\n  'eu': 'eu-central-1.'\n};\nlet logger = new logger_1.Logger('sauce');\n\nclass Sauce extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Hook to update the sauce job.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  updateJob(update) {\n    let deferredArray = this.drivers_.map(driver => {\n      let deferred = q.defer();\n      driver.getSession().then(session => {\n        logger.info('SauceLabs results available at http://saucelabs.com/jobs/' + session.getId());\n        this.sauceServer_.updateJob(session.getId(), update, err => {\n          if (err) {\n            throw new Error('Error updating Sauce pass/fail status: ' + util.inspect(err));\n          }\n\n          deferred.resolve();\n        });\n      });\n      return deferred.promise;\n    });\n    return q.all(deferredArray);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @public\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    let deferred = q.defer();\n    this.sauceServer_ = new SauceLabs({\n      hostname: this.getSauceEndpoint(this.config_.sauceRegion),\n      username: this.config_.sauceUser,\n      password: this.config_.sauceKey,\n      agent: this.config_.sauceAgent,\n      proxy: this.config_.sauceProxy\n    });\n    this.config_.capabilities['username'] = this.config_.sauceUser;\n    this.config_.capabilities['accessKey'] = this.config_.sauceKey;\n    this.config_.capabilities['build'] = this.config_.sauceBuild;\n    let protocol = this.config_.sauceSeleniumUseHttp ? 'http://' : 'https://';\n    let auth = protocol + this.config_.sauceUser + ':' + this.config_.sauceKey + '@';\n    this.config_.seleniumAddress = auth + (this.config_.sauceSeleniumAddress ? this.config_.sauceSeleniumAddress : `ondemand.${this.getSauceEndpoint(this.config_.sauceRegion)}:443/wd/hub`); // Append filename to capabilities.name so that it's easier to identify\n    // tests.\n\n    if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n      this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n    }\n\n    logger.info('Using SauceLabs selenium server at ' + this.config_.seleniumAddress.replace(/\\/\\/.+@/, '//'));\n    deferred.resolve();\n    return deferred.promise;\n  }\n  /**\n   * Get the Sauce Labs endpoint\n   * @private\n   * @param {string} region\n   * @return {string} The endpoint that needs to be used\n   */\n\n\n  getSauceEndpoint(region) {\n    const dc = region ? typeof SAUCE_REGIONS[region] !== 'undefined' ? SAUCE_REGIONS[region] : region + '.' : '';\n    return `${dc}saucelabs.com`;\n  }\n\n}\n\nexports.Sauce = Sauce; //# sourceMappingURL=sauce.js.map","map":null,"metadata":{},"sourceType":"script"}