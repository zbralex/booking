{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst webdriver_commands_1 = require(\"./webdriver_commands\"); // Generate a random 8 character ID to avoid collisions.\n\n\nfunction getLogId() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n} // Super proprietary left pad implementation. Do not copy plzkthx.\n\n\nfunction leftPad(field) {\n  const fieldWidth = 6;\n  let padding = fieldWidth - field.length;\n\n  if (padding > 0) {\n    return ' '.repeat(padding) + field;\n  }\n\n  return field;\n}\n\nconst FINDERS = [webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements, webdriver_commands_1.CommandName.FindElementsFromElement];\nconst READERS = [webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute, webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect];\nconst PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\n\nclass WebDriverLogger {\n  constructor() {\n    this.logName = `webdriver_log_${getLogId()}.txt`;\n  }\n  /**\n   * Start logging to the specified directory. Will create a file named\n   * 'webdriver_log_<process id>.txt'\n   *\n   * @param logDir The directory to create log files in.\n   */\n\n\n  setLogDir(logDir) {\n    this.logStream = fs.createWriteStream(path.join(logDir, this.logName), {\n      flags: 'a'\n    });\n  }\n  /**\n   * Logs a webdriver command to the log file.\n   *\n   * @param command The command to log.\n   */\n\n\n  logWebDriverCommand(command) {\n    if (!this.logStream) {\n      return;\n    }\n\n    let logLine;\n    logLine = `${this.timestamp()} `;\n    let started = Date.now();\n    command.on('response', () => {\n      let done = Date.now();\n      let elapsed = leftPad(done - started + '');\n      logLine += `| ${elapsed}ms `;\n\n      if (command.getParam('sessionId')) {\n        let session = command.getParam('sessionId').slice(0, 6);\n        logLine += `| ${session} `;\n      } else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n        // Only for new session commands, the sessionId is in the response.\n        let session = command.responseData['sessionId'].slice(0, 6);\n        logLine += `| ${session} `;\n      }\n\n      if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n        logLine += `| ${command.url}`;\n      } else {\n        logLine += `| ${webdriver_commands_1.CommandName[command.commandName]}`;\n      }\n\n      if (command.commandName == webdriver_commands_1.CommandName.Go) {\n        logLine += ' ' + command.data['url'];\n      } else if (command.getParam('elementId')) {\n        logLine += ` (${command.getParam('elementId')})`;\n      }\n\n      logLine += '\\n';\n      this.logStream.write(logLine);\n      this.renderData(command);\n      this.renderResponse(command);\n    });\n  }\n  /**\n   * Log an arbitrary event to the log file.\n   *\n   * @param msg The message to log.\n   * @param sessionId The session id associated with the event.\n   * @param elapsedMs How long the event took, in ms.\n   */\n\n\n  logEvent(msg, sessionId, elapsedMs) {\n    let elapsed = leftPad(elapsedMs.toString());\n    let logLine = `${this.timestamp()} | ${elapsed}ms | ${sessionId.slice(0, 6)} | ${msg}\\n`;\n    this.logStream.write(logLine);\n  }\n\n  renderData(command) {\n    let dataLine = '';\n\n    if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n      dataLine = JSON.stringify(command.data['desiredCapabilities']);\n    } else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n      let value = command.data['value'].join('');\n      dataLine = `Send: ${value}`;\n    } else if (FINDERS.indexOf(command.commandName) !== -1) {\n      const using = command.data['using'];\n      const value = command.data['value'];\n      dataLine = `Using ${using} '${value}'`;\n    }\n\n    if (dataLine) {\n      this.logStream.write(PAD + dataLine + '\\n');\n    }\n  }\n\n  renderResponse(command) {\n    let respLine = '';\n    const data = command.responseData;\n\n    if (data['status'] > 0) {\n      respLine = `ERROR ${data['status']}: ${data['value']['message']}`;\n    } else if (FINDERS.indexOf(command.commandName) !== -1) {\n      let els = command.responseData['value'];\n\n      if (!Array.isArray(els)) {\n        els = [els];\n      }\n\n      els = els.map(e => e['ELEMENT']);\n      respLine = 'Elements: ' + els;\n    } else if (READERS.indexOf(command.commandName) !== -1) {\n      respLine = command.responseData['value'];\n\n      if (typeof respLine == 'object') {\n        respLine = JSON.stringify(respLine);\n      }\n    }\n\n    if (respLine) {\n      this.logStream.write(PAD + respLine + '\\n');\n    }\n  }\n\n  timestamp() {\n    let d = new Date();\n    let hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n    let minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n    let seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n    let millis = d.getMilliseconds().toString();\n    millis = '000'.slice(0, 3 - millis.length) + millis;\n    return `${hours}:${minutes}:${seconds}.${millis}`;\n  }\n\n}\n\nexports.WebDriverLogger = WebDriverLogger; //# sourceMappingURL=webdriver_logger.js.map","map":null,"metadata":{},"sourceType":"script"}