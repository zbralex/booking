{"ast":null,"code":"var crypto = require('crypto');\n\nvar https = require('https');\n\nvar querystring = require('querystring');\n\nvar utils = require('./utils');\n\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar url = require('url');\n\nvar extend = utils.extend;\nvar replace = utils.replace;\nvar DEFAULTS = {\n  username: null,\n  password: null,\n  proxy: null,\n  hostname: 'saucelabs.com',\n  base: '/rest/v1/',\n  port: '443'\n};\n\nfunction SauceLabs(options) {\n  this.options = extend({}, DEFAULTS, options);\n  this.options.auth = this.options.username + ':' + this.options.password;\n}\n\nmodule.exports = SauceLabs; // API\n\nSauceLabs.prototype.getAccountDetails = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'users/:username'\n  }, callback);\n};\n\nSauceLabs.prototype.getAccountLimits = function (callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/limits'\n  }, callback);\n};\n\nSauceLabs.prototype.getUserActivity = function (start, end, callback) {\n  if (typeof start === 'function') {\n    callback = start;\n    start = null;\n    end = null;\n  } else if (typeof end === 'function') {\n    callback = end;\n    end = null;\n  }\n\n  var dates = start != null || end != null ? {} : null;\n\n  if (start != null) {\n    dates.start = formatDate(start);\n  }\n\n  if (end != null) {\n    dates.end = formatDate(end);\n  }\n\n  this.send({\n    method: 'GET',\n    path: ':username/activity',\n    query: dates\n  }, callback);\n};\n\nSauceLabs.prototype.getUserConcurrency = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'users/:username/concurrency'\n  }, callback);\n};\n\nSauceLabs.prototype.getAccountUsage = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'users/:username/usage'\n  }, callback);\n};\n\nSauceLabs.prototype.getJobs = function (callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/jobs',\n    query: {\n      full: true\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.showJob = function (id, callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/jobs/:id',\n    args: {\n      id: id\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.showJobAssets = function (id, callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/jobs/:id/assets',\n    args: {\n      id: id\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.updateJob = function (id, data, callback) {\n  this.send({\n    method: 'PUT',\n    path: ':username/jobs/:id',\n    args: {\n      id: id\n    },\n    data: data\n  }, callback);\n};\n\nSauceLabs.prototype.stopJob = function (id, data, callback) {\n  this.send({\n    method: 'PUT',\n    path: ':username/jobs/:id/stop',\n    args: {\n      id: id\n    },\n    data: data\n  }, callback);\n};\n\nSauceLabs.prototype.deleteJob = function (id, callback) {\n  this.send({\n    method: 'DELETE',\n    path: ':username/jobs/:id',\n    args: {\n      id: id\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.getActiveTunnels = function (callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/tunnels'\n  }, callback);\n};\n\nSauceLabs.prototype.getTunnel = function (id, callback) {\n  this.send({\n    method: 'GET',\n    path: ':username/tunnels/:id',\n    args: {\n      id: id\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.deleteTunnel = function (id, callback) {\n  this.send({\n    method: 'DELETE',\n    path: ':username/tunnels/:id',\n    args: {\n      id: id\n    }\n  }, callback);\n};\n\nSauceLabs.prototype.getServiceStatus = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/status'\n  }, callback);\n};\n\nSauceLabs.prototype.getBrowsers = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/browsers'\n  }, callback);\n};\n\nSauceLabs.prototype.getAllBrowsers = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/browsers/all'\n  }, callback);\n};\n\nSauceLabs.prototype.getSeleniumBrowsers = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/browsers/selenium-rc'\n  }, callback);\n};\n\nSauceLabs.prototype.getWebDriverBrowsers = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/browsers/webdriver'\n  }, callback);\n};\n\nSauceLabs.prototype.getTestCounter = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'info/counter'\n  }, callback);\n};\n\nSauceLabs.prototype.updateSubAccount = function (data, callback) {\n  this.send({\n    method: 'POST',\n    path: 'users/:username/subscription',\n    data: data\n  }, callback);\n};\n\nSauceLabs.prototype.deleteSubAccount = function (callback) {\n  this.send({\n    method: 'DELETE',\n    path: 'users/:username/subscription'\n  }, callback);\n};\n\nSauceLabs.prototype.createSubAccount = function (data, callback) {\n  this.send({\n    method: 'POST',\n    path: 'users/:username',\n    data: data\n  }, callback);\n};\n\nSauceLabs.prototype.createPublicLink = function (id, date, useHour, callback) {\n  if (typeof date === 'function') {\n    callback = date;\n    date = null;\n    useHour = false;\n  } else if (typeof useHour === 'function') {\n    callback = useHour;\n    useHour = false;\n  }\n\n  if (date != null) {\n    date = formatDate(date, useHour);\n  }\n\n  var link = generateLink(this.options.hostname, this.options.auth, date, id);\n  callback(null, link);\n};\n\nSauceLabs.prototype.send = function (message, callback) {\n  var method = message.method,\n      path = message.path,\n      args = message.args,\n      query = message.query,\n      data = message.data,\n      body = JSON.stringify(data); // Build path with base, placeholders, and query.\n\n  path = this.options.base + replace(path, extend({}, this.options, args));\n\n  if (query != null) {\n    path += '?' + querystring.stringify(query);\n  } // Make the request.\n\n\n  var options = extend({}, this.options, {\n    method: method,\n    path: path,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Content-Length': body != null ? Buffer.byteLength(body) : 0\n    }\n  });\n  makeRequest(options, body, callback);\n};\n\nSauceLabs.prototype.getSubAccountList = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'users/:username/list-subaccounts'\n  }, callback);\n};\n\nSauceLabs.prototype.getSubAccounts = function (callback) {\n  this.send({\n    method: 'GET',\n    path: 'users/:username/subaccounts'\n  }, callback);\n}; // Helpers\n\n\nfunction formatDate(date, useHour) {\n  return date.toISOString().replace(/T(\\d+).*/, useHour ? '-$1' : '');\n}\n\nfunction generateToken(auth, date, job) {\n  var key = auth + (date ? ':' + date : '');\n  return crypto.createHmac('md5', key).update(job).digest('hex');\n}\n\nfunction generateLink(hostname, auth, date, job) {\n  return replace('https://:hostname/jobs/:id?auth=:token', {\n    hostname: hostname,\n    id: job,\n    token: generateToken(auth, date, job)\n  });\n}\n\nfunction makeRequest(options, body, callback) {\n  if (options.proxy) {\n    options.agent = new HttpsProxyAgent(url.parse(options.proxy));\n  }\n\n  var request = https.request(options, function (response) {\n    var result = '';\n\n    if (callback) {\n      response.on('data', function (chunk) {\n        result += chunk;\n      }).on('end', function () {\n        var res;\n\n        try {\n          res = JSON.parse(result);\n        } catch (e) {\n          callback('Could not parse response: ' + result);\n          return;\n        }\n\n        if (response.statusCode === 200) {\n          callback(null, res);\n        } else {\n          callback(res);\n        }\n      });\n    }\n  });\n  request.on('error', function (err) {\n    callback('Could not send request: ' + err.message);\n  });\n\n  if (body != null) {\n    request.write(body);\n  }\n\n  request.end();\n}","map":null,"metadata":{},"sourceType":"script"}