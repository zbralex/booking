{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nconst Symbols = require('./symbols');\n/**\n * Recognized browser names.\n * @enum {string}\n */\n\n\nconst Browser = {\n  ANDROID: 'android',\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  IE: 'internet explorer',\n  INTERNET_EXPLORER: 'internet explorer',\n  IPAD: 'iPad',\n  IPHONE: 'iPhone',\n  OPERA: 'opera',\n  PHANTOM_JS: 'phantomjs',\n  SAFARI: 'safari',\n  HTMLUNIT: 'htmlunit'\n};\n/**\n * Common Capability keys.\n * @enum {string}\n */\n\nconst Capability = {\n  /**\n   * Indicates whether a driver should accept all SSL certs by default. This\n   * capability only applies when requesting a new session. To query whether\n   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.\n   */\n  ACCEPT_SSL_CERTS: 'acceptSslCerts',\n\n  /**\n   * The browser name. Common browser names are defined in the {@link Browser}\n   * enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /**\n   * Defines how elements should be scrolled into the viewport for interaction.\n   * This capability will be set to zero (0) if elements are aligned with the\n   * top of the viewport, or one (1) if aligned with the bottom. The default\n   * behavior is to align with the top of the viewport.\n   */\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n\n  /**\n   * Whether the driver is capable of handling modal alerts (e.g. alert,\n   * confirm, prompt). To define how a driver <i>should</i> handle alerts,\n   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.\n   */\n  HANDLES_ALERTS: 'handlesAlerts',\n\n  /**\n   * Key for the logging driver logging preferences.\n   */\n  LOGGING_PREFS: 'loggingPrefs',\n\n  /**\n   * Whether this session generates native events when simulating user input.\n   */\n  NATIVE_EVENTS: 'nativeEvents',\n\n  /**\n   * Describes the platform the browser is running on. Will be one of\n   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a\n   * session, ANY may be used to indicate no platform preference (this is\n   * semantically equivalent to omitting the platform capability).\n   */\n  PLATFORM: 'platform',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /** Whether the driver supports changing the browser's orientation. */\n  ROTATABLE: 'rotatable',\n\n  /**\n   * Whether a driver is only capable of handling secure SSL certs. To request\n   * that a driver accept insecure SSL certs by default, use\n   * {@link #ACCEPT_SSL_CERTS}.\n   */\n  SECURE_SSL: 'secureSsl',\n\n  /** Whether the driver supports manipulating the app cache. */\n  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',\n\n  /** Whether the driver supports locating elements with CSS selectors. */\n  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',\n\n  /** Whether the browser supports JavaScript. */\n  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',\n\n  /** Whether the driver supports controlling the browser's location info. */\n  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',\n\n  /** Whether the driver supports taking screenshots. */\n  TAKES_SCREENSHOT: 'takesScreenshot',\n\n  /**\n   * Defines how the driver should handle unexpected alerts. The value should\n   * be one of \"accept\", \"dismiss\", or \"ignore\".\n   */\n  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehaviour',\n\n  /** Defines the browser version. */\n  VERSION: 'version'\n};\n/**\n * Describes how a proxy should be configured for a WebDriver session.\n * @record\n */\n\nfunction ProxyConfig() {}\n/**\n * The proxy type. Must be one of {\"manual\", \"pac\", \"system\"}.\n * @type {string}\n */\n\n\nProxyConfig.prototype.proxyType;\n/**\n * URL for the PAC file to use. Only used if {@link #proxyType} is \"pac\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.proxyAutoconfigUrl;\n/**\n * The proxy host for FTP requests. Only used if {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.ftpProxy;\n/**\n * The proxy host for HTTP requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.httpProxy;\n/**\n * The proxy host for HTTPS requests. Only used if {@link #proxyType} is\n * \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.sslProxy;\n/**\n * A comma delimited list of hosts which should bypass all proxies. Only used if\n * {@link #proxyType} is \"manual\".\n * @type {(string|undefined)}\n */\n\nProxyConfig.prototype.noProxy;\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\n\nfunction toMap(hash) {\n  let m = new Map();\n\n  for (let key in hash) {\n    if (hash.hasOwnProperty(key)) {\n      m.set(key, hash[key]);\n    }\n  }\n\n  return m;\n}\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\n\n\nclass Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    if (other instanceof Capabilities) {\n      other = other.map_;\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other);\n    }\n    /** @private @const {!Map<string, ?>} */\n\n\n    this.map_ = new Map(other);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Android.\n   */\n\n\n  static android() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.ANDROID);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Chrome.\n   */\n\n\n  static chrome() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n   */\n\n\n  static edge() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.EDGE);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Firefox.\n   */\n\n\n  static firefox() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n   */\n\n\n  static ie() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPad.\n   */\n\n\n  static ipad() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPAD);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for iPhone.\n   */\n\n\n  static iphone() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.IPHONE);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Opera.\n   */\n\n\n  static opera() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.OPERA);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for PhantomJS.\n   */\n\n\n  static phantomjs() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Safari.\n   */\n\n\n  static safari() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.SAFARI);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.\n   */\n\n\n  static htmlunit() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT);\n  }\n  /**\n   * @return {!Capabilities} A basic set of capabilities for HTMLUnit\n   *     with enabled Javascript.\n   */\n\n\n  static htmlunitwithjs() {\n    return new Capabilities().set(Capability.BROWSER_NAME, Browser.HTMLUNIT).set(Capability.SUPPORTS_JAVASCRIPT, true);\n  }\n  /**\n   * @return {!Object<string, ?>} The JSON representation of this instance.\n   *     Note, the returned object may contain nested promised values.\n   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n   *     Map).\n   */\n\n\n  [Symbols.serialize]() {\n    return serialize(this);\n  }\n  /**\n   * @param {string} key the parameter key to get.\n   * @return {T} the stored parameter value.\n   * @template T\n   */\n\n\n  get(key) {\n    return this.map_.get(key);\n  }\n  /**\n   * @param {string} key the key to test.\n   * @return {boolean} whether this capability set has the specified key.\n   */\n\n\n  has(key) {\n    return this.map_.has(key);\n  }\n  /**\n   * @return {!Iterator<string>} an iterator of the keys set.\n   */\n\n\n  keys() {\n    return this.map_.keys();\n  }\n  /** @return {number} The number of capabilities set. */\n\n\n  get size() {\n    return this.map_.size;\n  }\n  /**\n   * Merges another set of capabilities into this instance.\n   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n   *     set of capabilities to merge.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  merge(other) {\n    if (!other) {\n      throw new TypeError('no capabilities provided for merge');\n    }\n\n    let map;\n\n    if (other instanceof Capabilities) {\n      map = other.map_;\n    } else if (other instanceof Map) {\n      map = other;\n    } else {\n      other = toMap(other);\n    }\n\n    for (let key of other.keys()) {\n      this.set(key, other.get(key));\n    }\n\n    return this;\n  }\n  /**\n   * Deletes an entry from this set of capabilities.\n   *\n   * @param {string} key the capability key to delete.\n   */\n\n\n  delete(key) {\n    this.map_.delete(key);\n  }\n  /**\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Capabilities} A self reference.\n   * @throws {TypeError} If the `key` is not a string.\n   */\n\n\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('Capability keys must be strings: ' + typeof key);\n    }\n\n    this.map_.set(key, value);\n    return this;\n  }\n  /**\n   * Sets the logging preferences. Preferences may be specified as a\n   * {@link ./logging.Preferences} instance, or as a map of log-type to\n   * log-level.\n   * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n   *     preferences.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setLoggingPrefs(prefs) {\n    return this.set(Capability.LOGGING_PREFS, prefs);\n  }\n  /**\n   * Sets the proxy configuration for this instance.\n   * @param {ProxyConfig} proxy The desired proxy configuration.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setProxy(proxy) {\n    return this.set(Capability.PROXY, proxy);\n  }\n  /**\n   * Sets whether native events should be used.\n   * @param {boolean} enabled Whether to enable native events.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setEnableNativeEvents(enabled) {\n    return this.set(Capability.NATIVE_EVENTS, enabled);\n  }\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align\n   *     with the top of the viewport or 1 to align with the bottom.\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setScrollBehavior(behavior) {\n    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);\n  }\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   * @param {string} behavior The desired behavior should be \"accept\",\n   *     \"dismiss\", or \"ignore\". Defaults to \"dismiss\".\n   * @return {!Capabilities} A self reference.\n   */\n\n\n  setAlertBehavior(behavior) {\n    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);\n  }\n\n}\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\n\n\nfunction serialize(caps) {\n  let ret = {};\n\n  for (let key of caps.keys()) {\n    let cap = caps.get(key);\n\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap;\n    }\n  }\n\n  return ret;\n} // PUBLIC API\n\n\nmodule.exports = {\n  Browser: Browser,\n  Capabilities: Capabilities,\n  Capability: Capability,\n  ProxyConfig: ProxyConfig\n};","map":null,"metadata":{},"sourceType":"script"}