{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Utilities for parsing WebDriver commands from HTTP Requests.\n */\n\nconst events = require(\"events\");\n\nvar CommandName;\n\n(function (CommandName) {\n  CommandName[CommandName[\"NewSession\"] = 0] = \"NewSession\";\n  CommandName[CommandName[\"DeleteSession\"] = 1] = \"DeleteSession\";\n  CommandName[CommandName[\"Status\"] = 2] = \"Status\";\n  CommandName[CommandName[\"GetTimeouts\"] = 3] = \"GetTimeouts\";\n  CommandName[CommandName[\"SetTimeouts\"] = 4] = \"SetTimeouts\";\n  CommandName[CommandName[\"Go\"] = 5] = \"Go\";\n  CommandName[CommandName[\"GetCurrentURL\"] = 6] = \"GetCurrentURL\";\n  CommandName[CommandName[\"Back\"] = 7] = \"Back\";\n  CommandName[CommandName[\"Forward\"] = 8] = \"Forward\";\n  CommandName[CommandName[\"Refresh\"] = 9] = \"Refresh\";\n  CommandName[CommandName[\"GetTitle\"] = 10] = \"GetTitle\";\n  CommandName[CommandName[\"FindElement\"] = 11] = \"FindElement\";\n  CommandName[CommandName[\"FindElements\"] = 12] = \"FindElements\";\n  CommandName[CommandName[\"FindElementFromElement\"] = 13] = \"FindElementFromElement\";\n  CommandName[CommandName[\"FindElementsFromElement\"] = 14] = \"FindElementsFromElement\";\n  CommandName[CommandName[\"IsElementSelected\"] = 15] = \"IsElementSelected\";\n  CommandName[CommandName[\"GetElementAttribute\"] = 16] = \"GetElementAttribute\";\n  CommandName[CommandName[\"GetElementProperty\"] = 17] = \"GetElementProperty\";\n  CommandName[CommandName[\"GetElementCSSValue\"] = 18] = \"GetElementCSSValue\";\n  CommandName[CommandName[\"GetElementText\"] = 19] = \"GetElementText\";\n  CommandName[CommandName[\"GetElementTagName\"] = 20] = \"GetElementTagName\";\n  CommandName[CommandName[\"GetElementRect\"] = 21] = \"GetElementRect\";\n  CommandName[CommandName[\"IsElementEnabled\"] = 22] = \"IsElementEnabled\";\n  CommandName[CommandName[\"ElementClick\"] = 23] = \"ElementClick\";\n  CommandName[CommandName[\"ElementClear\"] = 24] = \"ElementClear\";\n  CommandName[CommandName[\"ElementSendKeys\"] = 25] = \"ElementSendKeys\";\n  CommandName[CommandName[\"WireMoveTo\"] = 26] = \"WireMoveTo\";\n  CommandName[CommandName[\"WireButtonDown\"] = 27] = \"WireButtonDown\";\n  CommandName[CommandName[\"WireButtonUp\"] = 28] = \"WireButtonUp\";\n  CommandName[CommandName[\"GetAlertText\"] = 29] = \"GetAlertText\";\n  CommandName[CommandName[\"AcceptAlert\"] = 30] = \"AcceptAlert\";\n  CommandName[CommandName[\"DismissAlert\"] = 31] = \"DismissAlert\";\n  CommandName[CommandName[\"UNKNOWN\"] = 32] = \"UNKNOWN\";\n})(CommandName = exports.CommandName || (exports.CommandName = {}));\n/**\n * Represents an endpoint in the WebDriver spec. Endpoints are defined by\n * the CommandName enum and the url pattern that they match.\n *\n * For example, the pattern\n *     /session/:sessionId/element/:elementId/click\n * will match urls such as\n *     /session/d9e52b96-9b6a-4cb3-b017-76e8b4236646/element/1c2855ba-213d-4466-ba16-b14a7e6c3699/click\n *\n * @param pattern The url pattern\n * @param method The HTTP method, ie GET, POST, DELETE\n * @param name The CommandName of this endpoint.\n */\n\n\nclass Endpoint {\n  constructor(pattern, method, name) {\n    this.pattern = pattern;\n    this.method = method;\n    this.name = name;\n  }\n  /**\n   * Tests whether a given url from a request matches this endpoint.\n   *\n   * @param url A url from a request to test against the endpoint.\n   * @param method The HTTP method.\n   * @returns {boolean} Whether the endpoint matches.\n   */\n\n\n  matches(url, method) {\n    let urlParts = url.split('/');\n    let patternParts = this.pattern.split('/');\n\n    if (method != this.method || urlParts.length != patternParts.length) {\n      return false;\n    } // TODO: Replace this naive search with better parsing.\n\n\n    for (let idx in patternParts) {\n      if (!patternParts[idx].startsWith(':') && patternParts[idx] != urlParts[idx]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Given a url from a http request, create an object containing parameters from the URL.\n   *\n   * Parameters are the parts of the endpoint's pattern that start with ':'. The ':' is dropped\n   * from the parameter key.\n   *\n   * @param url The url from the request.\n   * @returns An object mapping parameter keys to values from the url.\n   */\n\n\n  getParams(url) {\n    let urlParts = url.split('/');\n    let patternParts = this.pattern.split('/');\n    let params = {};\n\n    for (let idx in patternParts) {\n      if (patternParts[idx].startsWith(':')) {\n        let paramName = patternParts[idx].slice(1);\n        params[paramName] = urlParts[idx];\n      }\n    }\n\n    return params;\n  }\n\n}\n/**\n * An instance of a WebDriver command, containing the params and data for that request.\n *\n * @param commandName The enum identifying the command.\n * @param params Parameters for the command taken from the request's url.\n * @param data Optional data included with the command, taken from the body of the request.\n */\n\n\nclass WebDriverCommand extends events.EventEmitter {\n  constructor(commandName, url, method, params) {\n    super();\n    this.commandName = commandName;\n    this.url = url;\n    this.method = method;\n    this.params = params;\n  } // All WebDriver commands have a session Id, except for two.\n  // NewSession will have a session Id in the data\n  // Status just doesn't\n\n\n  get sessionId() {\n    if (!this.getParam('sessionId') && this.url.startsWith('/session')) {\n      return this.url.split('/')[2];\n    }\n\n    return this.getParam('sessionId');\n  }\n\n  getParam(key) {\n    return this.params[key];\n  }\n\n  handleData(data) {\n    try {\n      this.data = JSON.parse(data);\n    } catch (err) {\n      this.data = data;\n    }\n\n    this.emit('data');\n  }\n\n  handleResponse(statusCode, data) {\n    this.responseStatus = statusCode;\n\n    try {\n      this.responseData = JSON.parse(data);\n    } catch (err) {\n      this.responseData = data;\n    }\n\n    this.emit('response');\n  }\n\n}\n\nexports.WebDriverCommand = WebDriverCommand;\n/**\n * The set of known endpoints.\n */\n\nlet endpoints = [];\n\nfunction addWebDriverCommand(command, method, pattern) {\n  endpoints.push(new Endpoint(pattern, method, command));\n}\n/**\n * Returns a new WebdriverCommand object for the resource at the given URL.\n */\n\n\nfunction parseWebDriverCommand(url, method) {\n  for (let endpoint of endpoints) {\n    if (endpoint.matches(url, method)) {\n      let params = endpoint.getParams(url);\n      return new WebDriverCommand(endpoint.name, url, method, params);\n    }\n  }\n\n  return new WebDriverCommand(CommandName.UNKNOWN, url, method, {});\n}\n\nexports.parseWebDriverCommand = parseWebDriverCommand;\nlet sessionPrefix = '/session/:sessionId';\naddWebDriverCommand(CommandName.NewSession, 'POST', '/session');\naddWebDriverCommand(CommandName.DeleteSession, 'DELETE', '/session/:sessionId');\naddWebDriverCommand(CommandName.Status, 'GET', '/status');\naddWebDriverCommand(CommandName.GetTimeouts, 'GET', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.SetTimeouts, 'POST', sessionPrefix + '/timeouts');\naddWebDriverCommand(CommandName.Go, 'POST', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.GetCurrentURL, 'GET', sessionPrefix + '/url');\naddWebDriverCommand(CommandName.Back, 'POST', sessionPrefix + '/back');\naddWebDriverCommand(CommandName.Forward, 'POST', sessionPrefix + '/forward');\naddWebDriverCommand(CommandName.Refresh, 'POST', sessionPrefix + '/refresh');\naddWebDriverCommand(CommandName.GetTitle, 'GET', sessionPrefix + '/title');\naddWebDriverCommand(CommandName.FindElement, 'POST', sessionPrefix + '/element');\naddWebDriverCommand(CommandName.FindElements, 'POST', sessionPrefix + '/elements');\naddWebDriverCommand(CommandName.FindElementFromElement, 'POST', sessionPrefix + '/element/:elementId/element');\naddWebDriverCommand(CommandName.FindElementsFromElement, 'POST', sessionPrefix + '/element/:elementId/elements');\naddWebDriverCommand(CommandName.IsElementSelected, 'POST', sessionPrefix + '/element/:elementId/selected');\naddWebDriverCommand(CommandName.GetElementAttribute, 'GET', sessionPrefix + '/element/:elementId/attribute/:attributeName');\naddWebDriverCommand(CommandName.GetElementProperty, 'GET', sessionPrefix + '/element/:elementId/property/:propertyName');\naddWebDriverCommand(CommandName.GetElementCSSValue, 'GET', sessionPrefix + '/element/:elementId/css/:cssPropertyName');\naddWebDriverCommand(CommandName.GetElementText, 'GET', sessionPrefix + '/element/:elementId/text');\naddWebDriverCommand(CommandName.GetElementTagName, 'GET', sessionPrefix + '/element/:elementId/name');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/rect');\naddWebDriverCommand(CommandName.GetElementRect, 'GET', sessionPrefix + '/element/:elementId/size');\naddWebDriverCommand(CommandName.IsElementEnabled, 'GET', sessionPrefix + '/element/:elementId/enabled');\naddWebDriverCommand(CommandName.ElementClick, 'POST', sessionPrefix + '/element/:elementId/click');\naddWebDriverCommand(CommandName.ElementClear, 'POST', sessionPrefix + '/element/:elementId/clear');\naddWebDriverCommand(CommandName.ElementSendKeys, 'POST', sessionPrefix + '/element/:elementId/value');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert_text');\naddWebDriverCommand(CommandName.GetAlertText, 'GET', sessionPrefix + '/alert/text');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/alert/accept');\naddWebDriverCommand(CommandName.AcceptAlert, 'POST', sessionPrefix + '/accept_alert');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/alert/dismiss');\naddWebDriverCommand(CommandName.DismissAlert, 'POST', sessionPrefix + '/dismiss_alert'); // These commands are part of the JSON protocol, and were replaced by Perform Actions in the W3C\n// spec\n\naddWebDriverCommand(CommandName.WireMoveTo, 'POST', sessionPrefix + '/moveto');\naddWebDriverCommand(CommandName.WireButtonDown, 'POST', sessionPrefix + '/buttondown');\naddWebDriverCommand(CommandName.WireButtonUp, 'POST', sessionPrefix + '/buttonup'); //# sourceMappingURL=webdriver_commands.js.map","map":null,"metadata":{},"sourceType":"script"}