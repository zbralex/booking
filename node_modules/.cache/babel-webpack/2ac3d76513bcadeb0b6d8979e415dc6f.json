{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst cli_1 = require(\"./cli\");\n\nlet logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\n\nclass Config {\n  static osArch() {\n    return Config.osArch_;\n  }\n\n  static osType() {\n    return Config.osType_;\n  }\n\n  static noProxy() {\n    return Config.noProxy_;\n  }\n\n  static httpProxy() {\n    return Config.httpProxy_;\n  }\n\n  static httpsProxy() {\n    return Config.httpsProxy_;\n  }\n\n  static getConfigFile_() {\n    return path.resolve(Config.dir, '..', Config.configFile);\n  }\n\n  static getPackageFile_() {\n    return path.resolve(Config.dir, '..', Config.packageFile);\n  }\n\n  static getSeleniumDir() {\n    return path.resolve(Config.dir, '..', '..', 'selenium/');\n  }\n\n  static getBaseDir() {\n    return path.resolve(Config.dir, '..', '..');\n  }\n  /**\n   * Get the binary versions from the configuration file.\n   * @returns A map of the versions defined in the configuration file.\n   */\n\n\n  static binaryVersions() {\n    let configFile = require(Config.getConfigFile_());\n\n    let configVersions = {};\n    configVersions.selenium = configFile.webdriverVersions.selenium;\n    configVersions.chrome = configFile.webdriverVersions.chromedriver;\n    configVersions.gecko = configFile.webdriverVersions.geckodriver;\n    configVersions.ie = configFile.webdriverVersions.iedriver;\n    configVersions.android = configFile.webdriverVersions.androidsdk;\n    configVersions.appium = configFile.webdriverVersions.appium;\n    configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n    return configVersions;\n  }\n  /**\n   * Get the CDN urls from the configuration file.\n   * @returns A map of the CDN versions defined in the configuration file.\n   */\n\n\n  static cdnUrls() {\n    let configFile = require(Config.getConfigFile_());\n\n    let configCdnUrls = {};\n    configCdnUrls.selenium = configFile.cdnUrls.selenium;\n    configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n    configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n    configCdnUrls.ie = configFile.cdnUrls.iedriver;\n    configCdnUrls.android = configFile.cdnUrls.androidsdk;\n    return configCdnUrls;\n  }\n  /**\n   * Get the package version.\n   */\n\n\n  static getVersion() {\n    let packageFile = require(Config.getPackageFile_());\n\n    return packageFile.version;\n  }\n\n}\n\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config; //# sourceMappingURL=config.js.map","map":null,"metadata":{},"sourceType":"script"}