{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst child_process_1 = require(\"child_process\");\n\nconst q = require(\"q\");\n\nconst logger_1 = require(\"./logger\");\n\nconst BP_PATH = require.resolve('blocking-proxy/built/lib/bin.js');\n\nlet logger = new logger_1.Logger('BlockingProxy');\n\nclass BlockingProxyRunner {\n  constructor(config) {\n    this.config = config;\n  }\n\n  start() {\n    return q.Promise((resolve, reject) => {\n      this.checkSupportedConfig();\n      let args = ['--fork', '--seleniumAddress', this.config.seleniumAddress];\n\n      if (this.config.webDriverLogDir) {\n        args.push('--logDir', this.config.webDriverLogDir);\n      }\n\n      if (this.config.highlightDelay) {\n        args.push('--highlightDelay', this.config.highlightDelay.toString());\n      }\n\n      this.bpProcess = child_process_1.fork(BP_PATH, args, {\n        silent: true\n      });\n      logger.info('Starting BlockingProxy with args: ' + args.toString());\n      this.bpProcess.on('message', data => {\n        this.port = data['port'];\n        resolve(data['port']);\n      }).on('error', err => {\n        reject(new Error('Unable to start BlockingProxy ' + err));\n      }).on('exit', (code, signal) => {\n        reject(new Error('BP exited with ' + code));\n        logger.error('Exited with ' + code);\n        logger.error('signal ' + signal);\n      });\n      this.bpProcess.stdout.on('data', msg => {\n        logger.debug(msg.toString().trim());\n      });\n      this.bpProcess.stderr.on('data', msg => {\n        logger.error(msg.toString().trim());\n      });\n      process.on('exit', () => {\n        this.bpProcess.kill();\n      });\n    });\n  }\n\n  checkSupportedConfig() {\n    if (this.config.directConnect) {\n      throw new Error('BlockingProxy not yet supported with directConnect!');\n    }\n  }\n\n}\n\nexports.BlockingProxyRunner = BlockingProxyRunner; //# sourceMappingURL=bpRunner.js.map","map":null,"metadata":{},"sourceType":"script"}