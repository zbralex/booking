{"ast":null,"code":"\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./attachSession\"));\n\n__export(require(\"./browserStack\"));\n\n__export(require(\"./direct\"));\n\n__export(require(\"./driverProvider\"));\n\n__export(require(\"./hosted\"));\n\n__export(require(\"./local\"));\n\n__export(require(\"./mock\"));\n\n__export(require(\"./sauce\"));\n\n__export(require(\"./testObject\"));\n\n__export(require(\"./kobiton\"));\n\n__export(require(\"./useExistingWebDriver\"));\n\nconst attachSession_1 = require(\"./attachSession\");\n\nconst browserStack_1 = require(\"./browserStack\");\n\nconst direct_1 = require(\"./direct\");\n\nconst hosted_1 = require(\"./hosted\");\n\nconst local_1 = require(\"./local\");\n\nconst mock_1 = require(\"./mock\");\n\nconst sauce_1 = require(\"./sauce\");\n\nconst testObject_1 = require(\"./testObject\");\n\nconst kobiton_1 = require(\"./kobiton\");\n\nconst useExistingWebDriver_1 = require(\"./useExistingWebDriver\");\n\nconst logger_1 = require(\"../logger\");\n\nlet logger = new logger_1.Logger('driverProviders');\n\nexports.buildDriverProvider = config => {\n  let driverProvider;\n\n  if (config.directConnect) {\n    driverProvider = new direct_1.Direct(config);\n    exports.logWarnings('directConnect', config);\n  } else if (config.seleniumWebDriver) {\n    driverProvider = new useExistingWebDriver_1.UseExistingWebDriver(config);\n    exports.logWarnings('useExistingWebDriver', config);\n  } else if (config.seleniumAddress) {\n    if (config.seleniumSessionId) {\n      driverProvider = new attachSession_1.AttachSession(config);\n      exports.logWarnings('attachSession', config);\n    } else {\n      driverProvider = new hosted_1.Hosted(config);\n      exports.logWarnings('hosted', config);\n    }\n  } else if (config.testobjectUser && config.testobjectKey) {\n    driverProvider = new testObject_1.TestObject(config);\n    exports.logWarnings('testObject', config);\n  } else if (config.kobitonUser && config.kobitonKey) {\n    driverProvider = new kobiton_1.Kobiton(config);\n    exports.logWarnings('kobiton', config);\n  } else if (config.browserstackUser && config.browserstackKey) {\n    driverProvider = new browserStack_1.BrowserStack(config);\n    exports.logWarnings('browserStack', config);\n  } else if (config.sauceUser && config.sauceKey) {\n    driverProvider = new sauce_1.Sauce(config);\n    exports.logWarnings('sauce', config);\n  } else if (config.seleniumServerJar) {\n    driverProvider = new local_1.Local(config);\n    exports.logWarnings('local', config);\n  } else if (config.mockSelenium) {\n    driverProvider = new mock_1.Mock(config);\n    exports.logWarnings('mock', config);\n  } else {\n    driverProvider = new local_1.Local(config);\n    exports.logWarnings('local', config);\n  }\n\n  return driverProvider;\n};\n\nexports.logWarnings = (providerType, config) => {\n  let warnInto = 'Using driver provider ' + providerType + ', but also found extra driver provider parameter(s): ';\n  let warnList = [];\n\n  if ('directConnect' !== providerType && config.directConnect) {\n    warnList.push('directConnect');\n  }\n\n  if ('attachSession' !== providerType && 'hosted' !== providerType && config.seleniumAddress) {\n    warnList.push('seleniumAddress');\n  }\n\n  if ('attachSession' !== providerType && config.seleniumSessionId) {\n    warnList.push('seleniumSessionId');\n  }\n\n  if ('testObject' !== providerType && config.testObjectUser) {\n    warnList.push('testobjectUser');\n  }\n\n  if ('testObject' !== providerType && config.testObjectKey) {\n    warnList.push('testobjectKey');\n  }\n\n  if ('kobitonUser' !== providerType && config.kobitonUser) {\n    warnList.push('kobitonUser');\n  }\n\n  if ('kobitonKey' !== providerType && config.kobitonKey) {\n    warnList.push('kobitonKey');\n  }\n\n  if ('browserStack' !== providerType && config.browserstackUser) {\n    warnList.push('browserstackUser');\n  }\n\n  if ('browserStack' !== providerType && config.browserstackKey) {\n    warnList.push('browserstackKey');\n  }\n\n  if ('sauce' !== providerType && config.sauceUser) {\n    warnList.push('sauceUser');\n  }\n\n  if ('sauce' !== providerType && config.sauceKey) {\n    warnList.push('sauceKey');\n  }\n\n  if ('local' !== providerType && config.seleniumServerJar) {\n    warnList.push('seleniumServerJar');\n  }\n\n  if ('mock' !== providerType && config.mockSelenium) {\n    warnList.push('mockSelenium');\n  }\n\n  if ('useExistingWebDriver' !== providerType && config.seleniumWebDriver) {\n    warnList.push('seleniumWebDriver');\n  }\n\n  if (warnList.length !== 0) {\n    logger.warn(warnInto + warnList.join(', '));\n  }\n}; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}