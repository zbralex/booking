{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n\nconst blockingproxy_1 = require(\"./blockingproxy\");\n\nclass BPClient {\n  constructor(bpUrlValue) {\n    let bpUrl = url.parse(bpUrlValue);\n    this.hostname = bpUrl.hostname;\n    this.port = parseInt(bpUrl.port);\n  }\n  /**\n   * Toggle whether waiting for Angular is enabled.\n   *\n   * @param enabled Whether or not to enable waiting for angular.\n   * @returns {Promise<T>}\n   */\n\n\n  setWaitEnabled(enabled) {\n    return new Promise((resolve, reject) => {\n      let options = {\n        host: this.hostname,\n        port: this.port,\n        method: 'POST',\n        path: `/${blockingproxy_1.BP_PREFIX}/waitEnabled`\n      };\n      let request = http.request(options, response => {\n        response.on('data', () => {});\n        response.on('error', err => reject(err));\n        response.on('end', () => {\n          resolve();\n        });\n      });\n      request.write(JSON.stringify({\n        value: enabled\n      }));\n      request.end();\n    });\n  }\n  /**\n   * Set the selector used to find the root element of the Angular application to wait for. See\n   * AngularWaitBarrier for more details.\n   *\n   * @param selector A selector, or empty string to wait for all Angular apps.\n   */\n\n\n  setWaitParams(rootSelector) {\n    return new Promise((resolve, reject) => {\n      let options = {\n        host: this.hostname,\n        port: this.port,\n        method: 'POST',\n        path: `/${blockingproxy_1.BP_PREFIX}/waitParams`\n      };\n      let request = http.request(options, response => {\n        response.on('data', () => {});\n        response.on('error', err => reject(err));\n        response.on('end', () => {\n          resolve();\n        });\n      });\n      request.write(JSON.stringify({\n        rootSelector: rootSelector\n      }));\n      request.end();\n    });\n  }\n\n  isWaitEnabled() {\n    return new Promise(res => {\n      let options = {\n        host: this.hostname,\n        port: this.port,\n        path: `/${blockingproxy_1.BP_PREFIX}/waitEnabled`\n      };\n      http.get(options, response => {\n        let body = '';\n        response.on('data', data => {\n          body += data;\n        });\n        response.on('end', () => {\n          res(JSON.parse(body).value);\n        });\n      });\n    });\n  }\n\n}\n\nexports.BPClient = BPClient; //# sourceMappingURL=client.js.map","map":null,"metadata":{},"sourceType":"script"}