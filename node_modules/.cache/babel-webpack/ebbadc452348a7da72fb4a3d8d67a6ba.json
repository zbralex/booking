{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Direct Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst chrome_1 = require(\"selenium-webdriver/chrome\");\n\nconst exitCodes_1 = require(\"../exitCodes\");\n\nconst logger_1 = require(\"../logger\");\n\nconst driverProvider_1 = require(\"./driverProvider\");\n\nconst SeleniumConfig = require('webdriver-manager/built/lib/config').Config;\n\nlet logger = new logger_1.Logger('direct');\n\nclass Direct extends driverProvider_1.DriverProvider {\n  constructor(config) {\n    super(config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  setupDriverEnv() {\n    switch (this.config_.capabilities.browserName) {\n      case 'chrome':\n        logger.info('Using ChromeDriver directly...');\n        break;\n\n      case 'firefox':\n        logger.info('Using FirefoxDriver directly...');\n        break;\n\n      default:\n        throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n    }\n\n    return q.fcall(function () {});\n  }\n  /**\n   * Create a new driver.\n   *\n   * @public\n   * @override\n   * @return webdriver instance\n   */\n\n\n  getNewDriver() {\n    let driver;\n\n    switch (this.config_.capabilities.browserName) {\n      case 'chrome':\n        let chromeDriverFile;\n\n        if (this.config_.chromeDriver) {\n          chromeDriverFile = this.config_.chromeDriver;\n        } else {\n          try {\n            let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n            let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n            chromeDriverFile = updateConfig.chrome.last;\n          } catch (e) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n          }\n        }\n\n        if (!fs.existsSync(chromeDriverFile)) {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find chromedriver at ' + chromeDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n        }\n\n        let chromeService = new chrome_1.ServiceBuilder(chromeDriverFile).build(); // driver = ChromeDriver.createSession(new Capabilities(this.config_.capabilities),\n        // chromeService);\n        // TODO(ralphj): fix typings\n\n        driver = require('selenium-webdriver/chrome').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), chromeService);\n        break;\n\n      case 'firefox':\n        let geckoDriverFile;\n\n        if (this.config_.geckoDriver) {\n          geckoDriverFile = this.config_.geckoDriver;\n        } else {\n          try {\n            let updateJson = path.resolve(SeleniumConfig.getSeleniumDir(), 'update-config.json');\n            let updateConfig = JSON.parse(fs.readFileSync(updateJson).toString());\n            geckoDriverFile = updateConfig.gecko.last;\n          } catch (e) {\n            throw new exitCodes_1.BrowserError(logger, 'Could not find update-config.json. ' + 'Run \\'webdriver-manager update\\' to download binaries.');\n          }\n        }\n\n        if (!fs.existsSync(geckoDriverFile)) {\n          throw new exitCodes_1.BrowserError(logger, 'Could not find geckodriver at ' + geckoDriverFile + '. Run \\'webdriver-manager update\\' to download binaries.');\n        } // TODO (mgiambalvo): Turn this into an import when the selenium typings are updated.\n\n\n        const FirefoxServiceBuilder = require('selenium-webdriver/firefox').ServiceBuilder;\n\n        let firefoxService = new FirefoxServiceBuilder(geckoDriverFile).build(); // TODO(mgiambalvo): Fix typings.\n\n        driver = require('selenium-webdriver/firefox').Driver.createSession(new selenium_webdriver_1.Capabilities(this.config_.capabilities), firefoxService);\n        break;\n\n      default:\n        throw new exitCodes_1.BrowserError(logger, 'browserName ' + this.config_.capabilities.browserName + ' is not supported with directConnect.');\n    }\n\n    this.drivers_.push(driver);\n    return driver;\n  }\n\n}\n\nexports.Direct = Direct; //# sourceMappingURL=direct.js.map","map":null,"metadata":{},"sourceType":"script"}