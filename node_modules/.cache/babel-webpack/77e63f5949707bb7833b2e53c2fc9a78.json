{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http = require(\"http\");\n\nconst url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\n\n\nclass SimpleWebDriverClient {\n  constructor(seleniumAddress) {\n    this.seleniumAddress = seleniumAddress;\n  }\n  /**\n   * Send an execute script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  execute(sessionId, data) {\n    const url = ['session', sessionId, 'execute'].join('/');\n    return this.createSeleniumRequest('POST', url, data);\n  }\n  /**\n   * Send an execute async script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  executeAsync(sessionId, data) {\n    const url = ['session', sessionId, 'execute_async'].join('/');\n    return this.createSeleniumRequest('POST', url, data);\n  }\n  /**\n   * Get the location of an element.\n   *\n   * @param sessionId\n   * @param elementId\n   * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n   */\n\n\n  getLocation(sessionId, elementId) {\n    const url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n    return this.createSeleniumRequest('GET', url);\n  }\n  /**\n   * Get the size of an element.\n   *\n   * @param sessionId\n   * @param elementId\n   * @returns Promise<{}> A promise that resolves with the height and width of the element.\n   */\n\n\n  getSize(sessionId, elementId) {\n    const url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n    return this.createSeleniumRequest('GET', url);\n  }\n\n  createSeleniumRequest(method, messageUrl, data) {\n    let parsedUrl = url.parse(this.seleniumAddress);\n    let options = {};\n    options['method'] = method;\n    options['path'] = parsedUrl.path + '/' + messageUrl;\n    options['hostname'] = parsedUrl.hostname;\n    options['port'] = parseInt(parsedUrl.port);\n    let request = http.request(options);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        request.write(data);\n      }\n\n      request.end();\n      request.on('response', resp => {\n        let respData = '';\n        resp.on('data', d => {\n          respData += d;\n        });\n        resp.on('error', err => {\n          reject(err);\n        });\n        resp.on('end', () => {\n          let response = JSON.parse(respData); // Selenium 3.5.x or greater\n\n          if (response.status && response.status > 0) {\n            console.error(`Got status ${response.status} from selenium`, response.value);\n            reject(JSON.stringify(response.value));\n          } // Selenium 3.0.x\n\n\n          if (response.state && response.state !== 'success') {\n            console.error(`Got response ${response.state} from selenium`, response.value);\n            reject(JSON.stringify(response.value));\n          }\n\n          resolve(response.value);\n        });\n      });\n    });\n  }\n\n}\n\nexports.SimpleWebDriverClient = SimpleWebDriverClient; //# sourceMappingURL=simple_webdriver_client.js.map","map":null,"metadata":{},"sourceType":"script"}