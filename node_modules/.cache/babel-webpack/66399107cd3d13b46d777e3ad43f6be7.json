{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst CONFIG_ERROR_CODE = 105;\nconst BROWSER_CONNECT_ERROR_CODE = 135;\nconst KITCHEN_SINK_CODE = 199;\n\nclass IError extends Error {}\n\nexports.IError = IError;\nlet ProtractorError = /*#__PURE__*/(() => {\n  class ProtractorError extends IError {\n    constructor(logger, message, code, error) {\n      super(message);\n      this.message = message;\n      this.code = code; // replacing the stack trace with the thrown error stack trace.\n\n      if (error) {\n        let protractorError = error;\n        this.stack = protractorError.stack;\n      }\n\n      ProtractorError.log(logger, this.code, this.message, this.stack);\n\n      if (!ProtractorError.SUPRESS_EXIT_CODE) {\n        process.exit(this.code);\n      }\n    }\n\n    static log(logger, code, message, stack) {\n      let messages = message.split('\\n');\n\n      if (messages.length > 1) {\n        message = messages[0];\n      }\n\n      logger.error('Error code: ' + code);\n      logger.error('Error message: ' + message);\n      logger.error(stack);\n    }\n\n  }\n\n  ProtractorError.CODE = KITCHEN_SINK_CODE;\n  ProtractorError.SUPRESS_EXIT_CODE = false;\n  return ProtractorError;\n})();\nexports.ProtractorError = ProtractorError;\n/**\n * Configuration file error\n */\n\nlet ConfigError = /*#__PURE__*/(() => {\n  class ConfigError extends ProtractorError {\n    constructor(logger, message, error) {\n      super(logger, message, ConfigError.CODE, error);\n    }\n\n  }\n\n  ConfigError.CODE = CONFIG_ERROR_CODE;\n  return ConfigError;\n})();\nexports.ConfigError = ConfigError;\n/**\n * Browser errors including getting a driver session, direct connect, etc.\n */\n\nlet BrowserError = /*#__PURE__*/(() => {\n  class BrowserError extends ProtractorError {\n    constructor(logger, message) {\n      super(logger, message, BrowserError.CODE);\n    }\n\n  }\n\n  BrowserError.CODE = BROWSER_CONNECT_ERROR_CODE;\n  BrowserError.ERR_MSGS = ['ECONNREFUSED connect ECONNREFUSED', 'Sauce Labs Authentication Error', 'Invalid username or password'];\n  return BrowserError;\n})();\nexports.BrowserError = BrowserError;\n\nclass ErrorHandler {\n  static isError(errMsgs, e) {\n    if (errMsgs && errMsgs.length > 0) {\n      for (let errPos in errMsgs) {\n        let errMsg = errMsgs[errPos];\n\n        if (e.message && e.message.indexOf(errMsg) !== -1) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  static parseError(e) {\n    if (ErrorHandler.isError(ConfigError.ERR_MSGS, e)) {\n      return ConfigError.CODE;\n    }\n\n    if (ErrorHandler.isError(BrowserError.ERR_MSGS, e)) {\n      return BrowserError.CODE;\n    }\n\n    return null;\n  }\n\n}\n\nexports.ErrorHandler = ErrorHandler; //# sourceMappingURL=exitCodes.js.map","map":null,"metadata":{},"sourceType":"script"}