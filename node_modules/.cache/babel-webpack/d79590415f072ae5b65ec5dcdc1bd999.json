{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\n\nclass Cli {\n  constructor() {\n    this.programs = {};\n  }\n  /**\n   * Register a program to the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  program(prog) {\n    this.programs[prog.cmd] = prog;\n    return this;\n  }\n  /**\n   * Add a usage for the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  usage(usageText) {\n    this.usageText = usageText;\n    return this;\n  }\n  /**\n   * Prints help for the programs registered to the cli.\n   */\n\n\n  printHelp() {\n    console.log('Usage: ' + this.usageText);\n    console.log('\\nCommands:');\n    let cmdDescriptionPos = this.posCmdDescription();\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      prog.printCmd(cmdDescriptionPos);\n    }\n\n    let descriptionPos = this.posDescription();\n    let defaultPos = this.posDefault();\n    let extOptions = {};\n    console.log('\\nOptions:'); // print all options\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      prog.printOptions(descriptionPos, defaultPos, extOptions);\n    }\n  }\n  /**\n   * For commands, gets the position where the description should start so they\n   * are aligned.\n   * @returns The position where the command description should start.\n   */\n\n\n  posCmdDescription() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      position = Math.max(position, cmd.length + 6);\n    }\n\n    return position;\n  }\n  /**\n   * For options, gets the position where the description should start so they\n   * are aligned.\n   * @returns The position where the option description should start.\n   */\n\n\n  posDescription() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      position = Math.max(position, prog.posDescription());\n    }\n\n    return position;\n  }\n  /**\n   * For options, get the position where the default values should start so they\n   * are aligned.\n   * @returns The position where the option default values should start.\n   */\n\n\n  posDefault() {\n    let position = -1;\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      position = Math.max(position, prog.posDefault());\n    }\n\n    return position;\n  }\n  /**\n   * Go through all programs and add options to the collection.\n   * @returns The options used in the programs.\n   */\n\n\n  getOptions() {\n    let allOptions = {};\n\n    for (let cmd in this.programs) {\n      let prog = this.programs[cmd];\n      allOptions = prog.getOptions_(allOptions);\n    }\n\n    return allOptions;\n  }\n  /**\n   * Get the options used by the programs and create the minimist options\n   * to ensure that minimist parses the values properly.\n   * @returns The options for minimist.\n   */\n\n\n  getMinimistOptions() {\n    let allOptions = this.getOptions();\n    let minimistOptions = {};\n    let minimistBoolean = [];\n    let minimistString = [];\n    let minimistNumber = [];\n    let minimistDefault = {};\n\n    for (let opt in allOptions) {\n      let option = allOptions[opt];\n\n      if (option.type === 'boolean') {\n        minimistBoolean.push(option.opt);\n      } else if (option.type === 'string') {\n        minimistString.push(option.opt);\n      } else if (option.type === 'number') {\n        minimistNumber.push(option.opt);\n      }\n\n      if (typeof option.defaultValue !== 'undefined') {\n        minimistDefault[option.opt] = option.defaultValue;\n      }\n    }\n\n    minimistOptions['boolean'] = minimistBoolean;\n    minimistOptions['string'] = minimistString;\n    minimistOptions['number'] = minimistNumber;\n    minimistOptions['default'] = minimistDefault;\n    return minimistOptions;\n  }\n\n}\n\nexports.Cli = Cli; //# sourceMappingURL=cli.js.map","map":null,"metadata":{},"sourceType":"script"}