{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_definition_1 = require(\"./command_definition\");\n\nexports.getNetworkConnection = new command_definition_1.CommandDefinition('getNetworkConnection', [], 'GET', '/network_connection');\nexports.setNetworkConnection = new command_definition_1.CommandDefinition('setNetworkConnection', ['type'], 'POST', '/network_connection', args => {\n  if (typeof args[0] == 'boolean') {\n    // Transform into bitmask\n    return [(args[0] ? 1 : 0) + (args[1] ? 2 : 0) + (args[2] ? 4 : 0)];\n  } else {\n    return args;\n  }\n});\nexports.toggleAirplaneMode = new command_definition_1.CommandDefinition('toggleAirplaneMode', [], 'POST', 'appium/device/toggle_airplane_mode');\nexports.toggleWiFi = new command_definition_1.CommandDefinition('toggleWiFi', [], 'POST', 'appium/device/toggle_wifi');\nexports.toggleData = new command_definition_1.CommandDefinition('toggleData', [], 'POST', 'appium/device/toggle_data');\nexports.toggleLocationServices = new command_definition_1.CommandDefinition('toggleLocationServices', [], 'POST', 'appium/device/toggle_location_services');\nexports.getGeolocation = new command_definition_1.CommandDefinition('getGeolocation', [], 'GET', '/location');\nexports.setGeolocation = new command_definition_1.CommandDefinition('setGeolocation', ['location'], 'POST', '/location', args => {\n  return [{\n    latitude: args[0] || 0,\n    longitude: args[1] || 0,\n    altitude: args[2] || 0\n  }];\n});\nexports.getCurrentDeviceActivity = new command_definition_1.CommandDefinition('getCurrentDeviceActivity', [], 'GET', '/appium/device/current_activity');\nexports.startDeviceActivity = new command_definition_1.CommandDefinition('startDeviceActivity', ['appPackage', 'appActivity', 'appWaitPackage', 'appWaitActivity'], 'POST', '/appium/device/start_activity', args => {\n  if (args.length == 2) {\n    // No appWait, default parameters to undefined\n    args[2] = undefined;\n    args[3] = undefined;\n  }\n\n  if (args.length == 4) {\n    return args;\n  } else {\n    throw new RangeError('startDeviceActivity requires 2 or 4 arguments, got ' + args.length);\n  }\n});\nexports.getAppiumSettings = new command_definition_1.CommandDefinition('getAppiumSettings', [], 'GET', '/appium/settings');\nexports.setAppiumSettings = new command_definition_1.CommandDefinition('setAppiumSettings', ['settings'], 'POST', '/appium/settings');\nexports.getCurrentContext = new command_definition_1.CommandDefinition('getCurrentContext', [], 'GET', '/context');\nexports.selectContext = new command_definition_1.CommandDefinition('selectContext', ['name'], 'POST', '/context');\nexports.getScreenOrientation = new command_definition_1.CommandDefinition('getScreenOrientation', [], 'GET', '/orientation');\nexports.setScreenOrientation = new command_definition_1.CommandDefinition('setScreenOrientation', ['orientation'], 'POST', '/orientation', args => {\n  let orientation = (args[0] || '').toUpperCase();\n\n  if (orientation != 'PORTRAIT' && orientation != 'LANDSCAPE') {\n    throw new TypeError('Invalid orientation \"' + args[0] + '\"');\n  }\n\n  args[0] = orientation;\n  return args;\n});\nexports.isDeviceLocked = new command_definition_1.CommandDefinition('isDeviceLocked', [], 'POST', '/appium/device/is_locked');\nexports.lockDevice = new command_definition_1.CommandDefinition('lockDevice', ['seconds'], 'POST', '/appium/device/lock', args => {\n  args[0] = args[0] || 0;\n  return args;\n});\nexports.unlockDevice = new command_definition_1.CommandDefinition('unlockDevice', [], 'POST', '/appium/device/unlock');\nexports.installApp = new command_definition_1.CommandDefinition('installApp', ['appPath'], 'POST', '/appium/device/install_app');\nexports.isAppInstalled = new command_definition_1.CommandDefinition('isAppInstalled', ['bundleId'], 'POST', 'appium/device/app_installed');\nexports.removeApp = new command_definition_1.CommandDefinition('removeApp', ['appId'], 'POST', '/appium/device/remove_app');\nexports.pullFileFromDevice = new command_definition_1.CommandDefinition('pullFileFromDevice', ['path'], 'POST', '/appium/device/pull_file');\nexports.pullFolderFromDevice = new command_definition_1.CommandDefinition('pullFolderFromDevice', ['path'], 'POST', '/appium/device/pull_folder');\nexports.pushFileToDevice = new command_definition_1.CommandDefinition('pushFileToDevice', ['path', 'data'], 'POST', 'appium/device/push_file');\nexports.listContexts = new command_definition_1.CommandDefinition('listContexts', [], 'GET', '/contexts');\nexports.uploadFile = new command_definition_1.CommandDefinition('uploadFile', ['file'], 'POST', '/file');\nexports.switchToParentFrame = new command_definition_1.CommandDefinition('switchToParentFrame', [], 'POST', '/frame/parent');\nexports.fullscreen = new command_definition_1.CommandDefinition('fullscreen', [], 'POST', '/window/fullscreen');\nexports.sendAppToBackground = new command_definition_1.CommandDefinition('sendAppToBackground', ['seconds'], 'POST', '/appium/app/background', args => {\n  args[0] = args[0] || 0;\n  return args;\n});\nexports.closeApp = new command_definition_1.CommandDefinition('closeApp', [], 'POST', '/appium/app/close');\nexports.getAppStrings = new command_definition_1.CommandDefinition('getAppStrings', ['language'], 'POST', 'appium/app/strings', args => {\n  args[0] = args.length ? args[0] : undefined; // Default to `undefined`\n\n  return args;\n});\nexports.launchSession = new command_definition_1.CommandDefinition('launchSession', [], 'POST', '/appium/app/launch');\nexports.resetApp = new command_definition_1.CommandDefinition('resetApp', [], 'POST', '/appium/app/reset');\nexports.hideSoftKeyboard = new command_definition_1.CommandDefinition('hideSoftKeyboard', ['strategy', 'key'], 'POST', '/appium/device/hide_keyboard', args => {\n  switch (args[0] || 'default') {\n    case 'default':\n      args[0] = 'default';\n\n    case 'swipeDown':\n    case 'tapOut':\n    case 'tapOutside':\n      if (args.length == 1) {\n        args[1] = undefined; // Default to `undefined`\n      }\n\n    case 'press':\n    case 'pressKey':\n      return args;\n\n    default:\n      throw new RangeError('Invalid keyboard hiding strategy \"' + args[0] + '\"');\n  }\n});\nexports.getDeviceTime = new command_definition_1.CommandDefinition('getDeviceTime', [], 'GET', '/appium/device/system_time');\nexports.openDeviceNotifications = new command_definition_1.CommandDefinition('openDeviceNotifications', [], 'POST', '/appium/device/open_notifications');\nexports.rotationGesture = new command_definition_1.CommandDefinition('rotationGesture', ['x', 'y', 'duration', 'rotation', 'touchCount'], 'POST', '/appium/device/rotate', args => {\n  args[0] = args[0] || 0;\n  args[1] = args[1] || 0;\n  args[2] = args[2] === undefined ? 1 : args[2];\n  args[3] = args[3] === undefined ? 180 : args[3];\n  args[4] = args[4] == undefined ? 2 : args[4];\n  return args;\n});\nexports.shakeDevice = new command_definition_1.CommandDefinition('shakeDevice', [], 'POST', 'appium/device/shake');\nexports.sendChromiumCommand = new command_definition_1.CommandDefinition('sendChromiumCommand', ['cmd', 'params'], 'POST', '/chromium/send_command');\nexports.sendChromiumCommandAndGetResult = new command_definition_1.CommandDefinition('sendChromiumCommandAndGetResult', ['cmd', 'params'], 'POST', '/chromium/send_command_and_get_result'); //# sourceMappingURL=command_definitions.js.map","map":null,"metadata":{},"sourceType":"script"}