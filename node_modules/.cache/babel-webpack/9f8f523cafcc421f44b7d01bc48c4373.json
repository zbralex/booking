{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * The base WebDriver error type. This error type is only used directly when a\n * more appropriate category is not defined for the offending error.\n */\n\nclass WebDriverError extends Error {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n    /** @override */\n\n    this.name = this.constructor.name;\n    /**\n     * A stacktrace reported by the remote webdriver endpoint that initially\n     * reported this error. This property will be an empty string if the remote\n     * end did not provide a stacktrace.\n     * @type {string}\n     */\n\n    this.remoteStacktrace = '';\n  }\n\n}\n/**\n * An attempt was made to select an element that cannot be selected.\n */\n\n\nclass ElementNotSelectableError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * Indicates a command could not be completed because the target element is\n * not pointer or keyboard interactable. This will often occur if an element\n * is present in the DOM, but not rendered (i.e. its CSS style has\n * \"display: none\").\n */\n\n\nclass ElementNotInteractableError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An element command could not be completed because the element is not visible\n * on the page.\n *\n * @deprecated Use {@link ElementNotInteractable} instead.\n */\n\n\nclass ElementNotVisibleError extends ElementNotInteractableError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * The arguments passed to a command are either invalid or malformed.\n */\n\n\nclass InvalidArgumentError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An illegal attempt was made to set a cookie under a different domain than\n * the current page.\n */\n\n\nclass InvalidCookieDomainError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * The coordinates provided to an interactions operation are invalid.\n */\n\n\nclass InvalidElementCoordinatesError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An element command could not be completed because the element is in an\n * invalid state, e.g. attempting to click an element that is no longer attached\n * to the document.\n */\n\n\nclass InvalidElementStateError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * Argument was an invalid selector.\n */\n\n\nclass InvalidSelectorError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * Occurs when a command is directed to a session that does not exist.\n */\n\n\nclass NoSuchSessionError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An error occurred while executing JavaScript supplied by the user.\n */\n\n\nclass JavascriptError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * The target for mouse interaction is not in the browser’s viewport and cannot\n * be brought into that viewport.\n */\n\n\nclass MoveTargetOutOfBoundsError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An attempt was made to operate on a modal dialog when one was not open.\n */\n\n\nclass NoSuchAlertError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An element could not be located on the page using the given search\n * parameters.\n */\n\n\nclass NoSuchElementError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A request to switch to a frame could not be satisfied because the frame\n * could not be found.\n */\n\n\nclass NoSuchFrameError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A request to switch to a window could not be satisfied because the window\n * could not be found.\n */\n\n\nclass NoSuchWindowError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A script did not complete before its timeout expired.\n */\n\n\nclass ScriptTimeoutError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A new session could not be created.\n */\n\n\nclass SessionNotCreatedError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An element command failed because the referenced element is no longer\n * attached to the DOM.\n */\n\n\nclass StaleElementReferenceError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * An operation did not complete before its timeout expired.\n */\n\n\nclass TimeoutError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A request to set a cookie’s value could not be satisfied.\n */\n\n\nclass UnableToSetCookieError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A screen capture operation was not possible.\n */\n\n\nclass UnableToCaptureScreenError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * A modal dialog was open, blocking this operation.\n */\n\n\nclass UnexpectedAlertOpenError extends WebDriverError {\n  /**\n   * @param {string=} opt_error the error message, if any.\n   * @param {string=} opt_text the text of the open dialog, if available.\n   */\n  constructor(opt_error, opt_text) {\n    super(opt_error);\n    /** @private {(string|undefined)} */\n\n    this.text_ = opt_text;\n  }\n  /**\n   * @return {(string|undefined)} The text displayed with the unhandled alert,\n   *     if available.\n   */\n\n\n  getAlertText() {\n    return this.text_;\n  }\n\n}\n/**\n * A command could not be executed because the remote end is not aware of it.\n */\n\n\nclass UnknownCommandError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * The requested command matched a known URL but did not match an method for\n * that URL.\n */\n\n\nclass UnknownMethodError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n}\n/**\n * Reports an unsupported operation.\n */\n\n\nclass UnsupportedOperationError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error);\n  }\n\n} // TODO(jleyba): Define UnknownError as an alias of WebDriverError?\n\n/**\n * Enum of legacy error codes.\n * TODO: remove this when all code paths have been switched to the new error\n * types.\n * @deprecated\n * @enum {number}\n */\n\n\nconst ErrorCode = {\n  SUCCESS: 0,\n  NO_SUCH_ELEMENT: 7,\n  NO_SUCH_FRAME: 8,\n  UNKNOWN_COMMAND: 9,\n  UNSUPPORTED_OPERATION: 9,\n  STALE_ELEMENT_REFERENCE: 10,\n  ELEMENT_NOT_VISIBLE: 11,\n  INVALID_ELEMENT_STATE: 12,\n  UNKNOWN_ERROR: 13,\n  ELEMENT_NOT_SELECTABLE: 15,\n  JAVASCRIPT_ERROR: 17,\n  XPATH_LOOKUP_ERROR: 19,\n  TIMEOUT: 21,\n  NO_SUCH_WINDOW: 23,\n  INVALID_COOKIE_DOMAIN: 24,\n  UNABLE_TO_SET_COOKIE: 25,\n  UNEXPECTED_ALERT_OPEN: 26,\n  NO_SUCH_ALERT: 27,\n  SCRIPT_TIMEOUT: 28,\n  INVALID_ELEMENT_COORDINATES: 29,\n  IME_NOT_AVAILABLE: 30,\n  IME_ENGINE_ACTIVATION_FAILED: 31,\n  INVALID_SELECTOR_ERROR: 32,\n  SESSION_NOT_CREATED: 33,\n  MOVE_TARGET_OUT_OF_BOUNDS: 34,\n  SQL_DATABASE_ERROR: 35,\n  INVALID_XPATH_SELECTOR: 51,\n  INVALID_XPATH_SELECTOR_RETURN_TYPE: 52,\n  METHOD_NOT_ALLOWED: 405\n};\nconst LEGACY_ERROR_CODE_TO_TYPE = new Map([[ErrorCode.NO_SUCH_ELEMENT, NoSuchElementError], [ErrorCode.NO_SUCH_FRAME, NoSuchFrameError], [ErrorCode.UNSUPPORTED_OPERATION, UnsupportedOperationError], [ErrorCode.STALE_ELEMENT_REFERENCE, StaleElementReferenceError], [ErrorCode.ELEMENT_NOT_VISIBLE, ElementNotVisibleError], [ErrorCode.INVALID_ELEMENT_STATE, InvalidElementStateError], [ErrorCode.UNKNOWN_ERROR, WebDriverError], [ErrorCode.ELEMENT_NOT_SELECTABLE, ElementNotSelectableError], [ErrorCode.JAVASCRIPT_ERROR, JavascriptError], [ErrorCode.XPATH_LOOKUP_ERROR, InvalidSelectorError], [ErrorCode.TIMEOUT, TimeoutError], [ErrorCode.NO_SUCH_WINDOW, NoSuchWindowError], [ErrorCode.INVALID_COOKIE_DOMAIN, InvalidCookieDomainError], [ErrorCode.UNABLE_TO_SET_COOKIE, UnableToSetCookieError], [ErrorCode.UNEXPECTED_ALERT_OPEN, UnexpectedAlertOpenError], [ErrorCode.NO_SUCH_ALERT, NoSuchAlertError], [ErrorCode.SCRIPT_TIMEOUT, ScriptTimeoutError], [ErrorCode.INVALID_ELEMENT_COORDINATES, InvalidElementCoordinatesError], [ErrorCode.INVALID_SELECTOR_ERROR, InvalidSelectorError], [ErrorCode.SESSION_NOT_CREATED, SessionNotCreatedError], [ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS, MoveTargetOutOfBoundsError], [ErrorCode.INVALID_XPATH_SELECTOR, InvalidSelectorError], [ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPE, InvalidSelectorError], [ErrorCode.METHOD_NOT_ALLOWED, UnsupportedOperationError]]);\nconst ERROR_CODE_TO_TYPE = new Map([['unknown error', WebDriverError], ['element not interactable', ElementNotInteractableError], ['element not selectable', ElementNotSelectableError], ['element not visible', ElementNotVisibleError], ['invalid argument', InvalidArgumentError], ['invalid cookie domain', InvalidCookieDomainError], ['invalid element coordinates', InvalidElementCoordinatesError], ['invalid element state', InvalidElementStateError], ['invalid selector', InvalidSelectorError], ['invalid session id', NoSuchSessionError], ['javascript error', JavascriptError], ['move target out of bounds', MoveTargetOutOfBoundsError], ['no such alert', NoSuchAlertError], ['no such element', NoSuchElementError], ['no such frame', NoSuchFrameError], ['no such window', NoSuchWindowError], ['script timeout', ScriptTimeoutError], ['session not created', SessionNotCreatedError], ['stale element reference', StaleElementReferenceError], ['timeout', TimeoutError], ['unable to set cookie', UnableToSetCookieError], ['unable to capture screen', UnableToCaptureScreenError], ['unexpected alert open', UnexpectedAlertOpenError], ['unknown command', UnknownCommandError], ['unknown method', UnknownMethodError], ['unsupported operation', UnsupportedOperationError]]);\nconst TYPE_TO_ERROR_CODE = new Map();\nERROR_CODE_TO_TYPE.forEach((value, key) => {\n  TYPE_TO_ERROR_CODE.set(value, key);\n});\n/**\n * @param {*} err The error to encode.\n * @return {{error: string, message: string}} the encoded error.\n */\n\nfunction encodeError(err) {\n  let type = WebDriverError;\n\n  if (err instanceof WebDriverError && TYPE_TO_ERROR_CODE.has(err.constructor)) {\n    type = err.constructor;\n  }\n\n  let message = err instanceof Error ? err.message : err + '';\n  let code = TYPE_TO_ERROR_CODE.get(type);\n  return {\n    'error': code,\n    'message': message\n  };\n}\n/**\n * Checks a response object from a server that adheres to the W3C WebDriver\n * protocol.\n * @param {*} data The response data to check.\n * @return {*} The response data if it was not an encoded error.\n * @throws {WebDriverError} the decoded error, if present in the data object.\n * @deprecated Use {@link #throwDecodedError(data)} instead.\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol\n */\n\n\nfunction checkResponse(data) {\n  if (data && typeof data.error === 'string') {\n    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;\n    throw new ctor(data.message);\n  }\n\n  return data;\n}\n/**\n * Tests if the given value is a valid error response object according to the\n * W3C WebDriver spec.\n *\n * @param {?} data The value to test.\n * @return {boolean} Whether the given value data object is a valid error\n *     response.\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol\n */\n\n\nfunction isErrorResponse(data) {\n  return data && typeof data === 'object' && typeof data.error === 'string';\n}\n/**\n * Throws an error coded from the W3C protocol. A generic error will be thrown\n * if the provided `data` is not a valid encoded error.\n *\n * @param {{error: string, message: string}} data The error data to decode.\n * @throws {WebDriverError} the decoded error.\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol\n */\n\n\nfunction throwDecodedError(data) {\n  if (isErrorResponse(data)) {\n    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;\n    let err = new ctor(data.message);\n\n    if (typeof data.stacktrace === 'string') {\n      err.remoteStacktrace = data.stacktrace;\n    }\n\n    throw err;\n  }\n\n  throw new WebDriverError('Unknown error: ' + JSON.stringify(data));\n}\n/**\n * Checks a legacy response from the Selenium 2.0 wire protocol for an error.\n * @param {*} responseObj the response object to check.\n * @return {*} responseObj the original response if it does not define an error.\n * @throws {WebDriverError} if the response object defines an error.\n */\n\n\nfunction checkLegacyResponse(responseObj) {\n  // Handle the legacy Selenium error response format.\n  if (responseObj && typeof responseObj === 'object' && typeof responseObj['status'] === 'number' && responseObj['status'] !== 0) {\n    let status = responseObj['status'];\n    let ctor = LEGACY_ERROR_CODE_TO_TYPE.get(status) || WebDriverError;\n    let value = responseObj['value'];\n\n    if (!value || typeof value !== 'object') {\n      throw new ctor(value + '');\n    } else {\n      let message = value['message'] + '';\n\n      if (ctor !== UnexpectedAlertOpenError) {\n        throw new ctor(message);\n      }\n\n      let text = '';\n\n      if (value['alert'] && typeof value['alert']['text'] === 'string') {\n        text = value['alert']['text'];\n      }\n\n      throw new UnexpectedAlertOpenError(message, text);\n    }\n  }\n\n  return responseObj;\n} // PUBLIC API\n\n\nmodule.exports = {\n  ErrorCode: ErrorCode,\n  WebDriverError: WebDriverError,\n  ElementNotInteractableError: ElementNotInteractableError,\n  ElementNotSelectableError: ElementNotSelectableError,\n  ElementNotVisibleError: ElementNotVisibleError,\n  InvalidArgumentError: InvalidArgumentError,\n  InvalidCookieDomainError: InvalidCookieDomainError,\n  InvalidElementCoordinatesError: InvalidElementCoordinatesError,\n  InvalidElementStateError: InvalidElementStateError,\n  InvalidSelectorError: InvalidSelectorError,\n  JavascriptError: JavascriptError,\n  MoveTargetOutOfBoundsError: MoveTargetOutOfBoundsError,\n  NoSuchAlertError: NoSuchAlertError,\n  NoSuchElementError: NoSuchElementError,\n  NoSuchFrameError: NoSuchFrameError,\n  NoSuchSessionError: NoSuchSessionError,\n  NoSuchWindowError: NoSuchWindowError,\n  ScriptTimeoutError: ScriptTimeoutError,\n  SessionNotCreatedError: SessionNotCreatedError,\n  StaleElementReferenceError: StaleElementReferenceError,\n  TimeoutError: TimeoutError,\n  UnableToSetCookieError: UnableToSetCookieError,\n  UnableToCaptureScreenError: UnableToCaptureScreenError,\n  UnexpectedAlertOpenError: UnexpectedAlertOpenError,\n  UnknownCommandError: UnknownCommandError,\n  UnknownMethodError: UnknownMethodError,\n  UnsupportedOperationError: UnsupportedOperationError,\n  checkResponse: checkResponse,\n  checkLegacyResponse: checkLegacyResponse,\n  encodeError: encodeError,\n  isErrorResponse: isErrorResponse,\n  throwDecodedError: throwDecodedError\n};","map":null,"metadata":{},"sourceType":"script"}