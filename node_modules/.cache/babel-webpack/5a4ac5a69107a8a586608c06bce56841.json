{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n */\n'use strict';\n\nconst http = require('./http');\n\nconst io = require('./io');\n\nconst {\n  Capabilities,\n  Capability\n} = require('./lib/capabilities');\n\nconst command = require('./lib/command');\n\nconst error = require('./lib/error');\n\nconst logging = require('./lib/logging');\n\nconst promise = require('./lib/promise');\n\nconst Symbols = require('./lib/symbols');\n\nconst webdriver = require('./lib/webdriver');\n\nconst portprober = require('./net/portprober');\n\nconst remote = require('./remote');\n/**\n * @return {string} .\n * @throws {Error}\n */\n\n\nfunction findSafariDriver() {\n  let exe = io.findInPath('safaridriver', true);\n\n  if (!exe) {\n    throw Error(`The safaridriver executable could not be found on the current PATH.\n      Please ensure you are using Safari 10.0 or above.`);\n  }\n\n  return exe;\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\n\n\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findSafariDriver());\n    this.setLoopback(true); // Required.\n  }\n\n}\n\nconst OPTIONS_CAPABILITY_KEY = 'safari.options';\nconst TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview';\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\n\nclass Options {\n  constructor() {\n    /** @private {Object<string, *>} */\n    this.options_ = null;\n    /** @private {./lib/logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?./lib/capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Extracts the SafariDriver specific options from the given capabilities\n   * object.\n   * @param {!Capabilities} capabilities The capabilities object.\n   * @return {!Options} The SafariDriver options.\n   */\n\n\n  static fromCapabilities(capabilities) {\n    var options = new Options();\n    var o = capabilities.get(OPTIONS_CAPABILITY_KEY);\n\n    if (o instanceof Options) {\n      options = o;\n    } else if (o) {\n      options.setCleanSession(o.cleanSession);\n      options.setTechnologyPreview(o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n    }\n\n    if (capabilities.has(Capability.PROXY)) {\n      options.setProxy(capabilities.get(Capability.PROXY));\n    }\n\n    if (capabilities.has(Capability.LOGGING_PREFS)) {\n      options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));\n    }\n\n    return options;\n  }\n  /**\n   * Sets whether to force Safari to start with a clean session. Enabling this\n   * option will cause all global browser data to be deleted.\n   * @param {boolean} clean Whether to make sure the session has no cookies,\n   *     cache entries, local storage, or databases.\n   * @return {!Options} A self reference.\n   */\n\n\n  setCleanSession(clean) {\n    if (!this.options_) {\n      this.options_ = {};\n    }\n\n    this.options_['cleanSession'] = clean;\n    return this;\n  }\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {!./lib/logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n\n\n  setLoggingPrefs(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n\n\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n  /**\n   * Instruct the SafariDriver to use the Safari Technology Preview if true.\n   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n   *\n   * @param {boolean} useTechnologyPreview\n   * @return {!Options} A self reference.\n   */\n\n\n  setTechnologyPreview(useTechnologyPreview) {\n    if (!this.options_) {\n      this.options_ = {};\n    }\n\n    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview;\n    return this;\n  }\n  /**\n   * Converts this options instance to a {@link Capabilities} object.\n   * @param {Capabilities=} opt_capabilities The capabilities to\n   *     merge these options into, if any.\n   * @return {!Capabilities} The capabilities.\n   */\n\n\n  toCapabilities(opt_capabilities) {\n    var caps = opt_capabilities || Capabilities.safari();\n\n    if (this.logPrefs_) {\n      caps.set(Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n\n    if (this.proxy_) {\n      caps.set(Capability.PROXY, this.proxy_);\n    }\n\n    if (this.options_) {\n      caps.set(OPTIONS_CAPABILITY_KEY, this);\n    }\n\n    return caps;\n  }\n  /**\n   * Converts this instance to its JSON wire protocol representation. Note this\n   * function is an implementation detail not intended for general use.\n   * @return {!Object<string, *>} The JSON wire protocol representation of this\n   *     instance.\n   */\n\n\n  [Symbols.serialize]() {\n    return this.options_ || {};\n  }\n\n}\n/**\n * @param  {(Options|Object<string, *>)=} o The options object\n * @return {boolean}\n */\n\n\nfunction useTechnologyPreview(o) {\n  if (o instanceof Options) {\n    return !!(o.options_ && o.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n  }\n\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY];\n  }\n\n  return false;\n}\n\nconst SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver';\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\n\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Safari session.\n   *\n   * @param {(Options|Capabilities)=} opt_config The configuration\n   *     options for the new session.\n   * @param {promise.ControlFlow=} opt_flow The control flow to create\n   *     the driver under.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_flow) {\n    let caps, exe;\n\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = opt_config || Capabilities.safari();\n    }\n\n    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE;\n    }\n\n    let service = new ServiceBuilder(exe).build();\n    let executor = new http.Executor(service.start().then(url => new http.HttpClient(url)));\n    return super.createSession(executor, caps, opt_flow, () => service.kill());\n  }\n\n} // Public API\n\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;","map":null,"metadata":{},"sourceType":"script"}