{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines common conditions for use with\n * {@link webdriver.WebDriver#wait WebDriver wait}.\n *\n * Sample usage:\n *\n *     driver.get('http://www.google.com/ncr');\n *\n *     var query = driver.wait(until.elementLocated(By.name('q')));\n *     query.sendKeys('webdriver\\n');\n *\n *     driver.wait(until.titleIs('webdriver - Google Search'));\n *\n * To define a custom condition, simply call WebDriver.wait with a function\n * that will eventually return a truthy-value (neither null, undefined, false,\n * 0, or the empty string):\n *\n *     driver.wait(function() {\n *       return driver.getTitle().then(function(title) {\n *         return title === 'webdriver - Google Search';\n *       });\n *     }, 1000);\n */\n'use strict';\n\nconst by = require('./by');\n\nconst By = require('./by').By;\n\nconst error = require('./error');\n\nconst webdriver = require('./webdriver'),\n      Condition = webdriver.Condition,\n      WebElementCondition = webdriver.WebElementCondition;\n/**\n * Creates a condition that will wait until the input driver is able to switch\n * to the designated frame. The target frame may be specified as\n *\n * 1. a numeric index into\n *     [window.frames](https://developer.mozilla.org/en-US/docs/Web/API/Window.frames)\n *     for the currently selected frame.\n * 2. a {@link ./webdriver.WebElement}, which must reference a FRAME or IFRAME\n *     element on the current page.\n * 3. a locator which may be used to first locate a FRAME or IFRAME on the\n *     current page before attempting to switch to it.\n *\n * Upon successful resolution of this condition, the driver will be left\n * focused on the new frame.\n *\n * @param {!(number|./webdriver.WebElement|By|\n *           function(!./webdriver.WebDriver): !./webdriver.WebElement)} frame\n *     The frame identifier.\n * @return {!Condition<boolean>} A new condition.\n */\n\n\nexports.ableToSwitchToFrame = function ableToSwitchToFrame(frame) {\n  var condition;\n\n  if (typeof frame === 'number' || frame instanceof webdriver.WebElement) {\n    condition = driver => attemptToSwitchFrames(driver, frame);\n  } else {\n    condition = function (driver) {\n      let locator = frame;\n      return driver.findElements(locator).then(function (els) {\n        if (els.length) {\n          return attemptToSwitchFrames(driver, els[0]);\n        }\n      });\n    };\n  }\n\n  return new Condition('to be able to switch to frame', condition);\n\n  function attemptToSwitchFrames(driver, frame) {\n    return driver.switchTo().frame(frame).then(function () {\n      return true;\n    }, function (e) {\n      if (!(e instanceof error.NoSuchFrameError)) {\n        throw e;\n      }\n    });\n  }\n};\n/**\n * Creates a condition that waits for an alert to be opened. Upon success, the\n * returned promise will be fulfilled with the handle for the opened alert.\n *\n * @return {!Condition<!./webdriver.Alert>} The new condition.\n */\n\n\nexports.alertIsPresent = function alertIsPresent() {\n  return new Condition('for alert to be present', function (driver) {\n    return driver.switchTo().alert().catch(function (e) {\n      if (!(e instanceof error.NoSuchAlertError // XXX: Workaround for GeckoDriver error `TypeError: can't convert null\n      // to object`. For more details, see\n      // https://github.com/SeleniumHQ/selenium/pull/2137\n      || e instanceof error.WebDriverError && e.message === `can't convert null to object`)) {\n        throw e;\n      }\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's title to match the\n * given value.\n *\n * @param {string} title The expected page title.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.titleIs = function titleIs(title) {\n  return new Condition('for title to be ' + JSON.stringify(title), function (driver) {\n    return driver.getTitle().then(function (t) {\n      return t === title;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's title to contain\n * the given substring.\n *\n * @param {string} substr The substring that should be present in the page\n *     title.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.titleContains = function titleContains(substr) {\n  return new Condition('for title to contain ' + JSON.stringify(substr), function (driver) {\n    return driver.getTitle().then(function (title) {\n      return title.indexOf(substr) !== -1;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's title to match the\n * given regular expression.\n *\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.titleMatches = function titleMatches(regex) {\n  return new Condition('for title to match ' + regex, function (driver) {\n    return driver.getTitle().then(function (title) {\n      return regex.test(title);\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's url to match the\n * given value.\n *\n * @param {string} url The expected page url.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.urlIs = function urlIs(url) {\n  return new Condition('for URL to be ' + JSON.stringify(url), function (driver) {\n    return driver.getCurrentUrl().then(function (u) {\n      return u === url;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's url to contain\n * the given substring.\n *\n * @param {string} substrUrl The substring that should be present in the current\n *     URL.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.urlContains = function urlContains(substrUrl) {\n  return new Condition('for URL to contain ' + JSON.stringify(substrUrl), function (driver) {\n    return driver.getCurrentUrl().then(function (url) {\n      return url.indexOf(substrUrl) !== -1;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the current page's url to match the\n * given regular expression.\n *\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.urlMatches = function urlMatches(regex) {\n  return new Condition('for URL to match ' + regex, function (driver) {\n    return driver.getCurrentUrl().then(function (url) {\n      return regex.test(url);\n    });\n  });\n};\n/**\n * Creates a condition that will loop until an element is\n * {@link ./webdriver.WebDriver#findElement found} with the given locator.\n *\n * @param {!(By|Function)} locator The locator to use.\n * @return {!WebElementCondition} The new condition.\n */\n\n\nexports.elementLocated = function elementLocated(locator) {\n  locator = by.checkedLocator(locator);\n  let locatorStr = typeof locator === 'function' ? 'by function()' : locator + '';\n  return new WebElementCondition('for element to be located ' + locatorStr, function (driver) {\n    return driver.findElements(locator).then(function (elements) {\n      return elements[0];\n    });\n  });\n};\n/**\n * Creates a condition that will loop until at least one element is\n * {@link ./webdriver.WebDriver#findElement found} with the given locator.\n *\n * @param {!(By|Function)} locator The locator to use.\n * @return {!Condition<!Array<!./webdriver.WebElement>>} The new\n *     condition.\n */\n\n\nexports.elementsLocated = function elementsLocated(locator) {\n  locator = by.checkedLocator(locator);\n  let locatorStr = typeof locator === 'function' ? 'by function()' : locator + '';\n  return new Condition('for at least one element to be located ' + locatorStr, function (driver) {\n    return driver.findElements(locator).then(function (elements) {\n      return elements.length > 0 ? elements : null;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the given element to become stale. An\n * element is considered stale once it is removed from the DOM, or a new page\n * has loaded.\n *\n * @param {!./webdriver.WebElement} element The element that should become stale.\n * @return {!Condition<boolean>} The new condition.\n */\n\n\nexports.stalenessOf = function stalenessOf(element) {\n  return new Condition('element to become stale', function () {\n    return element.getTagName().then(function () {\n      return false;\n    }, function (e) {\n      if (e instanceof error.StaleElementReferenceError) {\n        return true;\n      }\n\n      throw e;\n    });\n  });\n};\n/**\n * Creates a condition that will wait for the given element to become visible.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see ./webdriver.WebDriver#isDisplayed\n */\n\n\nexports.elementIsVisible = function elementIsVisible(element) {\n  return new WebElementCondition('until element is visible', function () {\n    return element.isDisplayed().then(v => v ? element : null);\n  });\n};\n/**\n * Creates a condition that will wait for the given element to be in the DOM,\n * yet not visible to the user.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see ./webdriver.WebDriver#isDisplayed\n */\n\n\nexports.elementIsNotVisible = function elementIsNotVisible(element) {\n  return new WebElementCondition('until element is not visible', function () {\n    return element.isDisplayed().then(v => v ? null : element);\n  });\n};\n/**\n * Creates a condition that will wait for the given element to be enabled.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isEnabled\n */\n\n\nexports.elementIsEnabled = function elementIsEnabled(element) {\n  return new WebElementCondition('until element is enabled', function () {\n    return element.isEnabled().then(v => v ? element : null);\n  });\n};\n/**\n * Creates a condition that will wait for the given element to be disabled.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isEnabled\n */\n\n\nexports.elementIsDisabled = function elementIsDisabled(element) {\n  return new WebElementCondition('until element is disabled', function () {\n    return element.isEnabled().then(v => v ? null : element);\n  });\n};\n/**\n * Creates a condition that will wait for the given element to be selected.\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isSelected\n */\n\n\nexports.elementIsSelected = function elementIsSelected(element) {\n  return new WebElementCondition('until element is selected', function () {\n    return element.isSelected().then(v => v ? element : null);\n  });\n};\n/**\n * Creates a condition that will wait for the given element to be deselected.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isSelected\n */\n\n\nexports.elementIsNotSelected = function elementIsNotSelected(element) {\n  return new WebElementCondition('until element is not selected', function () {\n    return element.isSelected().then(v => v ? null : element);\n  });\n};\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to match the given\n * {@code text} exactly.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {string} text The expected text.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\n\n\nexports.elementTextIs = function elementTextIs(element, text) {\n  return new WebElementCondition('until element text is', function () {\n    return element.getText().then(t => t === text ? element : null);\n  });\n};\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to contain the given\n * substring.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {string} substr The substring to search for.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\n\n\nexports.elementTextContains = function elementTextContains(element, substr) {\n  return new WebElementCondition('until element text contains', function () {\n    return element.getText().then(t => t.indexOf(substr) != -1 ? element : null);\n  });\n};\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to match a regular\n * expression.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\n\n\nexports.elementTextMatches = function elementTextMatches(element, regex) {\n  return new WebElementCondition('until element text matches', function () {\n    return element.getText().then(t => regex.test(t) ? element : null);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}