{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The {@linkplain Profile} class may be used to configure the browser profile\n * used with WebDriver, with functions to install additional\n * {@linkplain Profile#addExtension extensions}, configure browser\n * {@linkplain Profile#setPreference preferences}, and more. For example, you\n * may wish to include Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let profile = new firefox.Profile();\n *     profile.addExtension('/path/to/firebug.xpi');\n *     profile.setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let options = new firefox.Options().setProfile(profile);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Profile} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = new firefox.Profile(\n *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * Several methods are provided for starting Firefox with a custom executable.\n * First, on Windows and MacOS, you may configure WebDriver to check the default\n * install location for a non-release channel. If the requested channel cannot\n * be found in its default location, WebDriver will fallback to searching your\n * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless\n * of the requested channel.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * On all platforms, you may configrue WebDriver to use a Firefox specific\n * executable:\n *\n *     let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox-bin');\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transfered to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox-bin');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n */\n'use strict';\n\nconst url = require('url');\n\nconst {\n  Binary,\n  Channel\n} = require('./binary'),\n      Profile = require('./profile').Profile,\n      http = require('../http'),\n      httpUtil = require('../http/util'),\n      io = require('../io'),\n      capabilities = require('../lib/capabilities'),\n      command = require('../lib/command'),\n      logging = require('../lib/logging'),\n      promise = require('../lib/promise'),\n      webdriver = require('../lib/webdriver'),\n      net = require('../net'),\n      portprober = require('../net/portprober'),\n      remote = require('../remote');\n/**\n * Configuration options for the FirefoxDriver.\n */\n\n\nclass Options {\n  constructor() {\n    /** @private {Profile} */\n    this.profile_ = null;\n    /** @private {(Binary|Channel|string|null)} */\n\n    this.binary_ = null;\n    /** @private {!Array<string>} */\n\n    this.args_ = [];\n    /** @private {logging.Preferences} */\n\n    this.logPrefs_ = null;\n    /** @private {?capabilities.ProxyConfig} */\n\n    this.proxy_ = null;\n  }\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n\n\n  addArguments(...args) {\n    this.args_ = this.args_.concat(...args);\n    return this;\n  }\n  /**\n   * Configures the geckodriver to start Firefox in headless mode.\n   *\n   * @return {!Options} A self reference.\n   */\n\n\n  headless() {\n    return this.addArguments('-headless');\n  }\n  /**\n   * Sets the initial window size when running in\n   * {@linkplain #headless headless} mode.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n\n\n  windowSize({\n    width,\n    height\n  }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`--window-size=${width},${height}`);\n  }\n  /**\n   * Sets the profile to use. The profile may be specified as a\n   * {@link Profile} object or as the path to an existing Firefox profile to use\n   * as a template.\n   *\n   * @param {(string|!Profile)} profile The profile to use.\n   * @return {!Options} A self reference.\n   */\n\n\n  setProfile(profile) {\n    if (typeof profile === 'string') {\n      profile = new Profile(profile);\n    }\n\n    this.profile_ = profile;\n    return this;\n  }\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}\n   * object.\n   *\n   * @param {(string|!Binary|!Channel)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n\n\n  setBinary(binary) {\n    if (binary instanceof Binary || binary instanceof Channel || typeof binary === 'string') {\n      this.binary_ = binary;\n      return this;\n    }\n\n    throw TypeError('binary must be a string path, Channel, or Binary object');\n  }\n  /**\n   * Sets the logging preferences for the new session.\n   * @param {logging.Preferences} prefs The logging preferences.\n   * @return {!Options} A self reference.\n   */\n\n\n  setLoggingPreferences(prefs) {\n    this.logPrefs_ = prefs;\n    return this;\n  }\n  /**\n   * Sets the proxy to use.\n   *\n   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.\n   * @return {!Options} A self reference.\n   */\n\n\n  setProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n  /**\n   * Converts these options to a {@link capabilities.Capabilities} instance.\n   *\n   * @return {!capabilities.Capabilities} A new capabilities object.\n   */\n\n\n  toCapabilities() {\n    let caps = capabilities.Capabilities.firefox();\n    let firefoxOptions = {};\n    caps.set('moz:firefoxOptions', firefoxOptions);\n\n    if (this.logPrefs_) {\n      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);\n    }\n\n    if (this.proxy_) {\n      caps.set(capabilities.Capability.PROXY, this.proxy_);\n    }\n\n    if (this.args_.length) {\n      firefoxOptions['args'] = this.args_.concat();\n    }\n\n    if (this.binary_) {\n      if (this.binary_ instanceof Binary) {\n        let exe = this.binary_.getExe();\n\n        if (exe) {\n          firefoxOptions['binary'] = exe;\n        }\n\n        let args = this.binary_.getArguments();\n\n        if (args.length) {\n          if (this.args_.length) {\n            throw Error('You may specify browser arguments with Options.addArguments' + ' (preferred) or Binary.addArguments, but not both');\n          }\n\n          firefoxOptions['args'] = args;\n        }\n      } else if (this.binary_ instanceof Channel) {\n        firefoxOptions['binary'] = this.binary_.locate();\n      } else if (typeof this.binary_ === 'string') {\n        firefoxOptions['binary'] = this.binary_;\n      }\n    }\n\n    if (this.profile_) {\n      // If the user specified a template directory or any extensions to\n      // install, we need to encode the profile as a base64 string (which\n      // requires writing it to disk first). Otherwise, if the user just\n      // specified some custom preferences, we can send those directly.\n      let profile = this.profile_;\n\n      if (profile.getTemplateDir() || profile.getExtensions().length) {\n        firefoxOptions['profile'] = profile.encode();\n      } else {\n        let prefs = profile.getPreferences();\n\n        if (Object.keys(prefs).length) {\n          firefoxOptions['prefs'] = prefs;\n        }\n      }\n    }\n\n    return caps;\n  }\n\n}\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\n\n\nconst Context = {\n  CONTENT: \"content\",\n  CHROME: \"chrome\"\n};\nconst GECKO_DRIVER_EXE = process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';\n/**\n * @return {string} .\n * @throws {Error}\n */\n\nfunction findGeckoDriver() {\n  let exe = io.findInPath(GECKO_DRIVER_EXE, true);\n\n  if (!exe) {\n    throw Error('The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' + 'PATH. Please download the latest version from ' + 'https://github.com/mozilla/geckodriver/releases/ ' + 'and ensure it can be found on your PATH.');\n  }\n\n  return exe;\n}\n\nfunction normalizeProxyConfiguration(config) {\n  if ('manual' === config.proxyType) {\n    if (config.ftpProxy && !config.ftpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.ftpProxy);\n      config.ftpProxy = hostAndPort.host;\n      config.ftpProxyPort = hostAndPort.port;\n    }\n\n    if (config.httpProxy && !config.httpProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.httpProxy);\n      config.httpProxy = hostAndPort.host;\n      config.httpProxyPort = hostAndPort.port;\n    }\n\n    if (config.sslProxy && !config.sslProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.sslProxy);\n      config.sslProxy = hostAndPort.host;\n      config.sslProxyPort = hostAndPort.port;\n    }\n\n    if (config.socksProxy && !config.socksProxyPort) {\n      let hostAndPort = net.splitHostAndPort(config.socksProxy);\n      config.socksProxy = hostAndPort.host;\n      config.socksProxyPort = hostAndPort.port;\n    }\n  } else if ('pac' === config.proxyType) {\n    if (config.proxyAutoconfigUrl && !config.pacUrl) {\n      config.pacUrl = config.proxyAutoconfigUrl;\n    }\n  }\n\n  return config;\n}\n/** @enum {string} */\n\n\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext'\n};\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\n\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then(url => new http.HttpClient(url));\n  let executor = new http.Executor(client);\n  configureExecutor(executor);\n  return executor;\n}\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\n\n\nfunction configureExecutor(executor) {\n  executor.defineCommand(ExtensionCommand.GET_CONTEXT, 'GET', '/session/:sessionId/moz/context');\n  executor.defineCommand(ExtensionCommand.SET_CONTEXT, 'POST', '/session/:sessionId/moz/context');\n}\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\n\n\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe || findGeckoDriver());\n    this.setLoopback(true); // Required.\n  }\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n\n\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v');\n  }\n\n}\n/**\n * A WebDriver client for Firefox.\n */\n\n\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash\n   *    object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @param {promise.ControlFlow=} opt_flow The flow to\n   *     schedule commands through. Defaults to the active flow object.\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor, opt_flow) {\n    let caps;\n\n    if (opt_config instanceof Options) {\n      caps = opt_config.toCapabilities();\n    } else {\n      caps = new capabilities.Capabilities(opt_config);\n    }\n\n    if (caps.has(capabilities.Capability.PROXY)) {\n      let proxy = normalizeProxyConfiguration(caps.get(capabilities.Capability.PROXY));\n      caps.set(capabilities.Capability.PROXY, proxy);\n    }\n\n    let executor;\n    let onQuit;\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor;\n      configureExecutor(executor);\n    } else if (opt_executor instanceof remote.DriverService) {\n      executor = createExecutor(opt_executor.start());\n\n      onQuit = () => opt_executor.kill();\n    } else {\n      let service = new ServiceBuilder().build();\n      executor = createExecutor(service.start());\n\n      onQuit = () => service.kill();\n    }\n\n    return super.createSession(executor, caps, opt_flow, onQuit);\n  }\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n\n\n  setFileDetector() {}\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!promise.Thenable<Context>} Current context.\n   */\n\n\n  getContext() {\n    return this.schedule(new command.Command(ExtensionCommand.GET_CONTEXT), 'get WebDriver.context');\n  }\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!promise.Thenable<void>} ctx The context to switch to.\n   */\n\n\n  setContext(ctx) {\n    return this.schedule(new command.Command(ExtensionCommand.SET_CONTEXT).setParameter(\"context\", ctx), 'set WebDriver.context');\n  }\n\n} // PUBLIC API\n\n\nexports.Binary = Binary;\nexports.Channel = Channel;\nexports.Context = Context;\nexports.Driver = Driver;\nexports.Options = Options;\nexports.Profile = Profile;\nexports.ServiceBuilder = ServiceBuilder;","map":null,"metadata":{},"sourceType":"script"}