{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\n\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n    /** @private {string} */\n\n\n    this.name_ = name;\n    /** @private {number} */\n\n    this.value_ = level;\n  }\n  /** This logger's name. */\n\n\n  get name() {\n    return this.name_;\n  }\n  /** The numeric log level. */\n\n\n  get value() {\n    return this.value_;\n  }\n  /** @override */\n\n\n  toString() {\n    return this.name;\n  }\n\n}\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\n\n\nLevel.OFF = new Level('OFF', Infinity);\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\n\nLevel.SEVERE = new Level('SEVERE', 1000);\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\n\nLevel.WARNING = new Level('WARNING', 900);\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\n\nLevel.INFO = new Level('INFO', 800);\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\n\nLevel.DEBUG = new Level('DEBUG', 700);\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\n\nLevel.FINE = new Level('FINE', 500);\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\n\nLevel.FINER = new Level('FINER', 400);\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\n\nLevel.FINEST = new Level('FINEST', 300);\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\n\nLevel.ALL = new Level('ALL', 0);\nconst ALL_LEVELS =\n/** !Set<Level> */\nnew Set([Level.OFF, Level.SEVERE, Level.WARNING, Level.INFO, Level.DEBUG, Level.FINE, Level.FINER, Level.FINEST, Level.ALL]);\nconst LEVELS_BY_NAME =\n/** !Map<string, !Level> */\nnew Map([[Level.OFF.name, Level.OFF], [Level.SEVERE.name, Level.SEVERE], [Level.WARNING.name, Level.WARNING], [Level.INFO.name, Level.INFO], [Level.DEBUG.name, Level.DEBUG], [Level.FINE.name, Level.FINE], [Level.FINER.name, Level.FINER], [Level.FINEST.name, Level.FINEST], [Level.ALL.name, Level.ALL]]);\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\n\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level;\n    }\n  }\n\n  return Level.ALL;\n}\n/**\n * Describes a single log entry.\n *\n * @final\n */\n\n\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n\n\n  toJSON() {\n    return {\n      'level': this.level.name,\n      'message': this.message,\n      'timestamp': this.timestamp,\n      'type': this.type\n    };\n  }\n\n}\n/** @typedef {(string|function(): string)} */\n\n\nlet Loggable;\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\n\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name;\n    /** @private {Level} */\n\n    this.level_ = opt_level || null;\n    /** @private {Logger} */\n\n    this.parent_ = null;\n    /** @private {Set<function(!Entry)>} */\n\n    this.handlers_ = null;\n  }\n  /** @return {string} the name of this logger. */\n\n\n  getName() {\n    return this.name_;\n  }\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n\n\n  setLevel(level) {\n    this.level_ = level;\n  }\n  /** @return {Level} the log level for this logger. */\n\n\n  getLevel() {\n    return this.level_;\n  }\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n\n\n  getEffectiveLevel() {\n    let logger = this;\n    let level;\n\n    do {\n      level = logger.level_;\n      logger = logger.parent_;\n    } while (logger && !level);\n\n    return level || Level.OFF;\n  }\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n\n\n  isLoggable(level) {\n    return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value;\n  }\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n\n\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set();\n    }\n\n    this.handlers_.add(handler);\n  }\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n\n\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false;\n    }\n\n    return this.handlers_.delete(handler);\n  }\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return;\n    }\n\n    let message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable);\n    let entry = new Entry(level, message, Date.now());\n\n    for (let logger = this; !!logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry);\n        }\n      }\n    }\n  }\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  warning(loggable) {\n    this.log(Level.WARNING, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  info(loggable) {\n    this.log(Level.INFO, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  fine(loggable) {\n    this.log(Level.FINE, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  finer(loggable) {\n    this.log(Level.FINER, loggable);\n  }\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n\n\n  finest(loggable) {\n    this.log(Level.FINEST, loggable);\n  }\n\n}\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\n\n\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map();\n    this.root_ = new Logger('', Level.OFF);\n  }\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n\n\n  getLogger(name) {\n    if (!name) {\n      return this.root_;\n    }\n\n    let parent = this.root_;\n\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i);\n      parent = this.createLogger_(parentName, parent);\n    }\n\n    return this.createLogger_(name, parent);\n  }\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n\n\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return this.loggers_.get(name);\n    }\n\n    let logger = new Logger(name, null);\n    logger.parent_ = parent;\n    this.loggers_.set(name, logger);\n    return logger;\n  }\n\n}\n\nconst logManager = new LogManager();\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\n\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n/**\n * Pads a number to ensure it has a minimum of two digits.\n * \n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\n\n\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\n\n\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n\n  var timestamp = new Date(entry.timestamp);\n  var msg = '[' + timestamp.getUTCFullYear() + '-' + pad(timestamp.getUTCMonth() + 1) + '-' + pad(timestamp.getUTCDate()) + 'T' + pad(timestamp.getUTCHours()) + ':' + pad(timestamp.getUTCMinutes()) + ':' + pad(timestamp.getUTCSeconds()) + 'Z] ' + '[' + entry.level.name + '] ' + entry.message;\n  var level = entry.level.value;\n\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\n\n\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\n\n\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n/**\n * Installs the console log handler on the root logger.\n */\n\n\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n/**\n * Common log types.\n * @enum {string}\n */\n\n\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\n\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map();\n  }\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n\n\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type);\n    }\n\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n  }\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n\n\n  toJSON() {\n    let json = {};\n\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name;\n    }\n\n    return json;\n  }\n\n} // PUBLIC API\n\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};","map":null,"metadata":{},"sourceType":"script"}