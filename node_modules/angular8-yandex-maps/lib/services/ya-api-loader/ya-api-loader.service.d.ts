import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const YA_CONFIG: InjectionToken<YaConfig>;
export interface YaConfig {
    /**
     * API key. You can get a key in the developer's dashboard.
     */
    apikey?: string;
    /**
     * Locale.
     */
    lang?: 'ru_RU' | 'en_US' | 'en_RU' | 'ru_UA' | 'uk_UA' | 'tr_TR';
    /**
     * The order for setting geographical coordinates in API functions that accept longitude-latitude input.
     */
    coordorder?: 'latlong' | 'longlat';
    /**
     * List of modules to load.
     */
    load?: string;
    /**
     * API loading mode.
     */
    mode?: 'release' | 'debug';
    /**
     * Use commercial version of the API.
     */
    enterprise?: boolean;
    /**
     * Version number of the API.
     */
    version?: string;
}
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API.
 *
 * @example
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 *
 * @dynamic
 */
export declare class YaApiLoaderService {
    private readonly _document;
    private readonly _config;
    private readonly _defaultConfig;
    private _script;
    constructor(config: YaConfig | null, _document: Document);
    /**
     * Loads Yandex.Maps API
     */
    load(): Observable<typeof ymaps>;
    /**
     * Returns script source by config
     * @param config config with parameters that will be added in source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    private _getScriptSource;
    /**
     * Converts a config into a query string parameters
     * @param config object for converting
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    private _convertConfigIntoQueryParams;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YaApiLoaderService, [{ optional: true; }, null]>;
}

//# sourceMappingURL=ya-api-loader.service.d.ts.map