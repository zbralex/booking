{"version":3,"file":"ya-api-loader.service.d.ts","sources":["ya-api-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nexport declare const YA_CONFIG: InjectionToken<YaConfig>;\r\nexport interface YaConfig {\r\n    /**\r\n     * API key. You can get a key in the developer's dashboard.\r\n     */\r\n    apikey?: string;\r\n    /**\r\n     * Locale.\r\n     */\r\n    lang?: 'ru_RU' | 'en_US' | 'en_RU' | 'ru_UA' | 'uk_UA' | 'tr_TR';\r\n    /**\r\n     * The order for setting geographical coordinates in API functions that accept longitude-latitude input.\r\n     */\r\n    coordorder?: 'latlong' | 'longlat';\r\n    /**\r\n     * List of modules to load.\r\n     */\r\n    load?: string;\r\n    /**\r\n     * API loading mode.\r\n     */\r\n    mode?: 'release' | 'debug';\r\n    /**\r\n     * Use commercial version of the API.\r\n     */\r\n    enterprise?: boolean;\r\n    /**\r\n     * Version number of the API.\r\n     */\r\n    version?: string;\r\n}\r\n/**\r\n * The `YaApiLoader` service handles loading of Yandex.Maps API.\r\n *\r\n * @example\r\n * ```ts\r\n * import { YaApiLoaderService } from 'angular8-yandex-maps';\r\n *\r\n * export class AppComponent {\r\n *   constructor(private yaApiLoaderService: YaApiLoaderService) {\r\n *     this.yaApiLoaderService.load()\r\n *       .subscribe(v => console.log(v))\r\n *   }\r\n * }\r\n *```\r\n *\r\n * @dynamic\r\n */\r\nexport declare class YaApiLoaderService {\r\n    private readonly _document;\r\n    private readonly _config;\r\n    private readonly _defaultConfig;\r\n    private _script;\r\n    constructor(config: YaConfig | null, _document: Document);\r\n    /**\r\n     * Loads Yandex.Maps API\r\n     */\r\n    load(): Observable<typeof ymaps>;\r\n    /**\r\n     * Returns script source by config\r\n     * @param config config with parameters that will be added in source\r\n     * @example\r\n     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'\r\n     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })\r\n     */\r\n    private _getScriptSource;\r\n    /**\r\n     * Converts a config into a query string parameters\r\n     * @param config object for converting\r\n     * @example\r\n     * // returns \"lang=ru_RU&apikey=XXX\"\r\n     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })\r\n     */\r\n    private _convertConfigIntoQueryParams;\r\n}\r\n"]}