import { EventEmitter, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { YaMapComponent } from '../ya-map/ya-map.component';
import { YaReadyEvent } from '../../typings/ya-ready-event';
import * as ɵngcc0 from '@angular/core';
export declare type YaControlType = 'Button' | 'FullscreenControl' | 'GeolocationControl' | 'ListBox' | 'ListBoxItem' | 'RouteButton' | 'RouteEditor' | 'RoutePanel' | 'RulerControl' | 'SearchControl' | 'TrafficControl' | 'TypeSelector' | 'ZoomControl';
/**
 * The `ya-control` component wraps `ymaps.control[YaControlType]` classes from the Yandex Maps API.
 * You can configure `ymaps.control[YaControlType]` via the component's inputs.
 * API Events can be bound only manually. You can use `ready` event to get an instance.
 *
 * <example-url>https://stackblitz.com/edit/searchcontrol?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-control
 *     type="RoutePanel"
 *     [parameters]="{ options: { float: 'right' } }"
 *   ></ya-control>
 * </ya-map>
 * ```
 */
export declare class YaControlDirective implements OnInit, OnChanges, OnDestroy {
    private readonly _ngZone;
    private readonly _yaMapComponent;
    private readonly _sub;
    private _control?;
    /**
     * Control type.
     */
    type: YaControlType;
    /**
     * Parameters for the Control.
     */
    parameters: any;
    /**
     * Control instance is added in a Map.
     */
    ready: EventEmitter<YaReadyEvent<any>>;
    constructor(_ngZone: NgZone, _yaMapComponent: YaMapComponent);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YaControlDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<YaControlDirective, "ya-control", never, { "type": "type"; "parameters": "parameters"; }, { "ready": "ready"; }, never>;
}

//# sourceMappingURL=ya-control.directive.d.ts.map