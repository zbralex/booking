import { EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { YaMapComponent } from '../ya-map/ya-map.component';
import { YaReadyEvent } from '../../typings/ya-ready-event';
import { YaEvent } from '../../typings/ya-event';
/**
 * The `ya-panorama` component wraps `ymaps.panorama.Player` class from the Yandex Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/panorama?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map>
 *   <ya-panorama [point]="[59.938557, 30.316198]" layer="yandex#airPanorama"></ya-panorama>
 * </ya-map>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class YaPanoramaDirective implements OnInit, OnChanges, OnDestroy {
    private readonly _ngZone;
    private readonly _yaMapComponent;
    private readonly _sub;
    private readonly _eventManager;
    private _player?;
    /**
     * The point for searching for nearby panoramas.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.locate.html#panorama.locate__param-point}
     */
    point: number[];
    /**
     * The layer to search for panoramas.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.locate.html#panorama.locate__param-options.layer}
     */
    layer: ymaps.panorama.Layer;
    /**
     * Options for the player.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/panorama.Player.html#panorama.Player__param-options}
     */
    options: ymaps.panorama.IPlayerOptions;
    /**
     * Panorama instance is created.
     */
    ready: EventEmitter<YaReadyEvent<ymaps.panorama.Player>>;
    /**
     * The player was closed by the user or destroyed using the panorama.Player.destroy method.
     */
    destroy: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The view direction changed.
     */
    directionchange: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * An error occurred during operation of the player. The user will be shown the appropriate screen.
     */
    yaerror: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The panorama player switched to full-screen mode.
     */
    fullscreenenter: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The panorama player exited full-screen mode.
     */
    fullscreenexit: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The user clicked on an expanded marker.
     */
    markercollapse: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The user clicked on a collapsed marker.
     */
    markerexpand: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The user's cursor hovered over a marker.
     */
    markermouseenter: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The user's cursor left a marker.
     */
    markermouseleave: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The open panorama changed.
     */
    panoramachange: Observable<YaEvent<ymaps.panorama.Player>>;
    /**
     * The size of the viewport has been changed.
     */
    spanchange: Observable<YaEvent<ymaps.panorama.Player>>;
    constructor(_ngZone: NgZone, _yaMapComponent: YaMapComponent);
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Destructs state and passes it in API.
     * @param options
     * @param player
     */
    private _setOptions;
    /**
     * Searches for a panorama and returns first
     */
    private _createPanorama;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YaPanoramaDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<YaPanoramaDirective, "ya-panorama", never, { "point": "point"; "layer": "layer"; "options": "options"; }, { "ready": "ready"; "destroy": "destroy"; "directionchange": "directionchange"; "yaerror": "yaerror"; "fullscreenenter": "fullscreenenter"; "fullscreenexit": "fullscreenexit"; "markercollapse": "markercollapse"; "markerexpand": "markerexpand"; "markermouseenter": "markermouseenter"; "markermouseleave": "markermouseleave"; "panoramachange": "panoramachange"; "spanchange": "spanchange"; }, never>;
}

//# sourceMappingURL=ya-panorama.directive.d.ts.map