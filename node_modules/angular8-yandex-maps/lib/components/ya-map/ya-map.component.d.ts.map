{"version":3,"file":"ya-map.component.d.ts","sources":["ya-map.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { YaApiLoaderService } from '../../services/ya-api-loader/ya-api-loader.service';\r\nimport { YaReadyEvent } from '../../typings/ya-ready-event';\r\nimport { YaEvent } from '../../typings/ya-event';\r\n/**\r\n * The `ya-map` component wraps `ymaps.Map` class from the Yandex Maps API.\r\n * You can configure the map via the component's inputs.\r\n * Events can be bound using the outputs of the component.\r\n *\r\n * <example-url>https://stackblitz.com/edit/map-onload-event?embed=1</example-url>\r\n *\r\n * @example\r\n * ```html\r\n * <ya-map\r\n *   [center]=\"[55.751952, 37.600739]\"\r\n *   [state]=\"{type: 'yandex#satellite'}\"\r\n * ></ya-map>\r\n * ```\r\n */\r\nexport declare class YaMapComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n    private readonly _ngZone;\r\n    private readonly _yaApiLoaderService;\r\n    container: ElementRef;\r\n    private readonly _sub;\r\n    private readonly _eventManager;\r\n    map$: BehaviorSubject<ymaps.Map | undefined>;\r\n    isBrowser: boolean;\r\n    /**\r\n     * Map center geocoordinates. Default is [0, 0].\r\n     * Shorthand for [state]=\"{ center: [0, 0] }\".\r\n     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.center}\r\n     */\r\n    center: number[];\r\n    /**\r\n     * Map zoom level. Default level is 10.\r\n     * Shorthand for [state]=\"{ zoom: 10 }\".\r\n     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.zoom}\r\n     */\r\n    zoom: number;\r\n    /**\r\n     * States for the map.\r\n     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Mapparam-state}\r\n     */\r\n    state: ymaps.IMapState;\r\n    /**\r\n     * Options for the map.\r\n     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Mapparam-options}\r\n     */\r\n    options: ymaps.IMapOptions;\r\n    /**\r\n     * Map instance is created.\r\n     */\r\n    ready: EventEmitter<YaReadyEvent<ymaps.Map>>;\r\n    /**\r\n     * The start of a new smooth map movement.\r\n     */\r\n    actionbegin: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Event that occurs when an action step was prematurely stopped.\r\n     */\r\n    actionbreak: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * The end of smooth map movement.\r\n     */\r\n    actionend: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * The start of a new step of smooth movement.\r\n     */\r\n    actiontick: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * The end of performing a step of smooth movement.\r\n     */\r\n    actiontickcomplete: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Closing the balloon.\r\n     */\r\n    balloonclose: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Opening a balloon on a map.\r\n     */\r\n    balloonopen: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Event for a change to the map viewport.\r\n     */\r\n    boundschange: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Single left-click on the object.\r\n     */\r\n    yaclick: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Calls the element's context menu.\r\n     */\r\n    yacontextmenu: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Double left-click on the object.\r\n     */\r\n    yadblclick: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * The map was destroyed.\r\n     */\r\n    destroy: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Closing the hint.\r\n     */\r\n    hintclose: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Opening a hint on a map.\r\n     */\r\n    hintopen: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Map margins changed.\r\n     */\r\n    marginchange: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Pressing the mouse button over the object.\r\n     */\r\n    yamousedown: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Pointing the cursor at the object.\r\n     */\r\n    yamouseenter: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Moving the cursor off of the object.\r\n     */\r\n    yamouseleave: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Moving the cursor over the object.\r\n     */\r\n    yamousemove: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Letting go of the mouse button over an object.\r\n     */\r\n    yamouseup: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * End of multitouch.\r\n     */\r\n    multitouchend: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Repeating event during multitouch.\r\n     */\r\n    multitouchmove: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Start of multitouch.\r\n     */\r\n    multitouchstart: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Map options changed.\r\n     */\r\n    optionschange: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Map size changed.\r\n     */\r\n    sizechange: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * The map type changed.\r\n     */\r\n    typechange: Observable<YaEvent<ymaps.Map>>;\r\n    /**\r\n     * Mouse wheel scrolling.\r\n     */\r\n    yawheel: Observable<YaEvent<ymaps.Map>>;\r\n    constructor(_ngZone: NgZone, _yaApiLoaderService: YaApiLoaderService, platformId: Object);\r\n    /**\r\n     * Handles input changes and passes them in API.\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Destructs state and passes it in API.\r\n     * @param state\r\n     * @param map\r\n     */\r\n    private _setState;\r\n    /**\r\n     * Creates a map.\r\n     * @param id ID which will be set to the map container.\r\n     */\r\n    private _createMap;\r\n    /**\r\n     * Combines the center and zoom into single object.\r\n     */\r\n    private _combineState;\r\n}\r\n"]}