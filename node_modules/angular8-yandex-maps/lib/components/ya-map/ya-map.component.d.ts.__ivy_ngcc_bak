import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { YaApiLoaderService } from '../../services/ya-api-loader/ya-api-loader.service';
import { YaReadyEvent } from '../../typings/ya-ready-event';
import { YaEvent } from '../../typings/ya-event';
/**
 * The `ya-map` component wraps `ymaps.Map` class from the Yandex Maps API.
 * You can configure the map via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/map-onload-event?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map
 *   [center]="[55.751952, 37.600739]"
 *   [state]="{type: 'yandex#satellite'}"
 * ></ya-map>
 * ```
 */
export declare class YaMapComponent implements AfterViewInit, OnChanges, OnDestroy {
    private readonly _ngZone;
    private readonly _yaApiLoaderService;
    container: ElementRef;
    private readonly _sub;
    private readonly _eventManager;
    map$: BehaviorSubject<ymaps.Map | undefined>;
    isBrowser: boolean;
    /**
     * Map center geocoordinates. Default is [0, 0].
     * Shorthand for [state]="{ center: [0, 0] }".
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.center}
     */
    center: number[];
    /**
     * Map zoom level. Default level is 10.
     * Shorthand for [state]="{ zoom: 10 }".
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Map__param-state.zoom}
     */
    zoom: number;
    /**
     * States for the map.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Mapparam-state}
     */
    state: ymaps.IMapState;
    /**
     * Options for the map.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Map.html#Mapparam-options}
     */
    options: ymaps.IMapOptions;
    /**
     * Map instance is created.
     */
    ready: EventEmitter<YaReadyEvent<ymaps.Map>>;
    /**
     * The start of a new smooth map movement.
     */
    actionbegin: Observable<YaEvent<ymaps.Map>>;
    /**
     * Event that occurs when an action step was prematurely stopped.
     */
    actionbreak: Observable<YaEvent<ymaps.Map>>;
    /**
     * The end of smooth map movement.
     */
    actionend: Observable<YaEvent<ymaps.Map>>;
    /**
     * The start of a new step of smooth movement.
     */
    actiontick: Observable<YaEvent<ymaps.Map>>;
    /**
     * The end of performing a step of smooth movement.
     */
    actiontickcomplete: Observable<YaEvent<ymaps.Map>>;
    /**
     * Closing the balloon.
     */
    balloonclose: Observable<YaEvent<ymaps.Map>>;
    /**
     * Opening a balloon on a map.
     */
    balloonopen: Observable<YaEvent<ymaps.Map>>;
    /**
     * Event for a change to the map viewport.
     */
    boundschange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Single left-click on the object.
     */
    yaclick: Observable<YaEvent<ymaps.Map>>;
    /**
     * Calls the element's context menu.
     */
    yacontextmenu: Observable<YaEvent<ymaps.Map>>;
    /**
     * Double left-click on the object.
     */
    yadblclick: Observable<YaEvent<ymaps.Map>>;
    /**
     * The map was destroyed.
     */
    destroy: Observable<YaEvent<ymaps.Map>>;
    /**
     * Closing the hint.
     */
    hintclose: Observable<YaEvent<ymaps.Map>>;
    /**
     * Opening a hint on a map.
     */
    hintopen: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map margins changed.
     */
    marginchange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Pressing the mouse button over the object.
     */
    yamousedown: Observable<YaEvent<ymaps.Map>>;
    /**
     * Pointing the cursor at the object.
     */
    yamouseenter: Observable<YaEvent<ymaps.Map>>;
    /**
     * Moving the cursor off of the object.
     */
    yamouseleave: Observable<YaEvent<ymaps.Map>>;
    /**
     * Moving the cursor over the object.
     */
    yamousemove: Observable<YaEvent<ymaps.Map>>;
    /**
     * Letting go of the mouse button over an object.
     */
    yamouseup: Observable<YaEvent<ymaps.Map>>;
    /**
     * End of multitouch.
     */
    multitouchend: Observable<YaEvent<ymaps.Map>>;
    /**
     * Repeating event during multitouch.
     */
    multitouchmove: Observable<YaEvent<ymaps.Map>>;
    /**
     * Start of multitouch.
     */
    multitouchstart: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map options changed.
     */
    optionschange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Map size changed.
     */
    sizechange: Observable<YaEvent<ymaps.Map>>;
    /**
     * The map type changed.
     */
    typechange: Observable<YaEvent<ymaps.Map>>;
    /**
     * Mouse wheel scrolling.
     */
    yawheel: Observable<YaEvent<ymaps.Map>>;
    constructor(_ngZone: NgZone, _yaApiLoaderService: YaApiLoaderService, platformId: Object);
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Destructs state and passes it in API.
     * @param state
     * @param map
     */
    private _setState;
    /**
     * Creates a map.
     * @param id ID which will be set to the map container.
     */
    private _createMap;
    /**
     * Combines the center and zoom into single object.
     */
    private _combineState;
}
