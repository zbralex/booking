import { EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { YaMapComponent } from '../ya-map/ya-map.component';
import { YaReadyEvent } from '../../typings/ya-ready-event';
import { YaEvent } from '../../typings/ya-event';
/**
 * The `ya-placemark` directive wraps `ymaps.Placemark` class from the Yandex Maps API.
 * You can configure it via the directive's inputs.
 * Events can be bound using the outputs of the directive.
 *
 * <example-url>https://stackblitz.com/edit/custom-placemark?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.751952, 37.600739]">
 *   <ya-placemark [geometry]="[55.751952, 37.600739]"></ya-placemark>
 * </ya-map>
 * ```
 */
export declare class YaPlacemarkDirective implements OnInit, OnChanges, OnDestroy {
    private readonly _ngZone;
    private readonly _yaMapComponent;
    private readonly _sub;
    private readonly _eventManager;
    placemark?: ymaps.Placemark;
    /**
     * Coordinates of the placemark, or a hash describing the geometry, or a reference to the point geometry object.
     * {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/reference/Placemark.html#Placemark__param-geometry}
     */
    geometry: number[] | object | ymaps.IPointGeometry;
    /**
     * Properties for the placemark.
     * {@link https://yandex.com/maps/jsapi/doc/2.1/ref/reference/Placemark-docpage/#Placemarkparam-properties}
     */
    properties: ymaps.IPlacemarkProperties | ymaps.IDataManager;
    /**
     * Options for the placemark.
     * {@link https://yandex.com/maps/jsapi/doc/2.1/ref/reference/Placemark-docpage/#Placemarkparam-options}
     */
    options: ymaps.IPlacemarkOptions;
    /**
     * Placemark instance is added in a Map.
     */
    ready: EventEmitter<YaReadyEvent<ymaps.Placemark>>;
    /**
     * Closing the balloon.
     */
    balloonclose: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Opening a balloon on a map.
     */
    balloonopen: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Event preceding the "drag" event.
     */
    beforedrag: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Event preceding the "dragstart" event.
     */
    beforedragstart: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Single left-click on the object.
     */
    yaclick: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Calls the element's context menu.
     */
    yacontextmenu: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Double left-click on the object.
     */
    yadblclick: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Dragging a geo object.
     */
    yadrag: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * End of geo object dragging.
     */
    yadragend: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Start of geo object dragging.
     */
    yadragstart: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Change in the state of the editor for the geo object's geometry.
     */
    editorstatechange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Change to the geo object geometry
     */
    geometrychange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Closing the hint.
     */
    hintclose: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Opening a hint on a map.
     */
    hintopen: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Map reference changed.
     */
    mapchange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Pressing the mouse button over the object.
     */
    yamousedown: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Pointing the cursor at the object.
     */
    yamouseenter: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Moving the cursor off of the object.
     */
    yamouseleave: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Moving the cursor over the object.
     */
    yamousemove: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Letting go of the mouse button over an object.
     */
    yamouseup: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * End of multitouch.
     */
    multitouchend: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Repeating event during multitouch.
     */
    multitouchmove: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Start of multitouch.
     */
    multitouchstart: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Change to the object options.
     */
    optionschange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Change to the geo object overlay.
     */
    overlaychange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * The parent object reference changed.
     */
    parentchange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Change to the geo object data.
     */
    propertieschange: Observable<YaEvent<ymaps.Placemark>>;
    /**
     * Mouse wheel scrolling.
     */
    yawheel: Observable<YaEvent<ymaps.Placemark>>;
    constructor(_ngZone: NgZone, _yaMapComponent: YaMapComponent);
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Creates a placemark.
     */
    private _createPlacemark;
}
