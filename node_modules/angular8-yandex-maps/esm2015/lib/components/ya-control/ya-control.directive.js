import { Directive, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { YaMapComponent } from '../ya-map/ya-map.component';
/**
 * The `ya-control` component wraps `ymaps.control[YaControlType]` classes from the Yandex Maps API.
 * You can configure `ymaps.control[YaControlType]` via the component's inputs.
 * API Events can be bound only manually. You can use `ready` event to get an instance.
 *
 * <example-url>https://stackblitz.com/edit/searchcontrol?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-control
 *     type="RoutePanel"
 *     [parameters]="{ options: { float: 'right' } }"
 *   ></ya-control>
 * </ya-map>
 * ```
 */
export class YaControlDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        /**
         * Control instance is added in a Map.
         */
        this.ready = new EventEmitter();
    }
    ngOnChanges() {
        if (this._control) {
            console.warn('Control does not support dynamic configuration. You can config it manually using ymaps or recreate the component with new configuration');
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const control = new ymaps.control[this.type](this.parameters);
                    this._control = control;
                    /**
                     * RoutePanel ignores state in parameters. API bug
                     */
                    if (control instanceof ymaps.control.RoutePanel &&
                        this.parameters &&
                        this.parameters.state) {
                        control.routePanel.state.set(Object.assign({}, this.parameters.state));
                    }
                    map.controls.add(control);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: control }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        var _a, _b;
        if (this._control) {
            (_b = (_a = this._yaMapComponent) === null || _a === void 0 ? void 0 : _a.map$.value) === null || _b === void 0 ? void 0 : _b.controls.remove(this._control);
        }
    }
}
YaControlDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ya-control',
            },] }
];
YaControlDirective.ctorParameters = () => [
    { type: NgZone },
    { type: YaMapComponent }
];
YaControlDirective.propDecorators = {
    type: [{ type: Input }],
    parameters: [{ type: Input }],
    ready: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtY29udHJvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyOC15YW5kZXgtbWFwcy9zcmMvbGliL2NvbXBvbmVudHMveWEtY29udHJvbC95YS1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUlOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQWtCNUQ7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBb0I3QixZQUE2QixPQUFlLEVBQW1CLGVBQStCO1FBQWpFLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBbUIsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBbkI3RSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQWMzQzs7V0FFRztRQUNPLFVBQUssR0FBb0MsSUFBSSxZQUFZLEVBQXFCLENBQUM7SUFFUSxDQUFDO0lBRWxHLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FDVix5SUFBeUksQ0FDMUksQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUN0RCxJQUFJLEdBQUcsRUFBRTtvQkFDUCxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7b0JBRXhCOzt1QkFFRztvQkFDSCxJQUNFLE9BQU8sWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVU7d0JBQzNDLElBQUksQ0FBQyxVQUFVO3dCQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUNyQjt3QkFDQSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLG1CQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFHLENBQUM7cUJBQzVEO29CQUVELEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNyRTtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsV0FBVzs7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsTUFBQSxNQUFBLElBQUksQ0FBQyxlQUFlLDBDQUFFLElBQUksQ0FBQyxLQUFLLDBDQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQzs7O1lBaEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTthQUN2Qjs7O1lBNUNDLE1BQU07WUFPQyxjQUFjOzs7bUJBOENwQixLQUFLO3lCQUtMLEtBQUs7b0JBS0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBOZ1pvbmUsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgT3V0cHV0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgWWFNYXBDb21wb25lbnQgfSBmcm9tICcuLi95YS1tYXAveWEtbWFwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFlhUmVhZHlFdmVudCB9IGZyb20gJy4uLy4uL3R5cGluZ3MveWEtcmVhZHktZXZlbnQnO1xyXG5cclxuZXhwb3J0IHR5cGUgWWFDb250cm9sVHlwZSA9XHJcbiAgfCAnQnV0dG9uJ1xyXG4gIHwgJ0Z1bGxzY3JlZW5Db250cm9sJ1xyXG4gIHwgJ0dlb2xvY2F0aW9uQ29udHJvbCdcclxuICB8ICdMaXN0Qm94J1xyXG4gIHwgJ0xpc3RCb3hJdGVtJ1xyXG4gIHwgJ1JvdXRlQnV0dG9uJ1xyXG4gIHwgJ1JvdXRlRWRpdG9yJ1xyXG4gIHwgJ1JvdXRlUGFuZWwnXHJcbiAgfCAnUnVsZXJDb250cm9sJ1xyXG4gIHwgJ1NlYXJjaENvbnRyb2wnXHJcbiAgfCAnVHJhZmZpY0NvbnRyb2wnXHJcbiAgfCAnVHlwZVNlbGVjdG9yJ1xyXG4gIHwgJ1pvb21Db250cm9sJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYHlhLWNvbnRyb2xgIGNvbXBvbmVudCB3cmFwcyBgeW1hcHMuY29udHJvbFtZYUNvbnRyb2xUeXBlXWAgY2xhc3NlcyBmcm9tIHRoZSBZYW5kZXggTWFwcyBBUEkuXHJcbiAqIFlvdSBjYW4gY29uZmlndXJlIGB5bWFwcy5jb250cm9sW1lhQ29udHJvbFR5cGVdYCB2aWEgdGhlIGNvbXBvbmVudCdzIGlucHV0cy5cclxuICogQVBJIEV2ZW50cyBjYW4gYmUgYm91bmQgb25seSBtYW51YWxseS4gWW91IGNhbiB1c2UgYHJlYWR5YCBldmVudCB0byBnZXQgYW4gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIDxleGFtcGxlLXVybD5odHRwczovL3N0YWNrYmxpdHouY29tL2VkaXQvc2VhcmNoY29udHJvbD9lbWJlZD0xPC9leGFtcGxlLXVybD5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgaHRtbFxyXG4gKiA8eWEtbWFwIFtjZW50ZXJdPVwiWzU1Ljc2MTk1MiwgMzcuNjIwNzM5XVwiPlxyXG4gKiAgIDx5YS1jb250cm9sXHJcbiAqICAgICB0eXBlPVwiUm91dGVQYW5lbFwiXHJcbiAqICAgICBbcGFyYW1ldGVyc109XCJ7IG9wdGlvbnM6IHsgZmxvYXQ6ICdyaWdodCcgfSB9XCJcclxuICogICA+PC95YS1jb250cm9sPlxyXG4gKiA8L3lhLW1hcD5cclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ3lhLWNvbnRyb2wnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgWWFDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xyXG5cclxuICBwcml2YXRlIF9jb250cm9sPzogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBDb250cm9sIHR5cGUuXHJcbiAgICovXHJcbiAgQElucHV0KCkgdHlwZTogWWFDb250cm9sVHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGFyYW1ldGVycyBmb3IgdGhlIENvbnRyb2wuXHJcbiAgICovXHJcbiAgQElucHV0KCkgcGFyYW1ldGVyczogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBDb250cm9sIGluc3RhbmNlIGlzIGFkZGVkIGluIGEgTWFwLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSByZWFkeTogRXZlbnRFbWl0dGVyPFlhUmVhZHlFdmVudDxhbnk+PiA9IG5ldyBFdmVudEVtaXR0ZXI8WWFSZWFkeUV2ZW50PGFueT4+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX25nWm9uZTogTmdab25lLCBwcml2YXRlIHJlYWRvbmx5IF95YU1hcENvbXBvbmVudDogWWFNYXBDb21wb25lbnQpIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdDb250cm9sIGRvZXMgbm90IHN1cHBvcnQgZHluYW1pYyBjb25maWd1cmF0aW9uLiBZb3UgY2FuIGNvbmZpZyBpdCBtYW51YWxseSB1c2luZyB5bWFwcyBvciByZWNyZWF0ZSB0aGUgY29tcG9uZW50IHdpdGggbmV3IGNvbmZpZ3VyYXRpb24nLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5feWFNYXBDb21wb25lbnQuaXNCcm93c2VyKSB7XHJcbiAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3lhTWFwQ29tcG9uZW50Lm1hcCQuc3Vic2NyaWJlKChtYXApID0+IHtcclxuICAgICAgICBpZiAobWFwKSB7XHJcbiAgICAgICAgICBjb25zdCBjb250cm9sID0gbmV3IHltYXBzLmNvbnRyb2xbdGhpcy50eXBlXSh0aGlzLnBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBSb3V0ZVBhbmVsIGlnbm9yZXMgc3RhdGUgaW4gcGFyYW1ldGVycy4gQVBJIGJ1Z1xyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGNvbnRyb2wgaW5zdGFuY2VvZiB5bWFwcy5jb250cm9sLlJvdXRlUGFuZWwgJiZcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzICYmXHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zdGF0ZVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wucm91dGVQYW5lbC5zdGF0ZS5zZXQoeyAuLi50aGlzLnBhcmFtZXRlcnMuc3RhdGUgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbWFwLmNvbnRyb2xzLmFkZChjb250cm9sKTtcclxuICAgICAgICAgIHRoaXMuX25nWm9uZS5ydW4oKCkgPT4gdGhpcy5yZWFkeS5lbWl0KHsgeW1hcHMsIHRhcmdldDogY29udHJvbCB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuX3N1Yi5hZGQoc3ViKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2NvbnRyb2wpIHtcclxuICAgICAgdGhpcy5feWFNYXBDb21wb25lbnQ/Lm1hcCQudmFsdWU/LmNvbnRyb2xzLnJlbW92ZSh0aGlzLl9jb250cm9sKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19