import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, NgZone, Output, PLATFORM_ID, ViewChild, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, Subscription } from 'rxjs';
import { EventManager } from '../../event-manager';
import { generateRandomId } from '../../utils/generate-random-id';
import { YaApiLoaderService } from '../../services/ya-api-loader/ya-api-loader.service';
/**
 * The `ya-map` component wraps `ymaps.Map` class from the Yandex Maps API.
 * You can configure the map via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/map-onload-event?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map
 *   [center]="[55.751952, 37.600739]"
 *   [state]="{type: 'yandex#satellite'}"
 * ></ya-map>
 * ```
 */
export class YaMapComponent {
    constructor(_ngZone, _yaApiLoaderService, platformId) {
        this._ngZone = _ngZone;
        this._yaApiLoaderService = _yaApiLoaderService;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        this.map$ = new BehaviorSubject(undefined);
        /**
         * Map instance is created.
         */
        this.ready = new EventEmitter();
        /**
         * The start of a new smooth map movement.
         */
        this.actionbegin = this._eventManager.getLazyEmitter('actionbegin');
        /**
         * Event that occurs when an action step was prematurely stopped.
         */
        this.actionbreak = this._eventManager.getLazyEmitter('actionbreak');
        /**
         * The end of smooth map movement.
         */
        this.actionend = this._eventManager.getLazyEmitter('actionend');
        /**
         * The start of a new step of smooth movement.
         */
        this.actiontick = this._eventManager.getLazyEmitter('actiontick');
        /**
         * The end of performing a step of smooth movement.
         */
        this.actiontickcomplete = this._eventManager.getLazyEmitter('actiontickcomplete');
        /**
         * Closing the balloon.
         */
        this.balloonclose = this._eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening a balloon on a map.
         */
        this.balloonopen = this._eventManager.getLazyEmitter('balloonopen');
        /**
         * Event for a change to the map viewport.
         */
        this.boundschange = this._eventManager.getLazyEmitter('boundschange');
        /**
         * Single left-click on the object.
         */
        this.yaclick = this._eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         */
        this.yacontextmenu = this._eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         */
        this.yadblclick = this._eventManager.getLazyEmitter('dblclick');
        /**
         * The map was destroyed.
         */
        this.destroy = this._eventManager.getLazyEmitter('destroy');
        /**
         * Closing the hint.
         */
        this.hintclose = this._eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         */
        this.hintopen = this._eventManager.getLazyEmitter('hintopen');
        /**
         * Map margins changed.
         */
        this.marginchange = this._eventManager.getLazyEmitter('marginchange');
        /**
         * Pressing the mouse button over the object.
         */
        this.yamousedown = this._eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         */
        this.yamouseenter = this._eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         */
        this.yamouseleave = this._eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         */
        this.yamousemove = this._eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         */
        this.yamouseup = this._eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         */
        this.multitouchend = this._eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         */
        this.multitouchmove = this._eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         */
        this.multitouchstart = this._eventManager.getLazyEmitter('multitouchstart');
        /**
         * Map options changed.
         */
        this.optionschange = this._eventManager.getLazyEmitter('optionschange');
        /**
         * Map size changed.
         */
        this.sizechange = this._eventManager.getLazyEmitter('sizechange');
        /**
         * The map type changed.
         */
        this.typechange = this._eventManager.getLazyEmitter('typechange');
        /**
         * Mouse wheel scrolling.
         */
        this.yawheel = this._eventManager.getLazyEmitter('wheel');
        this.isBrowser = isPlatformBrowser(platformId);
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const map = this.map$.value;
        if (map) {
            const { center, zoom, state, options } = changes;
            if (state) {
                this._setState(this._combineState(), map);
            }
            if (center) {
                map.setCenter(center.currentValue);
            }
            if (zoom) {
                map.setZoom(zoom.currentValue);
            }
            if (options) {
                map.options.set(options.currentValue);
            }
        }
    }
    ngAfterViewInit() {
        /**
         * It should be a noop during server-side rendering.
         */
        if (this.isBrowser) {
            const sub = this._yaApiLoaderService.load().subscribe(() => {
                const id = generateRandomId();
                const map = this._createMap(id);
                this.map$.next(map);
                this._eventManager.setTarget(map);
                this._ngZone.run(() => this.ready.emit({ ymaps, target: map }));
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        this._eventManager.destroy();
        this._sub.unsubscribe();
    }
    /**
     * Destructs state and passes it in API.
     * @param state
     * @param map
     */
    _setState(state, map) {
        const { behaviors, bounds, center, controls, margin, type, zoom } = state;
        if (behaviors) {
            map.behaviors.enable(behaviors);
        }
        if (bounds) {
            map.setBounds(bounds);
        }
        if (center) {
            map.setCenter(center);
        }
        if (controls) {
            controls.forEach((control) => map.controls.add(control));
        }
        if (margin) {
            map.margin.setDefaultMargin(margin);
        }
        if (type) {
            map.setType(type);
        }
        if (zoom) {
            map.setZoom(zoom);
        }
    }
    /**
     * Creates a map.
     * @param id ID which will be set to the map container.
     */
    _createMap(id) {
        const containerElem = this.container.nativeElement;
        containerElem.setAttribute('id', id);
        containerElem.style.cssText = 'width: 100%; height: 100%;';
        return new ymaps.Map(id, this._combineState(), this.options || {});
    }
    /**
     * Combines the center and zoom into single object.
     */
    _combineState() {
        var _a, _b;
        const state = this.state || {};
        return Object.assign(Object.assign({}, state), { center: this.center || state.center || [0, 0], zoom: (_b = (_a = this.zoom) !== null && _a !== void 0 ? _a : state.zoom) !== null && _b !== void 0 ? _b : 10 });
    }
}
YaMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'ya-map',
                template: '<div #container></div>',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
YaMapComponent.ctorParameters = () => [
    { type: NgZone },
    { type: YaApiLoaderService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
YaMapComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container',] }],
    center: [{ type: Input }],
    zoom: [{ type: Input }],
    state: [{ type: Input }],
    options: [{ type: Input }],
    ready: [{ type: Output }],
    actionbegin: [{ type: Output }],
    actionbreak: [{ type: Output }],
    actionend: [{ type: Output }],
    actiontick: [{ type: Output }],
    actiontickcomplete: [{ type: Output }],
    balloonclose: [{ type: Output }],
    balloonopen: [{ type: Output }],
    boundschange: [{ type: Output }],
    yaclick: [{ type: Output }],
    yacontextmenu: [{ type: Output }],
    yadblclick: [{ type: Output }],
    destroy: [{ type: Output }],
    hintclose: [{ type: Output }],
    hintopen: [{ type: Output }],
    marginchange: [{ type: Output }],
    yamousedown: [{ type: Output }],
    yamouseenter: [{ type: Output }],
    yamouseleave: [{ type: Output }],
    yamousemove: [{ type: Output }],
    yamouseup: [{ type: Output }],
    multitouchend: [{ type: Output }],
    multitouchmove: [{ type: Output }],
    multitouchstart: [{ type: Output }],
    optionschange: [{ type: Output }],
    sizechange: [{ type: Output }],
    typechange: [{ type: Output }],
    yawheel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,