import { Directive, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { from, Subscription } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { EventManager } from '../../event-manager';
import { YaMapComponent } from '../ya-map/ya-map.component';
/**
 * The `ya-panorama` component wraps `ymaps.panorama.Player` class from the Yandex Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/panorama?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map>
 *   <ya-panorama [point]="[59.938557, 30.316198]" layer="yandex#airPanorama"></ya-panorama>
 * </ya-map>
 * ```
 */
export class YaPanoramaDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * Panorama instance is created.
         */
        this.ready = new EventEmitter();
        /**
         * The player was closed by the user or destroyed using the panorama.Player.destroy method.
         */
        this.destroy = this._eventManager.getLazyEmitter('destroy');
        /**
         * The view direction changed.
         */
        this.directionchange = this._eventManager.getLazyEmitter('directionchange');
        /**
         * An error occurred during operation of the player. The user will be shown the appropriate screen.
         */
        this.yaerror = this._eventManager.getLazyEmitter('error');
        /**
         * The panorama player switched to full-screen mode.
         */
        this.fullscreenenter = this._eventManager.getLazyEmitter('fullscreenenter');
        /**
         * The panorama player exited full-screen mode.
         */
        this.fullscreenexit = this._eventManager.getLazyEmitter('fullscreenexit');
        /**
         * The user clicked on an expanded marker.
         */
        this.markercollapse = this._eventManager.getLazyEmitter('markercollapse');
        /**
         * The user clicked on a collapsed marker.
         */
        this.markerexpand = this._eventManager.getLazyEmitter('markerexpand');
        /**
         * The user's cursor hovered over a marker.
         */
        this.markermouseenter = this._eventManager.getLazyEmitter('markermouseenter');
        /**
         * The user's cursor left a marker.
         */
        this.markermouseleave = this._eventManager.getLazyEmitter('markermouseleave');
        /**
         * The open panorama changed.
         */
        this.panoramachange = this._eventManager.getLazyEmitter('panoramachange');
        /**
         * The size of the viewport has been changed.
         */
        this.spanchange = this._eventManager.getLazyEmitter('spanchange');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const player = this._player;
        if (player) {
            const { point, layer, options } = changes;
            /**
             * player.moveTo resets values to default if any of them isn't passed.
             * That's why we use value from currentValue OR previous value from input.
             * With that logic it's possible to pass only point, layer or options.
             */
            if (point || layer) {
                const combinedPoint = (point === null || point === void 0 ? void 0 : point.currentValue) || this.point;
                const combinedLayer = (layer === null || layer === void 0 ? void 0 : layer.currentValue) || this.layer;
                player.moveTo(combinedPoint, { layer: combinedLayer });
            }
            if (options) {
                this._setOptions(options.currentValue, player);
            }
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const panorama$ = this._yaMapComponent.map$.pipe(filter((m) => Boolean(m)), switchMap((m) => {
                /**
                 * Map and panorama use the same container, so need to destroy/remove map
                 */
                m.destroy();
                return this._createPanorama();
            }));
            const sub = panorama$.subscribe((panorama) => {
                const { id } = this._yaMapComponent.container.nativeElement;
                const player = new ymaps.panorama.Player(id, panorama, this.options);
                this._player = player;
                this._eventManager.setTarget(player);
                this._ngZone.run(() => this.ready.emit({ ymaps, target: player }));
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        this._eventManager.destroy();
        this._sub.unsubscribe();
    }
    /**
     * Destructs state and passes it in API.
     * @param options
     * @param player
     */
    _setOptions(options, player) {
        const { autoFitToViewport, controls, direction, hotkeysEnabled, span, scrollZoomBehavior, suppressMapOpenBlock, } = options;
        if (autoFitToViewport ||
            controls ||
            hotkeysEnabled ||
            scrollZoomBehavior ||
            suppressMapOpenBlock) {
            console.warn('Only direction and span can be set after entity init. To set other options, you should recreate a Panorama with new options');
        }
        if (direction) {
            player.setDirection(direction);
        }
        if (span) {
            player.setSpan(span);
        }
    }
    /**
     * Searches for a panorama and returns first
     */
    _createPanorama() {
        return from(ymaps.panorama.locate(this.point, { layer: this.layer })).pipe(map((panoramas) => panoramas[0]));
    }
}
YaPanoramaDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ya-panorama',
            },] }
];
YaPanoramaDirective.ctorParameters = () => [
    { type: NgZone },
    { type: YaMapComponent }
];
YaPanoramaDirective.propDecorators = {
    point: [{ type: Input }],
    layer: [{ type: Input }],
    options: [{ type: Input }],
    ready: [{ type: Output }],
    destroy: [{ type: Output }],
    directionchange: [{ type: Output }],
    yaerror: [{ type: Output }],
    fullscreenenter: [{ type: Output }],
    fullscreenexit: [{ type: Output }],
    markercollapse: [{ type: Output }],
    markerexpand: [{ type: Output }],
    markermouseenter: [{ type: Output }],
    markermouseleave: [{ type: Output }],
    panoramachange: [{ type: Output }],
    spanchange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtcGFub3JhbWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcjgteWFuZGV4LW1hcHMvc3JjL2xpYi9jb21wb25lbnRzL3lhLXBhbm9yYW1hL3lhLXBhbm9yYW1hLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUlOLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSTVEOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFJSCxNQUFNLE9BQU8sbUJBQW1CO0lBa0c5QixZQUE2QixPQUFlLEVBQW1CLGVBQStCO1FBQWpFLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBbUIsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBakc3RSxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUxQixrQkFBYSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQXNCaEU7O1dBRUc7UUFDTyxVQUFLLEdBQXNELElBQUksWUFBWSxFQUVsRixDQUFDO1FBRUo7O1dBRUc7UUFDTyxZQUFPLEdBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFL0M7O1dBRUc7UUFDTyxvQkFBZSxHQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxD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Q0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3hFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2pDLENBQUM7SUFDSixDQUFDOzs7WUE5TUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2FBQ3hCOzs7WUE5QkMsTUFBTTtZQVVDLGNBQWM7OztvQkFnQ3BCLEtBQUs7b0JBTUwsS0FBSztzQkFNTCxLQUFLO29CQUtMLE1BQU07c0JBT04sTUFBTTs4QkFNTixNQUFNO3NCQU1OLE1BQU07OEJBTU4sTUFBTTs2QkFNTixNQUFNOzZCQU1OLE1BQU07MkJBTU4sTUFBTTsrQkFNTixNQUFNOytCQU1OLE1BQU07NkJBTU4sTUFBTTt5QkFNTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIElucHV0LFxyXG4gIE5nWm9uZSxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJy4uLy4uL2V2ZW50LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBZYU1hcENvbXBvbmVudCB9IGZyb20gJy4uL3lhLW1hcC95YS1tYXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgWWFSZWFkeUV2ZW50IH0gZnJvbSAnLi4vLi4vdHlwaW5ncy95YS1yZWFkeS1ldmVudCc7XHJcbmltcG9ydCB7IFlhRXZlbnQgfSBmcm9tICcuLi8uLi90eXBpbmdzL3lhLWV2ZW50JztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYHlhLXBhbm9yYW1hYCBjb21wb25lbnQgd3JhcHMgYHltYXBzLnBhbm9yYW1hLlBsYXllcmAgY2xhc3MgZnJvbSB0aGUgWWFuZGV4IE1hcHMgQVBJLlxyXG4gKiBZb3UgY2FuIGNvbmZpZ3VyZSBpdCB2aWEgdGhlIGNvbXBvbmVudCdzIGlucHV0cy5cclxuICogRXZlbnRzIGNhbiBiZSBib3VuZCB1c2luZyB0aGUgb3V0cHV0cyBvZiB0aGUgY29tcG9uZW50LlxyXG4gKlxyXG4gKiA8ZXhhbXBsZS11cmw+aHR0cHM6Ly9zdGFja2JsaXR6LmNvbS9lZGl0L3Bhbm9yYW1hP2VtYmVkPTE8L2V4YW1wbGUtdXJsPlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBodG1sXHJcbiAqIDx5YS1tYXA+XHJcbiAqICAgPHlhLXBhbm9yYW1hIFtwb2ludF09XCJbNTkuOTM4NTU3LCAzMC4zMTYxOThdXCIgbGF5ZXI9XCJ5YW5kZXgjYWlyUGFub3JhbWFcIj48L3lhLXBhbm9yYW1hPlxyXG4gKiA8L3lhLW1hcD5cclxuICogYGBgXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ3lhLXBhbm9yYW1hJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFlhUGFub3JhbWFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICBwcml2YXRlIHJlYWRvbmx5IF9zdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2V2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIodGhpcy5fbmdab25lKTtcclxuXHJcbiAgcHJpdmF0ZSBfcGxheWVyPzogeW1hcHMucGFub3JhbWEuUGxheWVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcG9pbnQgZm9yIHNlYXJjaGluZyBmb3IgbmVhcmJ5IHBhbm9yYW1hcy5cclxuICAgKiB7QGxpbmsgaHR0cHM6Ly95YW5kZXguY29tL2Rldi9tYXBzL2pzYXBpL2RvYy8yLjEvcmVmL3JlZmVyZW5jZS9wYW5vcmFtYS5sb2NhdGUuaHRtbCNwYW5vcmFtYS5sb2NhdGVfX3BhcmFtLXBvaW50fVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIHBvaW50OiBudW1iZXJbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGxheWVyIHRvIHNlYXJjaCBmb3IgcGFub3JhbWFzLlxyXG4gICAqIHtAbGluayBodHRwczovL3lhbmRleC5jb20vZGV2L21hcHMvanNhcGkvZG9jLzIuMS9yZWYvcmVmZXJlbmNlL3Bhbm9yYW1hLmxvY2F0ZS5odG1sI3Bhbm9yYW1hLmxvY2F0ZV9fcGFyYW0tb3B0aW9ucy5sYXllcn1cclxuICAgKi9cclxuICBASW5wdXQoKSBsYXllcjogeW1hcHMucGFub3JhbWEuTGF5ZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wdGlvbnMgZm9yIHRoZSBwbGF5ZXIuXHJcbiAgICoge0BsaW5rIGh0dHBzOi8veWFuZGV4LmNvbS9kZXYvbWFwcy9qc2FwaS9kb2MvMi4xL3JlZi9yZWZlcmVuY2UvcGFub3JhbWEuUGxheWVyLmh0bWwjcGFub3JhbWEuUGxheWVyX19wYXJhbS1vcHRpb25zfVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIG9wdGlvbnM6IHltYXBzLnBhbm9yYW1hLklQbGF5ZXJPcHRpb25zO1xyXG5cclxuICAvKipcclxuICAgKiBQYW5vcmFtYSBpbnN0YW5jZSBpcyBjcmVhdGVkLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSByZWFkeTogRXZlbnRFbWl0dGVyPFlhUmVhZHlFdmVudDx5bWFwcy5wYW5vcmFtYS5QbGF5ZXI+PiA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBZYVJlYWR5RXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPlxyXG4gID4oKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBsYXllciB3YXMgY2xvc2VkIGJ5IHRoZSB1c2VyIG9yIGRlc3Ryb3llZCB1c2luZyB0aGUgcGFub3JhbWEuUGxheWVyLmRlc3Ryb3kgbWV0aG9kLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBkZXN0cm95OiBPYnNlcnZhYmxlPFlhRXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPj4gPVxyXG4gICAgdGhpcy5fZXZlbnRNYW5hZ2VyLmdldExhenlFbWl0dGVyKCdkZXN0cm95Jyk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB2aWV3IGRpcmVjdGlvbiBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBkaXJlY3Rpb25jaGFuZ2U6IE9ic2VydmFibGU8WWFFdmVudDx5bWFwcy5wYW5vcmFtYS5QbGF5ZXI+PiA9XHJcbiAgICB0aGlzLl9ldmVudE1hbmFnZXIuZ2V0TGF6eUVtaXR0ZXIoJ2RpcmVjdGlvbmNoYW5nZScpO1xyXG5cclxuICAvKipcclxuICAgKiBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgb3BlcmF0aW9uIG9mIHRoZSBwbGF5ZXIuIFRoZSB1c2VyIHdpbGwgYmUgc2hvd24gdGhlIGFwcHJvcHJpYXRlIHNjcmVlbi5cclxuICAgKi9cclxuICBAT3V0cHV0KCkgeWFlcnJvcjogT2JzZXJ2YWJsZTxZYUV2ZW50PHltYXBzLnBhbm9yYW1hLlBsYXllcj4+ID1cclxuICAgIHRoaXMuX2V2ZW50TWFuYWdlci5nZXRMYXp5RW1pdHRlcignZXJyb3InKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBhbm9yYW1hIHBsYXllciBzd2l0Y2hlZCB0byBmdWxsLXNjcmVlbiBtb2RlLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBmdWxsc2NyZWVuZW50ZXI6IE9ic2VydmFibGU8WWFFdmVudDx5bWFwcy5wYW5vcmFtYS5QbGF5ZXI+PiA9XHJcbiAgICB0aGlzLl9ldmVudE1hbmFnZXIuZ2V0TGF6eUVtaXR0ZXIoJ2Z1bGxzY3JlZW5lbnRlcicpO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGFub3JhbWEgcGxheWVyIGV4aXRlZCBmdWxsLXNjcmVlbiBtb2RlLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBmdWxsc2NyZWVuZXhpdDogT2JzZXJ2YWJsZTxZYUV2ZW50PHltYXBzLnBhbm9yYW1hLlBsYXllcj4+ID1cclxuICAgIHRoaXMuX2V2ZW50TWFuYWdlci5nZXRMYXp5RW1pdHRlcignZnVsbHNjcmVlbmV4aXQnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHVzZXIgY2xpY2tlZCBvbiBhbiBleHBhbmRlZCBtYXJrZXIuXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIG1hcmtlcmNvbGxhcHNlOiBPYnNlcnZhYmxlPFlhRXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPj4gPVxyXG4gICAgdGhpcy5fZXZlbnRNYW5hZ2VyLmdldExhenlFbWl0dGVyKCdtYXJrZXJjb2xsYXBzZScpO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdXNlciBjbGlja2VkIG9uIGEgY29sbGFwc2VkIG1hcmtlci5cclxuICAgKi9cclxuICBAT3V0cHV0KCkgbWFya2VyZXhwYW5kOiBPYnNlcnZhYmxlPFlhRXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPj4gPVxyXG4gICAgdGhpcy5fZXZlbnRNYW5hZ2VyLmdldExhenlFbWl0dGVyKCdtYXJrZXJleHBhbmQnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHVzZXIncyBjdXJzb3IgaG92ZXJlZCBvdmVyIGEgbWFya2VyLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBtYXJrZXJtb3VzZWVudGVyOiBPYnNlcnZhYmxlPFlhRXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPj4gPVxyXG4gICAgdGhpcy5fZXZlbnRNYW5hZ2VyLmdldExhenlFbWl0dGVyKCdtYXJrZXJtb3VzZWVudGVyJyk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2VyJ3MgY3Vyc29yIGxlZnQgYSBtYXJrZXIuXHJcbiAgICovXHJcbiAgQE91dHB1dCgpIG1hcmtlcm1vdXNlbGVhdmU6IE9ic2VydmFibGU8WWFFdmVudDx5bWFwcy5wYW5vcmFtYS5QbGF5ZXI+PiA9XHJcbiAgICB0aGlzLl9ldmVudE1hbmFnZXIuZ2V0TGF6eUVtaXR0ZXIoJ21hcmtlcm1vdXNlbGVhdmUnKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIG9wZW4gcGFub3JhbWEgY2hhbmdlZC5cclxuICAgKi9cclxuICBAT3V0cHV0KCkgcGFub3JhbWFjaGFuZ2U6IE9ic2VydmFibGU8WWFFdmVudDx5bWFwcy5wYW5vcmFtYS5QbGF5ZXI+PiA9XHJcbiAgICB0aGlzLl9ldmVudE1hbmFnZXIuZ2V0TGF6eUVtaXR0ZXIoJ3Bhbm9yYW1hY2hhbmdlJyk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBzaXplIG9mIHRoZSB2aWV3cG9ydCBoYXMgYmVlbiBjaGFuZ2VkLlxyXG4gICAqL1xyXG4gIEBPdXRwdXQoKSBzcGFuY2hhbmdlOiBPYnNlcnZhYmxlPFlhRXZlbnQ8eW1hcHMucGFub3JhbWEuUGxheWVyPj4gPVxyXG4gICAgdGhpcy5fZXZlbnRNYW5hZ2VyLmdldExhenlFbWl0dGVyKCdzcGFuY2hhbmdlJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX25nWm9uZTogTmdab25lLCBwcml2YXRlIHJlYWRvbmx5IF95YU1hcENvbXBvbmVudDogWWFNYXBDb21wb25lbnQpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgaW5wdXQgY2hhbmdlcyBhbmQgcGFzc2VzIHRoZW0gaW4gQVBJLlxyXG4gICAqIEBwYXJhbSBjaGFuZ2VzXHJcbiAgICovXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgY29uc3QgcGxheWVyID0gdGhpcy5fcGxheWVyO1xyXG5cclxuICAgIGlmIChwbGF5ZXIpIHtcclxuICAgICAgY29uc3QgeyBwb2ludCwgbGF5ZXIsIG9wdGlvbnMgfSA9IGNoYW5nZXM7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogcGxheWVyLm1vdmVUbyByZXNldHMgdmFsdWVzIHRvIGRlZmF1bHQgaWYgYW55IG9mIHRoZW0gaXNuJ3QgcGFzc2VkLlxyXG4gICAgICAgKiBUaGF0J3Mgd2h5IHdlIHVzZSB2YWx1ZSBmcm9tIGN1cnJlbnRWYWx1ZSBPUiBwcmV2aW91cyB2YWx1ZSBmcm9tIGlucHV0LlxyXG4gICAgICAgKiBXaXRoIHRoYXQgbG9naWMgaXQncyBwb3NzaWJsZSB0byBwYXNzIG9ubHkgcG9pbnQsIGxheWVyIG9yIG9wdGlvbnMuXHJcbiAgICAgICAqL1xyXG4gICAgICBpZiAocG9pbnQgfHwgbGF5ZXIpIHtcclxuICAgICAgICBjb25zdCBjb21iaW5lZFBvaW50OiBudW1iZXJbXSA9IHBvaW50Py5jdXJyZW50VmFsdWUgfHwgdGhpcy5wb2ludDtcclxuICAgICAgICBjb25zdCBjb21iaW5lZExheWVyOiB5bWFwcy5wYW5vcmFtYS5MYXllciA9IGxheWVyPy5jdXJyZW50VmFsdWUgfHwgdGhpcy5sYXllcjtcclxuXHJcbiAgICAgICAgcGxheWVyLm1vdmVUbyhjb21iaW5lZFBvaW50LCB7IGxheWVyOiBjb21iaW5lZExheWVyIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucy5jdXJyZW50VmFsdWUsIHBsYXllcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3lhTWFwQ29tcG9uZW50LmlzQnJvd3Nlcikge1xyXG4gICAgICBjb25zdCBwYW5vcmFtYSQgPSB0aGlzLl95YU1hcENvbXBvbmVudC5tYXAkLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKChtKTogbSBpcyB5bWFwcy5NYXAgPT4gQm9vbGVhbihtKSksXHJcbiAgICAgICAgc3dpdGNoTWFwKChtOiB5bWFwcy5NYXApID0+IHtcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogTWFwIGFuZCBwYW5vcmFtYSB1c2UgdGhlIHNhbWUgY29udGFpbmVyLCBzbyBuZWVkIHRvIGRlc3Ryb3kvcmVtb3ZlIG1hcFxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBtLmRlc3Ryb3koKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVQYW5vcmFtYSgpO1xyXG4gICAgICAgIH0pLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3Qgc3ViID0gcGFub3JhbWEkLnN1YnNjcmliZSgocGFub3JhbWEpID0+IHtcclxuICAgICAgICBjb25zdCB7IGlkIH0gPSB0aGlzLl95YU1hcENvbXBvbmVudC5jb250YWluZXIubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBwbGF5ZXIgPSBuZXcgeW1hcHMucGFub3JhbWEuUGxheWVyKGlkLCBwYW5vcmFtYSwgdGhpcy5vcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9wbGF5ZXIgPSBwbGF5ZXI7XHJcblxyXG4gICAgICAgIHRoaXMuX2V2ZW50TWFuYWdlci5zZXRUYXJnZXQocGxheWVyKTtcclxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHRoaXMucmVhZHkuZW1pdCh7IHltYXBzLCB0YXJnZXQ6IHBsYXllciB9KSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5fc3ViLmFkZChzdWIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ldmVudE1hbmFnZXIuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5fc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXN0cnVjdHMgc3RhdGUgYW5kIHBhc3NlcyBpdCBpbiBBUEkuXHJcbiAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgKiBAcGFyYW0gcGxheWVyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfc2V0T3B0aW9ucyhvcHRpb25zOiB5bWFwcy5wYW5vcmFtYS5JUGxheWVyT3B0aW9ucywgcGxheWVyOiB5bWFwcy5wYW5vcmFtYS5QbGF5ZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgYXV0b0ZpdFRvVmlld3BvcnQsXHJcbiAgICAgIGNvbnRyb2xzLFxyXG4gICAgICBkaXJlY3Rpb24sXHJcbiAgICAgIGhvdGtleXNFbmFibGVkLFxyXG4gICAgICBzcGFuLFxyXG4gICAgICBzY3JvbGxab29tQmVoYXZpb3IsXHJcbiAgICAgIHN1cHByZXNzTWFwT3BlbkJsb2NrLFxyXG4gICAgfSA9IG9wdGlvbnM7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBhdXRvRml0VG9WaWV3cG9ydCB8fFxyXG4gICAgICBjb250cm9scyB8fFxyXG4gICAgICBob3RrZXlzRW5hYmxlZCB8fFxyXG4gICAgICBzY3JvbGxab29tQmVoYXZpb3IgfHxcclxuICAgICAgc3VwcHJlc3NNYXBPcGVuQmxvY2tcclxuICAgICkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ09ubHkgZGlyZWN0aW9uIGFuZCBzcGFuIGNhbiBiZSBzZXQgYWZ0ZXIgZW50aXR5IGluaXQuIFRvIHNldCBvdGhlciBvcHRpb25zLCB5b3Ugc2hvdWxkIHJlY3JlYXRlIGEgUGFub3JhbWEgd2l0aCBuZXcgb3B0aW9ucycsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRpcmVjdGlvbikge1xyXG4gICAgICBwbGF5ZXIuc2V0RGlyZWN0aW9uKGRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNwYW4pIHtcclxuICAgICAgcGxheWVyLnNldFNwYW4oc3Bhbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZWFyY2hlcyBmb3IgYSBwYW5vcmFtYSBhbmQgcmV0dXJucyBmaXJzdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgX2NyZWF0ZVBhbm9yYW1hKCk6IE9ic2VydmFibGU8eW1hcHMuSVBhbm9yYW1hPiB7XHJcbiAgICByZXR1cm4gZnJvbSh5bWFwcy5wYW5vcmFtYS5sb2NhdGUodGhpcy5wb2ludCwgeyBsYXllcjogdGhpcy5sYXllciB9KSkucGlwZShcclxuICAgICAgbWFwKChwYW5vcmFtYXMpID0+IHBhbm9yYW1hc1swXSksXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=