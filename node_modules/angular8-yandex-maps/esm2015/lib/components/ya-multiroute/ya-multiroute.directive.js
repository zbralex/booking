import { Directive, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { EventManager } from '../../event-manager';
import { YaMapComponent } from '../ya-map/ya-map.component';
/**
 * The `ya-multiroute` component wraps `ymaps.multiRouter.MultiRoute` class from the Yandex Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/multiroute-pedestrian?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-multiroute
 *     [referencePoints]="[[55.751952, 37.600739], 'Красные ворота, Москва']"
 *     [model]="{ params: { routingMode: 'pedestrian' } }"
 *   ></ya-multiroute>
 * </ya-map>
 * ```
 */
export class YaMultirouteDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * Multiroute instance is added in a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Change to the active route.
         */
        this.activeroutechange = this._eventManager.getLazyEmitter('activeroutechange');
        /**
         * Closing the balloon.
         */
        this.balloonclose = this._eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening a balloon on a map.
         */
        this.balloonopen = this._eventManager.getLazyEmitter('balloonopen');
        /**
         * The event occurs at the time of setting the map center and its zoom level for optimal display of the multi-route.
         */
        this.boundsautoapply = this._eventManager.getLazyEmitter('boundsautoapply');
        /**
         * Changing coordinates of the geographical area covering the multi-route.
         */
        this.boundschange = this._eventManager.getLazyEmitter('boundschange');
        /**
         * Single left-click on the object.
         */
        this.yaclick = this._eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         */
        this.yacontextmenu = this._eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         */
        this.yadblclick = this._eventManager.getLazyEmitter('dblclick');
        /**
         * Change to the geo object geometry.
         */
        this.geometrychange = this._eventManager.getLazyEmitter('geometrychange');
        /**
         * Map reference changed.
         */
        this.mapchange = this._eventManager.getLazyEmitter('mapchange');
        /**
         * Pressing the mouse button over the object.
         */
        this.yamousedown = this._eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         */
        this.yamouseenter = this._eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         */
        this.yamouseleave = this._eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         */
        this.yamousemove = this._eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         */
        this.yamouseup = this._eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         */
        this.multitouchend = this._eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         */
        this.multitouchmove = this._eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         */
        this.multitouchstart = this._eventManager.getLazyEmitter('multitouchstart');
        /**
         * Change to the object options.
         */
        this.optionschange = this._eventManager.getLazyEmitter('optionschange');
        /**
         * Change to the geo object overlay.
         */
        this.overlaychange = this._eventManager.getLazyEmitter('overlaychange');
        /**
         * The parent object reference changed.
         */
        this.parentchange = this._eventManager.getLazyEmitter('parentchange');
        /**
         * Changing pixel coordinates of the area covering the multi-route.
         */
        this.pixelboundschange = this._eventManager.getLazyEmitter('pixelboundschange');
        /**
         * Change to the geo object data.
         */
        this.propertieschange = this._eventManager.getLazyEmitter('propertieschange');
        /**
         * Updating the multi-route.
         */
        this.update = this._eventManager.getLazyEmitter('update');
        /**
         * Mouse wheel scrolling.
         */
        this.yawheel = this._eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const multiroute = this._multiroute;
        if (multiroute) {
            const { referencePoints, model, options } = changes;
            if (model) {
                this._setModel(model.currentValue, multiroute);
            }
            if (referencePoints) {
                multiroute.model.setReferencePoints(referencePoints.currentValue);
            }
            if (options) {
                multiroute.options.set(options.currentValue);
            }
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const multiroute = this._createMultiroute();
                    this._multiroute = multiroute;
                    map.geoObjects.add(multiroute);
                    this._eventManager.setTarget(multiroute);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: multiroute }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        var _a, _b;
        if (this._multiroute) {
            (_b = (_a = this._yaMapComponent) === null || _a === void 0 ? void 0 : _a.map$.value) === null || _b === void 0 ? void 0 : _b.geoObjects.remove(this._multiroute);
            this._eventManager.destroy();
        }
        this._sub.unsubscribe();
    }
    /**
     * Destructs state and passes them in API.
     * @param model
     * @param multiroute
     */
    _setModel(model, multiroute) {
        const { referencePoints, params } = model;
        if (referencePoints) {
            multiroute.model.setReferencePoints(referencePoints);
        }
        if (params) {
            multiroute.model.setParams(params);
        }
    }
    /**
     * Creates Multiroute.
     */
    _createMultiroute() {
        return new ymaps.multiRouter.MultiRoute(this._combineModel(), this.options);
    }
    /**
     * Combines the model and reference points into single object
     */
    _combineModel() {
        const model = (this.model || {});
        return Object.assign(Object.assign({}, model), { referencePoints: this.referencePoints || model.referencePoints });
    }
}
YaMultirouteDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ya-multiroute',
            },] }
];
YaMultirouteDirective.ctorParameters = () => [
    { type: NgZone },
    { type: YaMapComponent }
];
YaMultirouteDirective.propDecorators = {
    referencePoints: [{ type: Input }],
    model: [{ type: Input }],
    options: [{ type: Input }],
    ready: [{ type: Output }],
    activeroutechange: [{ type: Output }],
    balloonclose: [{ type: Output }],
    balloonopen: [{ type: Output }],
    boundsautoapply: [{ type: Output }],
    boundschange: [{ type: Output }],
    yaclick: [{ type: Output }],
    yacontextmenu: [{ type: Output }],
    yadblclick: [{ type: Output }],
    geometrychange: [{ type: Output }],
    mapchange: [{ type: Output }],
    yamousedown: [{ type: Output }],
    yamouseenter: [{ type: Output }],
    yamouseleave: [{ type: Output }],
    yamousemove: [{ type: Output }],
    yamouseup: [{ type: Output }],
    multitouchend: [{ type: Output }],
    multitouchmove: [{ type: Output }],
    multitouchstart: [{ type: Output }],
    optionschange: [{ type: Output }],
    overlaychange: [{ type: Output }],
    parentchange: [{ type: Output }],
    pixelboundschange: [{ type: Output }],
    propertieschange: [{ type: Output }],
    update: [{ type: Output }],
    yawheel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,