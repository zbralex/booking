import { Directive, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { YaMapComponent } from '../ya-map/ya-map.component';
import { EventManager } from '../../event-manager';
/**
 * The `ya-placemark` directive wraps `ymaps.Placemark` class from the Yandex Maps API.
 * You can configure it via the directive's inputs.
 * Events can be bound using the outputs of the directive.
 *
 * <example-url>https://stackblitz.com/edit/custom-placemark?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.751952, 37.600739]">
 *   <ya-placemark [geometry]="[55.751952, 37.600739]"></ya-placemark>
 * </ya-map>
 * ```
 */
export class YaPlacemarkDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * Placemark instance is added in a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Closing the balloon.
         */
        this.balloonclose = this._eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening a balloon on a map.
         */
        this.balloonopen = this._eventManager.getLazyEmitter('balloonopen');
        /**
         * Event preceding the "drag" event.
         */
        this.beforedrag = this._eventManager.getLazyEmitter('beforedrag');
        /**
         * Event preceding the "dragstart" event.
         */
        this.beforedragstart = this._eventManager.getLazyEmitter('beforedragstart');
        /**
         * Single left-click on the object.
         */
        this.yaclick = this._eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         */
        this.yacontextmenu = this._eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         */
        this.yadblclick = this._eventManager.getLazyEmitter('dblclick');
        /**
         * Dragging a geo object.
         */
        this.yadrag = this._eventManager.getLazyEmitter('drag');
        /**
         * End of geo object dragging.
         */
        this.yadragend = this._eventManager.getLazyEmitter('dragend');
        /**
         * Start of geo object dragging.
         */
        this.yadragstart = this._eventManager.getLazyEmitter('dragstart');
        /**
         * Change in the state of the editor for the geo object's geometry.
         */
        this.editorstatechange = this._eventManager.getLazyEmitter('editorstatechange');
        /**
         * Change to the geo object geometry
         */
        this.geometrychange = this._eventManager.getLazyEmitter('geometrychange');
        /**
         * Closing the hint.
         */
        this.hintclose = this._eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         */
        this.hintopen = this._eventManager.getLazyEmitter('hintopen');
        /**
         * Map reference changed.
         */
        this.mapchange = this._eventManager.getLazyEmitter('mapchange');
        /**
         * Pressing the mouse button over the object.
         */
        this.yamousedown = this._eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         */
        this.yamouseenter = this._eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         */
        this.yamouseleave = this._eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         */
        this.yamousemove = this._eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         */
        this.yamouseup = this._eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         */
        this.multitouchend = this._eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         */
        this.multitouchmove = this._eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         */
        this.multitouchstart = this._eventManager.getLazyEmitter('multitouchstart');
        /**
         * Change to the object options.
         */
        this.optionschange = this._eventManager.getLazyEmitter('optionschange');
        /**
         * Change to the geo object overlay.
         */
        this.overlaychange = this._eventManager.getLazyEmitter('overlaychange');
        /**
         * The parent object reference changed.
         */
        this.parentchange = this._eventManager.getLazyEmitter('parentchange');
        /**
         * Change to the geo object data.
         */
        this.propertieschange = this._eventManager.getLazyEmitter('propertieschange');
        /**
         * Mouse wheel scrolling.
         */
        this.yawheel = this._eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        var _a;
        const { placemark } = this;
        if (placemark) {
            const { geometry, properties, options } = changes;
            if (geometry) {
                (_a = placemark.geometry) === null || _a === void 0 ? void 0 : _a.setCoordinates(geometry.currentValue);
            }
            if (properties) {
                placemark.properties.set(properties.currentValue);
            }
            if (options) {
                placemark.options.set(options.currentValue);
            }
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const placemark = this._createPlacemark();
                    this.placemark = placemark;
                    map.geoObjects.add(placemark);
                    this._eventManager.setTarget(placemark);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: placemark }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        var _a, _b;
        if (this.placemark) {
            (_b = (_a = this._yaMapComponent) === null || _a === void 0 ? void 0 : _a.map$.value) === null || _b === void 0 ? void 0 : _b.geoObjects.remove(this.placemark);
            this._eventManager.destroy();
        }
        this._sub.unsubscribe();
    }
    /**
     * Creates a placemark.
     */
    _createPlacemark() {
        return new ymaps.Placemark(this.geometry, this.properties, this.options);
    }
}
YaPlacemarkDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ya-placemark',
            },] }
];
YaPlacemarkDirective.ctorParameters = () => [
    { type: NgZone },
    { type: YaMapComponent }
];
YaPlacemarkDirective.propDecorators = {
    geometry: [{ type: Input }],
    properties: [{ type: Input }],
    options: [{ type: Input }],
    ready: [{ type: Output }],
    balloonclose: [{ type: Output }],
    balloonopen: [{ type: Output }],
    beforedrag: [{ type: Output }],
    beforedragstart: [{ type: Output }],
    yaclick: [{ type: Output }],
    yacontextmenu: [{ type: Output }],
    yadblclick: [{ type: Output }],
    yadrag: [{ type: Output }],
    yadragend: [{ type: Output }],
    yadragstart: [{ type: Output }],
    editorstatechange: [{ type: Output }],
    geometrychange: [{ type: Output }],
    hintclose: [{ type: Output }],
    hintopen: [{ type: Output }],
    mapchange: [{ type: Output }],
    yamousedown: [{ type: Output }],
    yamouseenter: [{ type: Output }],
    yamouseleave: [{ type: Output }],
    yamousemove: [{ type: Output }],
    yamouseup: [{ type: Output }],
    multitouchend: [{ type: Output }],
    multitouchmove: [{ type: Output }],
    multitouchstart: [{ type: Output }],
    optionschange: [{ type: Output }],
    overlaychange: [{ type: Output }],
    parentchange: [{ type: Output }],
    propertieschange: [{ type: Output }],
    yawheel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,