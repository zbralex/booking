import { Directive, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { EventManager } from '../../event-manager';
import { YaMapComponent } from '../ya-map/ya-map.component';
/**
 * The `ya-geoobject` component wraps `ymaps.GeoObject` class from the Yandex Maps API.
 * You can configure it via the component's inputs.
 * Events can be bound using the outputs of the component.
 *
 * <example-url>https://stackblitz.com/edit/geoobject-polygon?embed=1</example-url>
 *
 * @example
 * ```html
 * <ya-map [center]="[55.761952, 37.620739]">
 *   <ya-geoobject
 *     [feature]="{ geometry: { type: 'Rectangle', coordinates: [[55.665, 37.66], [55.64,37.53]] } }"
 *   ></ya-geoobject>
 * </ya-map>
 * ```
 */
export class YaGeoObjectDirective {
    constructor(_ngZone, _yaMapComponent) {
        this._ngZone = _ngZone;
        this._yaMapComponent = _yaMapComponent;
        this._sub = new Subscription();
        this._eventManager = new EventManager(this._ngZone);
        /**
         * GeoObject instance is added in a Map.
         */
        this.ready = new EventEmitter();
        /**
         * Closing the balloon.
         */
        this.balloonclose = this._eventManager.getLazyEmitter('balloonclose');
        /**
         * Opening a balloon on a map.
         */
        this.balloonopen = this._eventManager.getLazyEmitter('balloonopen');
        /**
         * Event preceding the "drag" event.
         */
        this.beforedrag = this._eventManager.getLazyEmitter('beforedrag');
        /**
         * Event preceding the "dragstart" event.
         */
        this.beforedragstart = this._eventManager.getLazyEmitter('beforedragstart');
        /**
         * Single left-click on the object.
         */
        this.yaclick = this._eventManager.getLazyEmitter('click');
        /**
         * Calls the element's context menu.
         */
        this.yacontextmenu = this._eventManager.getLazyEmitter('contextmenu');
        /**
         * Double left-click on the object.
         */
        this.yadblclick = this._eventManager.getLazyEmitter('dblclick');
        /**
         * Dragging a geo object.
         */
        this.yadrag = this._eventManager.getLazyEmitter('drag');
        /**
         * End of geo object dragging.
         */
        this.yadragend = this._eventManager.getLazyEmitter('dragend');
        /**
         * Start of geo object dragging.
         */
        this.yadragstart = this._eventManager.getLazyEmitter('dragstart');
        /**
         * Change in the state of the editor for the geo object's geometry.
         */
        this.editorstatechange = this._eventManager.getLazyEmitter('editorstatechange');
        /**
         * Change to the geo object geometry
         */
        this.geometrychange = this._eventManager.getLazyEmitter('geometrychange');
        /**
         * Closing the hint.
         */
        this.hintclose = this._eventManager.getLazyEmitter('hintclose');
        /**
         * Opening a hint on a map.
         */
        this.hintopen = this._eventManager.getLazyEmitter('hintopen');
        /**
         * Map reference changed.
         */
        this.mapchange = this._eventManager.getLazyEmitter('mapchange');
        /**
         * Pressing the mouse button over the object.
         */
        this.yamousedown = this._eventManager.getLazyEmitter('mousedown');
        /**
         * Pointing the cursor at the object.
         */
        this.yamouseenter = this._eventManager.getLazyEmitter('mouseenter');
        /**
         * Moving the cursor off of the object.
         */
        this.yamouseleave = this._eventManager.getLazyEmitter('mouseleave');
        /**
         * Moving the cursor over the object.
         */
        this.yamousemove = this._eventManager.getLazyEmitter('mousemove');
        /**
         * Letting go of the mouse button over an object.
         */
        this.yamouseup = this._eventManager.getLazyEmitter('mouseup');
        /**
         * End of multitouch.
         */
        this.multitouchend = this._eventManager.getLazyEmitter('multitouchend');
        /**
         * Repeating event during multitouch.
         */
        this.multitouchmove = this._eventManager.getLazyEmitter('multitouchmove');
        /**
         * Start of multitouch.
         */
        this.multitouchstart = this._eventManager.getLazyEmitter('multitouchstart');
        /**
         * Change to the object options.
         */
        this.optionschange = this._eventManager.getLazyEmitter('optionschange');
        /**
         * Change to the geo object overlay.
         */
        this.overlaychange = this._eventManager.getLazyEmitter('overlaychange');
        /**
         * The parent object reference changed.
         */
        this.parentchange = this._eventManager.getLazyEmitter('parentchange');
        /**
         * Change to the geo object data.
         */
        this.propertieschange = this._eventManager.getLazyEmitter('propertieschange');
        /**
         * Mouse wheel scrolling.
         */
        this.yawheel = this._eventManager.getLazyEmitter('wheel');
    }
    /**
     * Handles input changes and passes them in API.
     * @param changes
     */
    ngOnChanges(changes) {
        const { geoObject } = this;
        if (geoObject) {
            const { feature, options } = changes;
            if (feature) {
                this._setFeature(feature.currentValue, geoObject);
            }
            if (options) {
                geoObject.options.set(options.currentValue);
            }
        }
    }
    ngOnInit() {
        if (this._yaMapComponent.isBrowser) {
            const sub = this._yaMapComponent.map$.subscribe((map) => {
                if (map) {
                    const geoObject = this._createGeoObject();
                    this.geoObject = geoObject;
                    map.geoObjects.add(geoObject);
                    this._eventManager.setTarget(geoObject);
                    this._ngZone.run(() => this.ready.emit({ ymaps, target: geoObject }));
                }
            });
            this._sub.add(sub);
        }
    }
    ngOnDestroy() {
        var _a, _b;
        if (this.geoObject) {
            (_b = (_a = this._yaMapComponent) === null || _a === void 0 ? void 0 : _a.map$.value) === null || _b === void 0 ? void 0 : _b.geoObjects.remove(this.geoObject);
            this._eventManager.destroy();
        }
        this._sub.unsubscribe();
    }
    /**
     * Destructs feature and passes it in API.
     * @param feature
     * @param geoObject
     */
    _setFeature(feature, geoObject) {
        const { geometry, properties } = feature;
        if (geometry) {
            console.warn('The geometry can not be changed after entity init. To set it, you should recreate a GeoObject with new feature.geometry');
        }
        if (properties) {
            geoObject.properties.set(properties);
        }
    }
    /**
     * Creates GeoObject.
     */
    _createGeoObject() {
        return new ymaps.GeoObject(this.feature, this.options);
    }
}
YaGeoObjectDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ya-geoobject',
            },] }
];
YaGeoObjectDirective.ctorParameters = () => [
    { type: NgZone },
    { type: YaMapComponent }
];
YaGeoObjectDirective.propDecorators = {
    feature: [{ type: Input }],
    options: [{ type: Input }],
    ready: [{ type: Output }],
    balloonclose: [{ type: Output }],
    balloonopen: [{ type: Output }],
    beforedrag: [{ type: Output }],
    beforedragstart: [{ type: Output }],
    yaclick: [{ type: Output }],
    yacontextmenu: [{ type: Output }],
    yadblclick: [{ type: Output }],
    yadrag: [{ type: Output }],
    yadragend: [{ type: Output }],
    yadragstart: [{ type: Output }],
    editorstatechange: [{ type: Output }],
    geometrychange: [{ type: Output }],
    hintclose: [{ type: Output }],
    hintopen: [{ type: Output }],
    mapchange: [{ type: Output }],
    yamousedown: [{ type: Output }],
    yamouseenter: [{ type: Output }],
    yamouseleave: [{ type: Output }],
    yamousemove: [{ type: Output }],
    yamouseup: [{ type: Output }],
    multitouchend: [{ type: Output }],
    multitouchmove: [{ type: Output }],
    multitouchstart: [{ type: Output }],
    optionschange: [{ type: Output }],
    overlaychange: [{ type: Output }],
    parentchange: [{ type: Output }],
    propertieschange: [{ type: Output }],
    yawheel: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,