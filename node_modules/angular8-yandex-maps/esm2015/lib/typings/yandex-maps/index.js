"use strict";
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-shadow */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/* eslint-disable max-classes-per-file */
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../projects/angular8-yandex-maps/src/lib/typings/yandex-maps/index.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,sDAAsD;AACtD,iDAAiD;AACjD,qEAAqE;AACrE,yCAAyC","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-shadow */\r\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Type definitions for non-npm package yandex-maps 2.1.\r\n * Definitions by: Delagen <https://github.com/Delagen> / gastwork13 <https://github.com/gastwork13>.\r\n * Due to inactivity typings were copied and improved.\r\n * @see {@link https://yandex.com/dev/maps/jsapi/doc/2.1/ref/concepts/About.html}\r\n */\r\ndeclare namespace ymaps {\r\n  interface IClassConstructor<T> {\r\n    new (): T;\r\n  }\r\n\r\n  type ControlSingleKey =\r\n    | 'fullscreenControl'\r\n    | 'geolocationControl'\r\n    | 'routeEditor'\r\n    | 'rulerControl'\r\n    | 'searchControl'\r\n    | 'trafficControl'\r\n    | 'typeSelector'\r\n    | 'zoomControl'\r\n    | 'routeButtonControl'\r\n    | 'routePanelControl';\r\n\r\n  type ControlSetKey =\r\n    | 'smallMapDefaultSet'\r\n    | 'mediumMapDefaultSet'\r\n    | 'largeMapDefaultSet'\r\n    | 'default';\r\n\r\n  type ControlKey = ControlSingleKey | ControlSetKey;\r\n\r\n  type OverlayKey =\r\n    | 'default#placemark'\r\n    | 'default#pin'\r\n    | 'default#circle'\r\n    | 'default#rectangle'\r\n    | 'default#polyline'\r\n    | 'default#polygon'\r\n    | 'hotspot#placemark'\r\n    | 'hotspot#circle'\r\n    | 'hotspot#rectangle'\r\n    | 'hotspot#polyline'\r\n    | 'hotspot#polygon'\r\n    | 'html#balloon'\r\n    | 'html#hint'\r\n    | 'html#placemark'\r\n    | 'html#rectangle'\r\n    | string\r\n    | IClassConstructor<IOverlay>\r\n    | ((\r\n        geometry: IPixelLineStringGeometry,\r\n        data: IDataManager | object,\r\n        options: object,\r\n      ) => Promise<string | IClassConstructor<IOverlay>>);\r\n\r\n  type InteractivityModelKey =\r\n    | 'default#opaque'\r\n    | 'default#geoObject'\r\n    | 'default#layer'\r\n    | 'default#transparent'\r\n    | 'default#silent'\r\n    | string;\r\n\r\n  type PresetKey = string;\r\n\r\n  namespace behavior {\r\n    class DblClickZoom implements IBehavior {\r\n      constructor(options?: IDblClickZoomOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): IControlParent | null;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IDblClickZoomOptions extends IMapMarginOptions {\r\n      centering?: boolean;\r\n      duration?: number;\r\n    }\r\n\r\n    class Drag implements IBehavior {\r\n      constructor(options?: IDragOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IDragOptions {\r\n      actionCursor?: string;\r\n      cursor?: string;\r\n      inertia?: boolean;\r\n      inertiaDuration?: number;\r\n      tremor?: number;\r\n    }\r\n\r\n    class LeftMouseButtonMagnifier implements IBehavior {\r\n      constructor(options?: ILeftMouseButtonMagnifierOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface ILeftMouseButtonMagnifierOptions {\r\n      actionCursor?: string;\r\n      cursor?: string;\r\n      duration?: number;\r\n    }\r\n\r\n    class MultiTouch implements IBehavior {\r\n      constructor(options?: IMultiTouchOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IMultiTouchOptions {\r\n      tremor?: number;\r\n    }\r\n\r\n    class RightMouseButtonMagnifier implements IBehavior {\r\n      constructor(options?: IRightMouseButtonMagnifierOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRightMouseButtonMagnifierOptions {\r\n      actionCursor?: string;\r\n      duration?: number;\r\n    }\r\n\r\n    class RouteEditor implements IBehavior {\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getRoute(): router.Route;\r\n\r\n      getState(): string;\r\n\r\n      setState(state: string | null): void;\r\n    }\r\n\r\n    class Ruler implements IBehavior {\r\n      constructor(options?: IRulerOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      close(): boolean;\r\n\r\n      getState(): string;\r\n\r\n      setState(state: string | null): void;\r\n    }\r\n\r\n    interface IRulerOptions {\r\n      balloonAutoPan?: boolean;\r\n    }\r\n\r\n    class ScrollZoom implements IBehavior {\r\n      constructor(options?: IScrollZoomOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IScrollZoomOptions {\r\n      maximumDelta?: number;\r\n      speed?: number;\r\n    }\r\n\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace clusterer {\r\n    class Balloon implements IBalloonManager<Clusterer> {\r\n      constructor(clusterer: Clusterer);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<Clusterer>;\r\n\r\n      close(force?: boolean): Promise<Clusterer>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Clusterer>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\r\n\r\n      setOptions(options: object): Promise<Clusterer>;\r\n\r\n      setPosition(position: number[]): Promise<Clusterer>;\r\n    }\r\n\r\n    class Hint implements IHintManager<Clusterer> {\r\n      constructor(clusterer: Clusterer);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<Clusterer>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Clusterer>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Clusterer>;\r\n\r\n      setOptions(options: object): Promise<Clusterer>;\r\n\r\n      setPosition(position: number[]): Promise<Clusterer>;\r\n    }\r\n  }\r\n\r\n  namespace collection {\r\n    class Item implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\r\n      constructor(options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      onAddToMap(map: Map): void;\r\n\r\n      onRemoveFromMap(oldMap: Map): void;\r\n    }\r\n  }\r\n\r\n  namespace control {\r\n    class Button implements ICustomizable, ISelectableControl {\r\n      constructor(parameters?: IButtonParameters | string);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      data: data.Manager;\r\n\r\n      state: data.Manager;\r\n\r\n      deselect(): void;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      isSelected(): boolean;\r\n\r\n      select(): void;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IBaseButtonParametersOptions {\r\n      adjustMapMargin?: boolean;\r\n      float?: 'none' | 'left' | 'right';\r\n      floatIndex?: number;\r\n      layout?: IClassConstructor<ISelectableControlLayout> | string;\r\n      maxWidth?: number[][] | number[] | number;\r\n      position?: {\r\n        bottom?: number | string;\r\n        left?: number | string;\r\n        right?: number | string;\r\n        top?: number | string;\r\n      };\r\n      visible?: boolean;\r\n    }\r\n\r\n    interface IButtonParameters {\r\n      data?: {\r\n        content?: string;\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: IBaseButtonParametersOptions & {\r\n        selectOnClick?: boolean;\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n      };\r\n      state?: {\r\n        enabled?: boolean;\r\n        selected?: boolean;\r\n      };\r\n    }\r\n\r\n    class FullscreenControl extends Button {\r\n      constructor(parameters?: IFullscreenControlParameters);\r\n\r\n      enterFullscreen(): void;\r\n\r\n      exitFullscreen(): void;\r\n    }\r\n\r\n    interface IFullscreenControlParameters {\r\n      data?: {\r\n        title?: string;\r\n      };\r\n      options?: IBaseButtonParametersOptions & {\r\n        collapseOnBlur?: boolean;\r\n        expandOnClick?: boolean;\r\n        popupFloat?: 'left' | 'right';\r\n      };\r\n      state?: {\r\n        expanded?: boolean;\r\n      };\r\n    }\r\n\r\n    class GeolocationControl extends Button {\r\n      constructor(parameters?: IGeolocationControlParameters);\r\n    }\r\n\r\n    interface IGeolocationControlParameters extends IButtonParameters {\r\n      data?: {\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: IBaseButtonParametersOptions;\r\n    }\r\n\r\n    class ListBox implements ICollection, IControl, ICustomizable {\r\n      constructor(parameters?: IListBoxParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      data: data.Manager;\r\n\r\n      state: data.Manager;\r\n\r\n      add(object: object): this;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      remove(object: object): this;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IListBoxParameters extends IButtonParameters {\r\n      options?: IBaseButtonParametersOptions & {\r\n        noPlacemark?: boolean;\r\n      };\r\n    }\r\n\r\n    class ListBoxItem implements ICustomizable, ISelectableControl {\r\n      constructor(parameters?: IListBoxItemParameters);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      data: data.Manager;\r\n\r\n      state: data.Manager;\r\n\r\n      deselect(): void;\r\n\r\n      disable(): void;\r\n\r\n      enable(): void;\r\n\r\n      isEnabled(): boolean;\r\n\r\n      isSelected(): boolean;\r\n\r\n      select(): void;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    interface IListBoxItemParameters {\r\n      data?: {\r\n        content?: string;\r\n      };\r\n      options?: {\r\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        selectableLayout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        selectOnClick?: boolean;\r\n        separatorLayout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        type?: 'selectable' | 'separator';\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        selected?: boolean;\r\n      };\r\n    }\r\n\r\n    class Manager {\r\n      constructor(map: Map, controls?: Array<string | IControl>, options?: IManagerOptions);\r\n\r\n      events: event.Manager;\r\n\r\n      options: option.Manager;\r\n\r\n      state: data.Manager;\r\n\r\n      add(control: IControl | ControlKey, options?: IManagerControlOptions): this;\r\n\r\n      each(callback: (control: IControl) => void, context?: object): this;\r\n\r\n      get(index: number | string): IControl | null;\r\n\r\n      getChildElement(control: IControl): Promise<HTMLElement>;\r\n\r\n      getContainer(): HTMLElement;\r\n\r\n      getMap(): Map;\r\n\r\n      indexOf(childToFind: IControl | string): number;\r\n\r\n      remove(control: IControl | string): this;\r\n    }\r\n\r\n    interface IManagerOptions {\r\n      margin?: number;\r\n      pane?: IPane;\r\n      states?: string[];\r\n    }\r\n\r\n    interface IManagerControlOptions {\r\n      float?: 'none' | 'left' | 'right';\r\n      floatIndex?: number;\r\n      position?: {\r\n        bottom?: number | string;\r\n        left?: number | string;\r\n        right?: number | string;\r\n        top?: number | string;\r\n      };\r\n    }\r\n\r\n    class RouteButton implements IControl, ICustomizable {\r\n      constructor(parameters?: IRouteButtonParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      routePanel: IRoutePanel;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRouteButtonParameters {\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        popupAnimate?: boolean;\r\n        popupFloat?: 'auto' | 'left' | 'right';\r\n        popupWidth?: string;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n        visible?: boolean;\r\n      };\r\n      state?: {\r\n        expanded?: boolean;\r\n      };\r\n    }\r\n\r\n    class RouteEditor extends Button {\r\n      constructor(parameters?: IRouteEditorParameters);\r\n\r\n      getRoute(): router.Route;\r\n    }\r\n\r\n    interface IRouteEditorParameters {\r\n      data?: {\r\n        image?: string;\r\n        title?: string;\r\n      };\r\n      options?: IBaseButtonParametersOptions;\r\n      state?: object;\r\n    }\r\n\r\n    class RoutePanel implements IControl, ICustomizable {\r\n      constructor(parameters?: IRoutePanelParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      routePanel: IRoutePanel;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n    }\r\n\r\n    interface IRoutePanelParameters {\r\n      options?: {\r\n        autofocus?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        maxWidth?: string;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        showHeader?: boolean;\r\n        title?: string;\r\n        visible?: boolean;\r\n        [key: string]: any;\r\n      };\r\n      state?: {\r\n        fromEnabled?: boolean;\r\n        from?: string;\r\n        to?: string;\r\n        type?: string;\r\n        toEnabled?: boolean;\r\n      };\r\n    }\r\n\r\n    class RulerControl extends Button {\r\n      constructor(parameters?: IRulerControlParameters);\r\n    }\r\n\r\n    interface IRulerControlParameters {\r\n      data?: object;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        scaleLine?: boolean;\r\n        visible?: boolean;\r\n      };\r\n      state?: object;\r\n    }\r\n\r\n    class SearchControl implements IControl, ICustomizable {\r\n      constructor(parameters?: ISearchControlParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      clear(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getRequestString(): string;\r\n\r\n      getResponseMetaData(): object;\r\n\r\n      getResult(index: number): Promise<object>;\r\n\r\n      getResultsArray(): object[];\r\n\r\n      getResultsCount(): number;\r\n\r\n      getSelectedIndex(): number;\r\n\r\n      hideResult(): void;\r\n\r\n      search(request: string): Promise<void>;\r\n\r\n      showResult(index: number): this;\r\n    }\r\n\r\n    interface ISearchControlParameters {\r\n      data?: object;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        boundedBy?: number[][];\r\n        fitMaxWidth?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex?: number;\r\n        formLayout?: string | IClassConstructor<ILayout>;\r\n        kind?: 'house' | 'street' | 'metro' | 'district' | 'locality';\r\n        layout?: string | IClassConstructor<ISearchControlLayout>;\r\n        maxWidth?: number[][] | number[] | number;\r\n        noCentering?: boolean;\r\n        noPlacemark?: boolean;\r\n        noPopup?: boolean;\r\n        noSelect?: boolean;\r\n        noSuggestPanel?: boolean;\r\n        placeholderContent?: string;\r\n        popupItemLayout?: string | IClassConstructor<ILayout>;\r\n        popupLayout?: string | IClassConstructor<ILayout>;\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        provider?: IGeocodeProvider | 'yandex#map' | 'yandex#search';\r\n        searchCoordOrder?: 'latlong' | 'longlat';\r\n        size?: 'auto' | 'small' | 'medium' | 'large';\r\n        strictBounds?: boolean;\r\n        suppressYandexSearch?: boolean;\r\n        useMapBounds?: boolean;\r\n        zoomMargin?: number;\r\n        visible?: boolean;\r\n      };\r\n      state?: object;\r\n    }\r\n\r\n    const storage: util.Storage;\r\n\r\n    class TrafficControl implements IControl, ICustomizable {\r\n      constructor(parameters?: ITrafficControlParameters);\r\n\r\n      data: data.Manager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      collapse(): void;\r\n\r\n      expand(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      getProvider(key: TrafficControlProviderKey): ITrafficProvider;\r\n\r\n      hideTraffic(): void;\r\n\r\n      isExpanded(): boolean;\r\n\r\n      isTrafficShown(): boolean;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      showTraffic(): void;\r\n    }\r\n\r\n    type TrafficControlProviderKey = 'traffic#actual' | 'traffic#archive';\r\n\r\n    interface ITrafficProvider extends ICustomizable, IEventEmitter {\r\n      getMap(): Map | null;\r\n\r\n      setMap(map: Map): void;\r\n    }\r\n\r\n    interface ITrafficControlParameters {\r\n      options: {\r\n        adjustMapMargin?: boolean;\r\n        collapseOnBlur?: boolean;\r\n        float?: 'none' | 'left' | 'right';\r\n        floatIndex: number;\r\n        layout?: string | IClassConstructor<ISelectableControlLayout>;\r\n        maxWidth?: number | number[];\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: string;\r\n        visible?: boolean;\r\n        state?: {\r\n          providerKey?: TrafficControlProviderKey;\r\n          trafficShown?: boolean;\r\n        };\r\n      };\r\n    }\r\n\r\n    class TypeSelector extends ListBox {\r\n      constructor(parameters?: ITypeSelectorParameters);\r\n    }\r\n\r\n    interface ITypeSelectorParameters {\r\n      options?: {\r\n        panoramasItemMode: 'on' | 'off' | 'ifMercator';\r\n      };\r\n    }\r\n\r\n    class ZoomControl implements IControl, ICustomizable {\r\n      constructor(parameters?: IZoomControlParameters);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: data.Manager;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      clear(): void;\r\n\r\n      getMap(): Map;\r\n\r\n      getRequestString(): string;\r\n\r\n      getResponseMetaData(): object;\r\n\r\n      getResult(index: number): Promise<object>;\r\n\r\n      getResultsArray(): object[];\r\n\r\n      getResultsCount(): number;\r\n\r\n      getSelectedIndex(): number;\r\n\r\n      hideResult(): void;\r\n\r\n      search(request: string): Promise<void>;\r\n\r\n      showResult(index: number): this;\r\n    }\r\n\r\n    interface IZoomControlParameters {\r\n      data?: object;\r\n      options?: {\r\n        adjustMapMargin?: boolean;\r\n        layout?: string | IClassConstructor<IZoomControlLayout>;\r\n        float?: 'none' | 'left' | 'right';\r\n        position?: {\r\n          bottom?: number | string;\r\n          left?: number | string;\r\n          right?: number | string;\r\n          top?: number | string;\r\n        };\r\n        size?: string;\r\n        visible?: boolean;\r\n        zoomDuration?: number;\r\n        zoomStep?: number;\r\n        state?: object;\r\n      };\r\n    }\r\n\r\n    interface IZoomControlLayout extends ILayout {}\r\n  }\r\n\r\n  namespace data {\r\n    class Manager implements IDataManager, IFreezable {\r\n      constructor(data?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      get(path: string, defaultValue?: object): object;\r\n\r\n      getAll(): object;\r\n\r\n      set(path: object | string, value?: object | number | string | null | undefined): this;\r\n\r\n      setAll(): this;\r\n\r\n      unset(path: object | string): this;\r\n\r\n      unsetAll(): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): IEventManager | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventobject: object | IEvent): this;\r\n    }\r\n  }\r\n\r\n  namespace event {\r\n    class Manager<Target = {}> implements IEventManager<Target> {\r\n      constructor(params?: {\r\n        context?: object;\r\n        controllers?: IEventWorkflowController[];\r\n        parent?: IEventManager;\r\n      });\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: IEvent<{}, Target>) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): IEventManager | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventobject: object | IEvent): this;\r\n\r\n      createEventobject(type: string, event: object, target: object): Event;\r\n\r\n      once(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: IEvent) => any,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n    }\r\n  }\r\n\r\n  namespace geometry {\r\n    namespace base {\r\n      class LineString implements IBaseLineStringGeometry {\r\n        events: IEventManager;\r\n\r\n        static fromEncodedCoordinates(encodedCoordinates: string): geometry.LineString;\r\n\r\n        static toEncodedCoordinates(geometry: geometry.LineString): string;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getType(): string;\r\n\r\n        get(index: number): number[];\r\n\r\n        getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getLength(): number;\r\n\r\n        insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n        remove(index: number): number[];\r\n\r\n        remove(\r\n          types: string[][] | string[] | string,\r\n          callback: (event: object | IEvent) => void,\r\n          context?: object,\r\n          priority?: number,\r\n        ): this;\r\n\r\n        set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n        setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n        splice(index: number, length: number): number[][];\r\n\r\n        freeze(): IFreezable;\r\n\r\n        isFrozen(): boolean;\r\n\r\n        unfreeze(): IFreezable;\r\n\r\n        add(\r\n          types: string[][] | string[] | string,\r\n          callback: (event: object | IEvent) => void,\r\n          context?: object,\r\n          priority?: number,\r\n        ): this;\r\n\r\n        getParent(): object | null;\r\n\r\n        group(): IEventGroup;\r\n\r\n        setParent(parent: IEventManager | null): this;\r\n\r\n        fire(type: string, eventobject: object | IEvent): this;\r\n      }\r\n\r\n      class Point implements IBasePointGeometry {\r\n        events: IEventManager;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getType(): string;\r\n\r\n        getCoordinates(): number[] | null;\r\n\r\n        setCoordinates(coordinates: number[] | null): this;\r\n      }\r\n\r\n      class Polygon implements IBasePointGeometry {\r\n        constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero');\r\n\r\n        events: IEventManager;\r\n\r\n        static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\r\n\r\n        static toEncodedCoordinates(geometry: Polygon): string;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        freeze(): IFreezable;\r\n\r\n        get(index: number): number[][];\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[] | null;\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getType(): string;\r\n\r\n        insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n        isFrozen(): boolean;\r\n\r\n        remove(index: number): ILinearRingGeometryAccess;\r\n\r\n        set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n        setCoordinates(coordinates: number[] | null): this;\r\n\r\n        setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\r\n\r\n        splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n\r\n        unfreeze(): IFreezable;\r\n      }\r\n    }\r\n\r\n    class LineString implements ILineStringGeometry {\r\n      constructor(\r\n        coordinates?: number[][],\r\n        options?: {\r\n          coordRendering?: 'shortestPath' | 'straightPath';\r\n          geodesic?: boolean;\r\n          pixelRendering?: 'jumpy' | 'static';\r\n          projection?: IProjection;\r\n          simplification?: boolean;\r\n        },\r\n      );\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      static fromEncodedCoordinates(encodedCoordinates: string): LineString;\r\n\r\n      static toEncodedCoordinates(geometry: LineString): string;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getType(): string;\r\n\r\n      get(index: number): number[];\r\n\r\n      getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[][];\r\n\r\n      getLength(): number;\r\n\r\n      insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n      remove(index: number): number[];\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n      setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n      splice(index: number, length: number): number[][];\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      getParent(): object | null;\r\n\r\n      group(): IEventGroup;\r\n\r\n      setParent(parent: IEventManager | null): this;\r\n\r\n      fire(type: string, eventobject: object | IEvent): this;\r\n    }\r\n\r\n    class Point implements IPointGeometry {\r\n      constructor(coordinates?: number[] | null);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getType(): string;\r\n\r\n      getCoordinates(): number[] | null;\r\n\r\n      setCoordinates(coordinates: number[] | null): this;\r\n    }\r\n\r\n    class Polygon implements IPolygonGeometry {\r\n      constructor(coordinates?: number[][][], fillRule?: 'evenOdd' | 'nonZero', options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      static fromEncodedCoordinates(encodedCoordinates: string): Polygon;\r\n\r\n      static toEncodedCoordinates(geometry: Polygon): string;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      fire(type: string, eventobject: object | IEvent): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      get(index: number): number[][];\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n      getClosest(anchorPosition: number[]): object;\r\n\r\n      getCoordinates(): number[][][];\r\n\r\n      getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n      getLength(): number;\r\n\r\n      getMap(): Map | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      group(): IEventGroup;\r\n\r\n      insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      remove(index: number): ILinearRingGeometryAccess;\r\n\r\n      set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n      setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\r\n\r\n      setFillRule(fillRule: 'evenOdd' | 'nonZero'): IPolygonGeometryAccess;\r\n\r\n      setMap(map: Map): void;\r\n\r\n      setParent(parent: object | null): this;\r\n\r\n      splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n\r\n      unfreeze(): IFreezable;\r\n    }\r\n\r\n    namespace pixel {\r\n      class Circle implements IPixelCircleGeometry {\r\n        constructor(coordinates: number[] | null, radius: number, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getCoordinates(): number[];\r\n\r\n        getMetaData(): object;\r\n\r\n        getRadius(): number;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class LineString implements IPixelLineStringGeometry {\r\n        constructor(coordinates: number[][], metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class MultiLineString implements IPixelMultiLineGeometry {\r\n        constructor(coordinates: number[][][], metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][];\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class MultiPolygon implements IPixelMultiPolygonGeometry {\r\n        constructor(\r\n          coordinates: number[][][][],\r\n          fillRule: 'evenOdd' | 'nonZero',\r\n          metaData?: object,\r\n        );\r\n\r\n        events: IEventManager;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][][];\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Point implements IPixelPointGeometry {\r\n        constructor(position: number[] | null, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getCoordinates(): number[];\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Polygon implements IPixelPolygonGeometry {\r\n        constructor(coordinates: number[][][], fillRule: 'evenOdd' | 'nonZero', metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        contains(position: number[]): boolean;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][][];\r\n\r\n        getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n        getLength(): number;\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n\r\n      class Rectangle implements IPixelRectangleGeometry {\r\n        constructor(coordinates: number[][] | null, metaData?: object);\r\n\r\n        events: IEventManager;\r\n\r\n        equals(geometry: IPixelGeometry): boolean;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getClosest(anchorPosition: number[]): object;\r\n\r\n        getCoordinates(): number[][];\r\n\r\n        getMetaData(): object;\r\n\r\n        getType(): string;\r\n\r\n        scale(factor: number): IPixelGeometry;\r\n\r\n        shift(offset: number[]): IPixelGeometry;\r\n      }\r\n    }\r\n  }\r\n\r\n  namespace geometryEditor {\r\n    class Circle implements IGeometryEditor {\r\n      constructor(geometry: ICircleGeometry, options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): void;\r\n\r\n      stopDrawing(): vow.Promise;\r\n\r\n      stopEditing(): void;\r\n    }\r\n\r\n    class LineString implements IGeometryEditor {\r\n      constructor(geometry: ILineStringGeometry, options?: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getModel(): vow.Promise;\r\n\r\n      getModelSync(): model.RootLineString | null;\r\n\r\n      getView(): vow.Promise;\r\n\r\n      getViewSync(): view.Path | null;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): vow.Promise;\r\n\r\n      startFraming(): vow.Promise;\r\n\r\n      stopDrawing(): void;\r\n\r\n      stopEditing(): void;\r\n\r\n      stopFraming(): void;\r\n    }\r\n\r\n    namespace model {\r\n      class ChildLinearRing extends ChildLineString {}\r\n\r\n      class ChildLineString implements IGeometryEditorChildModel {\r\n        editor: IGeometryEditor;\r\n\r\n        events: IEventManager;\r\n\r\n        geometry: IBaseGeometry;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getEdgeModels(): Edge[];\r\n\r\n        getIndex(): number;\r\n\r\n        getParent(): IGeometryEditorModel;\r\n\r\n        getPixels(): number[];\r\n\r\n        getVertexModels(): ChildVertex[];\r\n\r\n        setIndex(index: number): void;\r\n\r\n        setPixels(pixels: number[]): void;\r\n\r\n        spliceVertices(start: number, deleteCount: number): number[][];\r\n      }\r\n\r\n      class ChildVertex implements IGeometryEditorChildModel {\r\n        editor: IGeometryEditor;\r\n\r\n        events: IEventManager;\r\n\r\n        geometry: IBaseGeometry;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getIndex(): number;\r\n\r\n        getNextVertex(): ChildVertex | null;\r\n\r\n        getParent(): IGeometryEditorModel;\r\n\r\n        getPixels(): number[];\r\n\r\n        getPrevVertex(): ChildVertex | null;\r\n\r\n        setGlobalPixels(pixels: number[]): void;\r\n\r\n        setIndex(index: number): void;\r\n\r\n        setNextVertex(nextVertex: ChildVertex): void;\r\n\r\n        setPixels(pixels: number[]): void;\r\n\r\n        setPrevVertex(prevVertex: ChildVertex): void;\r\n      }\r\n\r\n      class Edge implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getNextVertex(): ChildVertex | null;\r\n\r\n        getPixels(): number[];\r\n\r\n        getPrevVertex(): ChildVertex | null;\r\n\r\n        setNextVertex(nextVertex: ChildVertex): void;\r\n\r\n        setPrevVertex(prevVertex: ChildVertex): void;\r\n      }\r\n\r\n      class EdgeGeometry implements IGeometry {\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getBounds(): number[][] | null;\r\n\r\n        getMap(): Map | null;\r\n\r\n        getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n        getType(): string;\r\n\r\n        setMap(map: Map): void;\r\n      }\r\n\r\n      class RootLineString implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getPixels(): number[];\r\n\r\n        getVertexModels(): ChildVertex[];\r\n\r\n        spliceVertices(start: number, deleteCount: number): number[][];\r\n      }\r\n\r\n      class RootPolygon implements IGeometryEditorRootModel {\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getAllVerticesNumber(): number;\r\n\r\n        getPathModels(): ChildLinearRing[];\r\n\r\n        getPixels(): number[];\r\n\r\n        splicePaths(start: number, deleteCount: number): number[][];\r\n      }\r\n    }\r\n\r\n    class Point implements IGeometryEditor {\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): void;\r\n\r\n      stopDrawing(): vow.Promise;\r\n\r\n      stopEditing(): void;\r\n    }\r\n\r\n    class Polygon implements IGeometryEditor {\r\n      constructor(geometry: IPolygonGeometry, options: object);\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry;\r\n\r\n      options: IOptionManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getModel(): vow.Promise;\r\n\r\n      getModelSync(): model.RootPolygon | null;\r\n\r\n      getView(): vow.Promise;\r\n\r\n      getViewSync(): view.MultiPath | null;\r\n\r\n      startDrawing(): vow.Promise;\r\n\r\n      startEditing(): vow.Promise;\r\n\r\n      startFraming(): vow.Promise;\r\n\r\n      stopDrawing(): void;\r\n\r\n      stopEditing(): void;\r\n\r\n      stopFraming(): void;\r\n    }\r\n\r\n    namespace view {\r\n      class Edge {\r\n        getPlacemark(): GeoObject;\r\n      }\r\n\r\n      class MultiPath {\r\n        getEdgePlacemarks(): GeoObjectCollection;\r\n\r\n        getPathViews(): Path[];\r\n\r\n        getVertexPlacemarks(): GeoObjectCollection;\r\n      }\r\n\r\n      class Path {\r\n        getEdgePlacemarks(): GeoObjectCollection;\r\n\r\n        getEdgeViews(): Edge[];\r\n\r\n        getVertexPlacemarks(): GeoObjectCollection;\r\n\r\n        getVertexViews(): Vertex[];\r\n      }\r\n\r\n      class Vertex {\r\n        getPlacemark(): GeoObject;\r\n      }\r\n    }\r\n  }\r\n\r\n  namespace geoObject {\r\n    class Balloon implements IBalloonManager<GeoObject> {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<GeoObject>;\r\n\r\n      close(force?: boolean): Promise<GeoObject>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<GeoObject>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\r\n\r\n      setOptions(options: object): Promise<GeoObject>;\r\n\r\n      setPosition(position: number[]): Promise<GeoObject>;\r\n    }\r\n\r\n    class Hint implements IHintManager<GeoObject> {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<GeoObject>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<GeoObject>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<GeoObject>;\r\n\r\n      setOptions(options: object): Promise<GeoObject>;\r\n\r\n      setPosition(position: number[]): Promise<GeoObject>;\r\n    }\r\n\r\n    class Sequence implements IGeoObject, IGeoObjectSequence {\r\n      constructor(geoObject: GeoObject);\r\n\r\n      geometry: IGeometry | null;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      each(callback: (geoObject: IGeoObject) => void, context?: object): void;\r\n\r\n      get(index: number): IGeoObject;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      indexOf(geoObject: IGeoObject): number;\r\n    }\r\n  }\r\n\r\n  namespace layout {\r\n    namespace templateBased {\r\n      class Base implements ILayout {\r\n        constructor(data: object);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        getData(): object;\r\n\r\n        getParentElement(): HTMLElement;\r\n\r\n        getShape(): IShape | null;\r\n\r\n        isEmpty(): boolean;\r\n\r\n        setData(data: object): void;\r\n\r\n        setParentElement(parent: HTMLElement | null): this;\r\n\r\n        build(): void;\r\n\r\n        clear(): void;\r\n\r\n        onSublayoutSizeChange(sublayoutInfo: object, nodeSizeByContent: object): void;\r\n\r\n        rebuild(): void;\r\n      }\r\n    }\r\n\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace map {\r\n    namespace action {\r\n      class Manager implements IEventEmitter {\r\n        constructor(map: Map);\r\n\r\n        events: IEventManager;\r\n\r\n        breakTick(): void;\r\n\r\n        execute(action: IMapAction): void;\r\n\r\n        getCurrentState(): object;\r\n\r\n        getMap(): Map;\r\n\r\n        setCorrection(userFunction: () => void): void;\r\n\r\n        stop(): void;\r\n      }\r\n    }\r\n\r\n    namespace behavior {\r\n      class Manager implements ICustomizable, IEventEmitter, IParentOnMap {\r\n        constructor(map: Map, behaviors?: string[][] | string[], options?: object);\r\n\r\n        options: IOptionManager;\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        disable(behaviors: string[][] | string[] | string): this;\r\n\r\n        enable(behaviors: string[][] | string[] | string): this;\r\n\r\n        get(behaviorName: string): IBehavior;\r\n\r\n        isEnabled(behaviorName: string): boolean;\r\n      }\r\n    }\r\n\r\n    namespace layer {\r\n      class Manager implements ILayer, IMapObjectCollection {\r\n        constructor(\r\n          map: Map,\r\n          options?: {\r\n            trafficImageZIndex?: number;\r\n            trafficInfoZIndex?: number;\r\n            trafficJamZIndex?: number;\r\n          },\r\n        );\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getParent(): null | IControlParent;\r\n\r\n        setParent(parent: IControlParent): this;\r\n\r\n        add(object: object): this;\r\n\r\n        each(callback: (layer: ILayer) => void, context?: object): void;\r\n\r\n        getIterator(): IIterator;\r\n\r\n        remove(object: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getAll(): Array<Collection<Layer>>;\r\n      }\r\n    }\r\n\r\n    namespace margin {\r\n      class Accessor {\r\n        constructor(screenArea: object);\r\n\r\n        getArea(): object;\r\n\r\n        remove(): this;\r\n\r\n        setArea(screenArea: object): this;\r\n      }\r\n\r\n      class Manager {\r\n        constructor(map: Map);\r\n\r\n        addArea(screenArea: object): Accessor;\r\n\r\n        destroy(): this;\r\n\r\n        getMargin(): number[];\r\n\r\n        getOffset(): number[];\r\n\r\n        setDefaultMargin(margin: number[][] | number[] | number): void;\r\n      }\r\n    }\r\n\r\n    namespace pane {\r\n      class Manager {\r\n        constructor(map: Map);\r\n\r\n        append(key: string, pane: IPane): void;\r\n\r\n        destroy(): void;\r\n\r\n        get(key: string): IPane | null;\r\n\r\n        getLower(): string;\r\n\r\n        getUpper(): string;\r\n\r\n        insertBefore(key: string, pane: IPane, referenceKey: string): void;\r\n\r\n        remove(pane: IPane): void;\r\n      }\r\n    }\r\n\r\n    class Balloon implements IBalloonManager<Balloon> /* , IBalloonSharingManager */ {\r\n      constructor(map: Map);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<Balloon>;\r\n\r\n      close(force?: boolean): Promise<Balloon>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Balloon>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Balloon>;\r\n\r\n      setOptions(options: object): Promise<Balloon>;\r\n\r\n      setPosition(position: number[]): Promise<Balloon>;\r\n    }\r\n\r\n    class Container implements IDomEventEmitter {\r\n      constructor(parentElement: string | HTMLElement);\r\n\r\n      events: IEventManager;\r\n\r\n      enterFullscreen(): void;\r\n\r\n      exitFullscreen(): void;\r\n\r\n      fitToViewport(preservePixelPosition?: boolean): void;\r\n\r\n      getElement(): HTMLElement;\r\n\r\n      getOffset(): number[];\r\n\r\n      getParentElement(): HTMLElement;\r\n\r\n      getSize(): number[];\r\n\r\n      isFullscreen(): boolean;\r\n    }\r\n\r\n    class Converter {\r\n      constructor(map: Map);\r\n\r\n      globalToPage(globalPixelPoint: number[]): number[];\r\n\r\n      pageToGlobal(pagePixelPoint: number[]): number[];\r\n    }\r\n\r\n    class Copyrights {\r\n      constructor(map: Map);\r\n\r\n      add(\r\n        customCopyrights: string | HTMLElement | Array<string | HTMLElement>,\r\n      ): ICopyrightsAccessor;\r\n\r\n      addProvider(provider: ICopyrightsProvider): this;\r\n\r\n      get(point?: number[], zoom?: number): Promise<Array<string | HTMLElement>>;\r\n\r\n      getPromoLink(): string;\r\n\r\n      removeProvider(provider: ICopyrightsProvider): this;\r\n    }\r\n\r\n    class GeoObjects implements IGeoObjectCollection {\r\n      constructor(map: Map, options?: object);\r\n\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      add(child: IGeoObject | ObjectManager | Clusterer, index?: number): this;\r\n\r\n      each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n      get(index: number): IGeoObject;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      indexOf(object: IGeoObject): number;\r\n\r\n      remove(child: IGeoObject | ObjectManager): this;\r\n\r\n      removeAll(): this;\r\n\r\n      set(index: number, child: IGeoObject): this;\r\n\r\n      splice(index: number, length: number): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class Hint implements IHintManager<Hint> /* , IHintSharingManager */ {\r\n      constructor(map: Map);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<Hint>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(): boolean;\r\n\r\n      open(\r\n        position?: number[],\r\n        data?: object | string | HTMLElement,\r\n        options?: object,\r\n      ): Promise<Hint>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<Hint>;\r\n\r\n      setOptions(options: object): Promise<Hint>;\r\n\r\n      setPosition(position: number[]): Promise<Hint>;\r\n    }\r\n\r\n    class ZoomRange implements IEventEmitter {\r\n      constructor(map: Map, constraints: number[]);\r\n\r\n      events: IEventManager;\r\n\r\n      get(coords?: number[]): Promise<number[]>;\r\n\r\n      getCurrent(): number[];\r\n    }\r\n  }\r\n\r\n  namespace multiRouter {\r\n    namespace driving {\r\n      class Path implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        model: PathModel;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getSegments(): GeoObjectCollection;\r\n      }\r\n\r\n      class PathModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        properties: data.Manager;\r\n\r\n        route: RouteModel;\r\n\r\n        destroy(): void;\r\n\r\n        getSegments(): SegmentModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(pathJson: object): void;\r\n      }\r\n\r\n      class Route implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: IDataManager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        balloon: geoObject.Balloon;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getPaths(): GeoObjectCollection;\r\n      }\r\n\r\n      class RouteModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        multiRoute: MultiRouteModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getPaths(): PathModel[];\r\n\r\n        update(routeJson: object): void;\r\n\r\n        getType(): string;\r\n      }\r\n\r\n      class Segment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class SegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        destroy(): void;\r\n\r\n        getType(): string;\r\n\r\n        getViaPoints(): ViaPointModel[];\r\n\r\n        update(segmentJson: object): void;\r\n      }\r\n    }\r\n\r\n    namespace masstransit {\r\n      class Path implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: PathModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getSegmentMarkers(): GeoObjectCollection;\r\n\r\n        getSegments(): GeoObjectCollection;\r\n      }\r\n\r\n      class PathModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        properties: data.Manager;\r\n\r\n        route: RouteModel;\r\n\r\n        destroy(): void;\r\n\r\n        getSegments(): Array<TransferSegmentModel | TransportSegmentModel | WalkSegmentModel>;\r\n\r\n        getType(): string;\r\n\r\n        update(pathJson: object): void;\r\n      }\r\n\r\n      class Route implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        model: RouteModel;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        balloon: geoObject.Balloon;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n\r\n        getPaths(): GeoObjectCollection;\r\n      }\r\n\r\n      class RouteModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        multiRoute: MultiRouteModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getPaths(): PathModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(routeJson: object): void;\r\n      }\r\n\r\n      class StopModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.Point;\r\n\r\n        properties: data.Manager;\r\n\r\n        segment: TransportSegmentModel;\r\n\r\n        update(stopJson: object): void;\r\n      }\r\n\r\n      class TransferSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: TransferSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class TransferSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(segmentJson: object): void;\r\n\r\n        getType(): string;\r\n      }\r\n\r\n      class TransportSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: TransportSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class TransportSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getStops(): StopModel[];\r\n\r\n        getType(): string;\r\n\r\n        update(segmentJson: object): void;\r\n      }\r\n\r\n      class WalkSegment implements IGeoObject {\r\n        geometry: IGeometry | null;\r\n\r\n        properties: data.Manager;\r\n\r\n        state: IDataManager;\r\n\r\n        events: IEventManager;\r\n\r\n        options: IOptionManager;\r\n\r\n        model: WalkSegmentModel;\r\n\r\n        getOverlay(): Promise<IOverlay | null>;\r\n\r\n        getOverlaySync(): IOverlay | null;\r\n\r\n        getParent(): object | null;\r\n\r\n        setParent(parent: object): this;\r\n\r\n        getMap(): Map;\r\n      }\r\n\r\n      class WalkSegmentModel implements IEventEmitter {\r\n        events: IEventManager;\r\n\r\n        geometry: geometry.base.LineString;\r\n\r\n        path: PathModel;\r\n\r\n        properties: data.Manager;\r\n\r\n        destroy(): void;\r\n\r\n        getType(): string;\r\n      }\r\n    }\r\n\r\n    class EditorAddon implements ICustomizable, IEventEmitter {\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      state: data.Manager;\r\n\r\n      isActive(): boolean;\r\n\r\n      start(state: object): void;\r\n\r\n      stop(): void;\r\n    }\r\n\r\n    class MultiRoute implements IGeoObject {\r\n      constructor(model: MultiRouteModel | IMultiRouteModelJson, options?: IMultiRouteOptions);\r\n\r\n      editor: EditorAddon;\r\n\r\n      events: IEventManager;\r\n\r\n      geometry: IGeometry | null;\r\n\r\n      model: MultiRouteModel;\r\n\r\n      options: IOptionManager;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      getActiveRoute(): multiRouter.driving.Route | multiRouter.masstransit.Route | null;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getMap(): Map;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      getPixelBounds(): number[][] | null;\r\n\r\n      getRoutes(): GeoObjectCollection;\r\n\r\n      getViaPoints(): GeoObjectCollection;\r\n\r\n      getWayPoints(): GeoObjectCollection;\r\n\r\n      setActiveRoute(route: driving.Route | masstransit.Route | null): void;\r\n\r\n      setParent(parent: object): this;\r\n    }\r\n\r\n    interface IMultiRouteOptions {\r\n      activeRouteAutoSelection?: boolean;\r\n      boundsAutoApply?: boolean;\r\n      dragUpdateInterval?: string | number;\r\n      preventDragUpdate?: boolean;\r\n      useMapMargin?: boolean;\r\n      zoomMargin?: number[][] | number[] | number;\r\n\r\n      [index: string]: any;\r\n    }\r\n\r\n    class MultiRouteModel implements IEventEmitter {\r\n      constructor(referencePoints: IMultiRouteReferencePoint[], params?: IMultiRouteParams);\r\n\r\n      events: IEventManager;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getAllPoints(): Array<WayPointModel | ViaPointModel>;\r\n\r\n      getJson(): object;\r\n\r\n      getParams(): IMultiRouteParams;\r\n\r\n      getPoints(): Array<WayPointModel | ViaPointModel>;\r\n\r\n      getReferencePointIndexes(): object;\r\n\r\n      getReferencePoints(): IMultiRouteReferencePoint[];\r\n\r\n      getRoutes(): driving.RouteModel[] | masstransit.RouteModel[];\r\n\r\n      getViaPoints(): ViaPointModel[];\r\n\r\n      getWayPoints(): WayPointModel[];\r\n\r\n      setParams(params: IMultiRouteParams, extend?: boolean, clearRequests?: boolean): void;\r\n\r\n      setReferencePoints(\r\n        referencePoints: IMultiRouteReferencePoint[],\r\n        viaIndexes?: number[],\r\n        clearRequests?: boolean,\r\n      ): void;\r\n    }\r\n\r\n    class ViaPoint implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: data.Manager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      setParent(parent: object): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class ViaPointModel implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      geometry: geometry.base.Point;\r\n\r\n      multiRoute: MultiRouteModel;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getReferencePoint(): object;\r\n\r\n      getReferencePointIndex(): number;\r\n\r\n      setReferencePoint(referencePoint: object): void;\r\n\r\n      update(viaPointJson: object): void;\r\n    }\r\n\r\n    class WayPoint implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: data.Manager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      model: WayPointModel;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): object | null;\r\n\r\n      setParent(parent: object): this;\r\n\r\n      getMap(): Map;\r\n    }\r\n\r\n    class WayPointModel implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      geometry: geometry.base.Point;\r\n\r\n      multiRoute: MultiRouteModel;\r\n\r\n      properties: data.Manager;\r\n\r\n      destroy(): void;\r\n\r\n      getReferencePoint(): object;\r\n\r\n      getReferencePointIndex(): number;\r\n\r\n      setReferencePoint(referencePoint: object): void;\r\n\r\n      update(wayPointJson: object): void;\r\n    }\r\n  }\r\n\r\n  namespace option {\r\n    class Manager implements IOptionManager {\r\n      constructor(options?: object, parent?: IOptionManager, name?: string);\r\n\r\n      events: IEventManager;\r\n\r\n      get(key: string, defaultValue?: object): object;\r\n\r\n      getAll(): object;\r\n\r\n      getName(): string;\r\n\r\n      getNative(key: string): object;\r\n\r\n      resolve(key: string, name?: string): object;\r\n\r\n      set(key: object | string, value?: object | number | string | null | undefined): this;\r\n\r\n      unset(keys: string[][] | string[] | string): this;\r\n\r\n      unsetAll(): this;\r\n\r\n      setName(name: string): void;\r\n\r\n      getParent(): null | IOptionManager;\r\n\r\n      setParent(parent: IOptionManager): this;\r\n\r\n      freeze(): IFreezable;\r\n\r\n      isFrozen(): boolean;\r\n\r\n      unfreeze(): IFreezable;\r\n\r\n      add(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      group(): IEventGroup;\r\n\r\n      remove(\r\n        types: string[][] | string[] | string,\r\n        callback: (event: object | IEvent) => void,\r\n        context?: object,\r\n        priority?: number,\r\n      ): this;\r\n\r\n      fire(type: string, eventobject: object | IEvent): this;\r\n    }\r\n\r\n    const presetStorage: util.Storage;\r\n  }\r\n\r\n  namespace panorama {\r\n    type Layer = 'yandex#panorama' | 'yandex#airPanorama';\r\n\r\n    class Base implements IPanorama {\r\n      static createPanorama(params: {\r\n        angularBBox: number[];\r\n        coordSystem?: ICoordSystem;\r\n        name?: string;\r\n        position: number[];\r\n        tilesLevels: IPanoramaTileLevel[];\r\n        tileSize: number[];\r\n      }): IPanorama;\r\n\r\n      static getMarkerPositionFromDirection(\r\n        panorama: IPanorama,\r\n        direction: number[],\r\n        distance: number,\r\n      ): number[];\r\n\r\n      getAngularBBox(): number[];\r\n\r\n      getConnectionArrows(): IPanoramaConnectionArrow[];\r\n\r\n      getConnectionMarkers(): IPanoramaConnectionMarker[];\r\n\r\n      getConnections(): IPanoramaConnectionMarker[];\r\n\r\n      getCoordSystem(): ICoordSystem;\r\n\r\n      getDefaultDirection(): number[];\r\n\r\n      getDefaultSpan(): number[];\r\n\r\n      getGraph(): IPanoramaGraph | null;\r\n\r\n      getMarkers(): IPanoramaMarker[];\r\n\r\n      getName(): string;\r\n\r\n      getPosition(): number[];\r\n\r\n      getThoroughfares(): IPanoramaConnectionArrow[];\r\n\r\n      getTileLevels(): IPanoramaTileLevel[];\r\n\r\n      getTileSize(): number[];\r\n\r\n      validate(): void;\r\n    }\r\n\r\n    function createPlayer(\r\n      element: HTMLElement | string,\r\n      point: number[],\r\n      options?: {\r\n        direction?: number[] | string;\r\n        layer?: Layer;\r\n        span?: number[] | string;\r\n      },\r\n    ): Promise<Player>;\r\n\r\n    function isSupported(): boolean;\r\n\r\n    function locate(point: number[], options?: { layer?: Layer }): Promise<IPanorama[]>;\r\n\r\n    class Manager implements IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      closePlayer(): void;\r\n\r\n      disableLookup(): void;\r\n\r\n      enableLookup(): void;\r\n\r\n      getPlayer(): Player;\r\n\r\n      isLookupEnabled(): boolean;\r\n\r\n      openPlayer(panorama: IPanorama[] | number): Promise<void>;\r\n    }\r\n\r\n    interface IPlayerOptions {\r\n      autoFitToViewport?: 'none' | 'ifNull' | 'always';\r\n      controls?: string[];\r\n      direction?: number[] | string;\r\n      hotkeysEnabled?: boolean;\r\n      scrollZoomBehavior?: boolean;\r\n      span?: number[] | string;\r\n      suppressMapOpenBlock?: boolean;\r\n    }\r\n\r\n    class Player implements IEventEmitter {\r\n      constructor(element: HTMLElement | string, panorama: IPanorama, options?: IPlayerOptions);\r\n\r\n      events: IEventManager;\r\n\r\n      destroy(): void;\r\n\r\n      fitToViewport(): void;\r\n\r\n      getDirection(): number[];\r\n\r\n      getPanorama(): IPanorama;\r\n\r\n      getSpan(): number[];\r\n\r\n      lookAt(point: number[]): this;\r\n\r\n      moveTo(\r\n        point: number[],\r\n        options?: {\r\n          direction?: number[] | string;\r\n          layer?: Layer;\r\n          span?: number[] | string;\r\n        },\r\n      ): Promise<void>;\r\n\r\n      setDirection(direction: number[] | string): this;\r\n\r\n      setPanorama(panorama: IPanorama): this;\r\n\r\n      setSpan(span: number[] | string): this;\r\n    }\r\n  }\r\n\r\n  namespace router {\r\n    class Editor implements ICustomizable, IEventEmitter {\r\n      options: IOptionManager;\r\n\r\n      events: IEventManager;\r\n\r\n      start(options?: {\r\n        addViaPoints?: boolean;\r\n        addWayPoints?: boolean;\r\n        editViaPoints?: boolean;\r\n        editWayPoints?: boolean;\r\n        removeViaPoints?: boolean;\r\n        removeWayPoints?: boolean;\r\n      }): void;\r\n\r\n      stop(): void;\r\n    }\r\n\r\n    abstract class Route implements IGeoObject {\r\n      geometry: IGeometry | null;\r\n\r\n      properties: IDataManager;\r\n\r\n      state: IDataManager;\r\n\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      editor: Editor;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getParent(): null | IControlParent;\r\n\r\n      setParent(parent: IControlParent): this;\r\n\r\n      getMap(): Map;\r\n\r\n      getHumanJamsTime(): string;\r\n\r\n      getHumanLength(): string;\r\n\r\n      getHumanTime(): string;\r\n\r\n      getJamsTime(): number;\r\n\r\n      getLength(): number;\r\n\r\n      getPaths(): GeoObjectCollection;\r\n\r\n      getTime(): number;\r\n\r\n      getViaPoints(): GeoObjectCollection;\r\n\r\n      getWayPoints(): GeoObjectCollection;\r\n    }\r\n  }\r\n\r\n  namespace shape {\r\n    class Circle implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelCircleGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class LineString implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelLineStringGeometry,\r\n        params?: {\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class MultiPolygon implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelMultiPolygonGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class Polygon implements IShape {\r\n      constructor(\r\n        pixelGeometry: IPixelPolygonGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n\r\n    class Rectangle implements IShape {\r\n      constructor(\r\n        geometry: IPixelRectangleGeometry,\r\n        params?: {\r\n          fill?: boolean;\r\n          outline?: boolean;\r\n          strokeWidth?: number;\r\n        },\r\n      );\r\n\r\n      contains(position: number[]): boolean;\r\n\r\n      equals(shape: IShape): boolean;\r\n\r\n      getBounds(): number[][] | null;\r\n\r\n      getGeometry(): IPixelGeometry;\r\n\r\n      getType(): string;\r\n\r\n      scale(factor: number): IShape;\r\n\r\n      shift(offset: number[]): IShape;\r\n    }\r\n  }\r\n\r\n  class Balloon extends Popup<Balloon> implements IBaloon<Balloon>, IBalloonManager<Balloon> {\r\n    constructor(map: Map, options?: IBalloonOptions);\r\n\r\n    getData(): object;\r\n\r\n    close(force?: boolean): Promise<Balloon>;\r\n\r\n    getParent(): Balloon | null;\r\n\r\n    setParent(parent: Balloon): this;\r\n\r\n    autoPan(): Promise<Balloon>;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    unfreeze(): IFreezable;\r\n\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    group(): IEventGroup;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    fire(type: string, eventobject: object | IEvent): this;\r\n\r\n    destroy(): void;\r\n\r\n    getOptions(): IOptionManager | null;\r\n\r\n    setOptions(options: object): Promise<Balloon>;\r\n  }\r\n\r\n  interface IBalloonOptions {\r\n    autoPan?: boolean;\r\n    autoPanCheckZoomRange?: boolean;\r\n    autoPanDuration?: number;\r\n    autoPanMargin?: number[][] | number[] | number;\r\n    autoPanUseMapMargin?: boolean;\r\n    closeButton?: boolean;\r\n    contentLayout?: IClassConstructor<ILayout> | string;\r\n    layout?: IClassConstructor<ILayout> | string;\r\n    maxHeight?: number;\r\n    maxWidth?: number;\r\n    minHeight?: number;\r\n    minWidth?: number;\r\n    offset?: number[];\r\n    pane?: string;\r\n    panelContentLayout?: IClassConstructor<ILayout> | string;\r\n    panelMaxHeightRatio?: number;\r\n    panelMaxMapArea?: number;\r\n    shadow?: boolean;\r\n    shadowLayout?: IClassConstructor<ILayout> | string;\r\n    shadowOffset?: number[];\r\n  }\r\n\r\n  class Circle implements GeoObject<ICircleGeometry> {\r\n    constructor(\r\n      geometry: ICircleGeometry[][][][] | number[][] | object,\r\n      properties?: object | IDataManager,\r\n      options?: ICircleOptions,\r\n    );\r\n\r\n    balloon: geoObject.Balloon;\r\n\r\n    editor: IGeometryEditor;\r\n\r\n    hint: geoObject.Hint;\r\n\r\n    events: event.Manager;\r\n\r\n    options: option.Manager;\r\n\r\n    properties: data.Manager;\r\n\r\n    state: data.Manager;\r\n\r\n    geometry: ICircleGeometry | null;\r\n\r\n    indices: ArrayBuffer;\r\n\r\n    vertices: ArrayBuffer;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface ICircleOptions {\r\n    circleOverlay?:\r\n      | string\r\n      | ((geometry: IPixelCircleGeometry, data: object, options: object) => Promise<IOverlay>);\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: 'stretch' | 'tile';\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: InteractivityModelKey;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    strokeColor?: string[][] | string[] | string;\r\n    strokeOpacity?: number[][] | number[] | number;\r\n    strokeStyle?: string[][][] | object[][] | string[] | object[] | string | object;\r\n    strokeWidth?: number[][] | number[] | number;\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Clusterer implements IChildOnMap, ICustomizable, IEventEmitter, IParentOnMap {\r\n    constructor(options?: IClustererOptions);\r\n\r\n    events: IEventManager;\r\n\r\n    options: option.Manager;\r\n\r\n    balloon: clusterer.Balloon;\r\n\r\n    hint: clusterer.Hint;\r\n\r\n    add(objects: IGeoObject | IGeoObject[]): this;\r\n\r\n    createCluster(center: number[], geoObjects: IGeoObject[]): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getClusters(): IGeoObject[];\r\n\r\n    getGeoObjects(): IGeoObject[];\r\n\r\n    getMap(): Map;\r\n\r\n    getObjectState(geoObject: IGeoObject): { isShown: boolean; cluster: any; isClustered: boolean };\r\n\r\n    getParent(): IParentOnMap | null;\r\n\r\n    remove(objects: IGeoObject | IGeoObject[]): this;\r\n\r\n    removeAll(): this;\r\n\r\n    setParent(parent: IControlParent): this;\r\n  }\r\n\r\n  interface IClustererOptions {\r\n    gridSize?: number;\r\n    groupByCoordinates?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    margin?: number[][] | number[] | number;\r\n    maxZoom?: number[] | number;\r\n    minClusterSize?: number;\r\n    preset?: PresetKey;\r\n    showInAlphabeticalOrder?: boolean;\r\n    useMapMargin?: boolean;\r\n    viewportMargin?: number[][] | number[] | number;\r\n    zoomMargin?: number[][] | number[] | number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  class ClusterPlacemark implements IGeoObject, collection.Item {\r\n    constructor(\r\n      geometry: number[] | object | IPointGeometry,\r\n      properties: IClusterPlacemarkProperties,\r\n      options?: IClusterPlacemarkOptions,\r\n    );\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    properties: IDataManager;\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    state: data.Manager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    onAddToMap(map: Map): void;\r\n\r\n    onRemoveFromMap(oldMap: Map): void;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getGeoObjects(): IGeoObject[];\r\n  }\r\n\r\n  interface IClusterPlacemarkProperties extends IDataManager {\r\n    geoObjects: IGeoObject[];\r\n  }\r\n\r\n  interface IClusterPlacemarkOptions {\r\n    balloonContentLayout?:\r\n      | 'cluster#balloonTwoColumns'\r\n      | 'cluster#balloonCarousel'\r\n      | 'cluster#balloonAccordion'\r\n      | string\r\n      | IClassConstructor<ILayout>;\r\n    balloonContentLayoutHeight?: number;\r\n    balloonContentLayoutWidth?: number;\r\n    balloonItemContentLayout?: ILayout | string;\r\n    balloonPanelContentLayout?: string | IClassConstructor<ILayout>;\r\n    cursor?: string;\r\n    disableClickZoom?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    iconColor?: string;\r\n    iconContentLayout?: string | IClassConstructor<ILayout>;\r\n    iconLayout?: string | IClassConstructor<ILayout>;\r\n    icons?: Array<{\r\n      href: string;\r\n      size: number[];\r\n      ooffset: number[];\r\n      shape?: IShape | IGeometryJson;\r\n    }>;\r\n    iconShape?: IGeometryJson;\r\n    interactivityModel?: InteractivityModelKey;\r\n    numbers?: number[];\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Collection<T = {}> implements ICollection, collection.Item {\r\n    constructor(options?: object);\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    add(object: object): this;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    remove(object: object): this;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    onAddToMap(map: Map): void;\r\n\r\n    onRemoveFromMap(oldMap: Map): void;\r\n\r\n    filter(filterFunction: (object: object) => boolean): object[];\r\n\r\n    get(index: number): object;\r\n\r\n    getAll(): T[];\r\n\r\n    getLength(): number;\r\n\r\n    indexOf(childToFind: object): number;\r\n\r\n    removeAll(): this;\r\n  }\r\n\r\n  class Event<OriginalEvent = {}, Target = {}> implements IEvent<OriginalEvent, Target> {\r\n    constructor(originalEvent: object, sourceEvent: IEvent);\r\n\r\n    originalEvent: {\r\n      target: Target;\r\n      [key: string]: any;\r\n    };\r\n\r\n    allowMapEvent(): void;\r\n\r\n    callMethod(name: string): void;\r\n\r\n    get(name: string): any;\r\n\r\n    getSourceEvent(): IEvent<OriginalEvent> | null;\r\n\r\n    isDefaultPrevented(): boolean;\r\n\r\n    isImmediatePropagationStopped(): boolean;\r\n\r\n    isMapEventAllowed(): boolean;\r\n\r\n    isPropagationStopped(): boolean;\r\n\r\n    preventDefault(): boolean;\r\n\r\n    stopImmediatePropagation(): boolean;\r\n\r\n    stopPropagation(): boolean;\r\n  }\r\n\r\n  class GeoObject<T = IGeometry, Target = {}> implements IGeoObject<T> {\r\n    constructor(feature?: IGeoObjectFeature, options?: IGeoObjectOptions);\r\n\r\n    geometry: T | null;\r\n\r\n    balloon: geoObject.Balloon;\r\n\r\n    editor: IGeometryEditor;\r\n\r\n    hint: geoObject.Hint;\r\n\r\n    events: event.Manager<Target>;\r\n\r\n    options: option.Manager;\r\n\r\n    properties: data.Manager;\r\n\r\n    state: data.Manager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface IGeoObjectFeature {\r\n    geometry?: IGeometry | IGeometryJson;\r\n    properties?: IDataManager | object;\r\n  }\r\n\r\n  interface IGeoObjectOptions extends ICircleOptions {\r\n    iconCaptionMaxWidth?: number;\r\n    iconColor?: string;\r\n    iconContentLayout?: string | IClassConstructor<ILayout>;\r\n    iconContentOffset?: number[];\r\n    iconContentPadding?: number[];\r\n    iconContentSize?: number[];\r\n    iconImageClipRect?: number[][];\r\n    iconImageHref?: string;\r\n    iconImageOffset?: number[];\r\n    iconImageShape?: IShape | null;\r\n    iconImageSize?: number[];\r\n    iconLayout?: string | IClassConstructor<ILayout>;\r\n    iconMaxHeight?: number;\r\n    iconMaxWidth?: number;\r\n    iconOffset?: number[];\r\n    iconShadow?: boolean;\r\n    iconShadowImageClipRect?: number[][];\r\n    iconShadowImageHref?: string;\r\n    iconShadowImageOffset?: number[];\r\n    iconShadowImageSize?: number[];\r\n    iconShadowLayout?: string | IClassConstructor<ILayout>;\r\n    iconShadowOffset?: number[];\r\n    lineStringOverlay?: OverlayKey;\r\n    pointOverlay?: OverlayKey;\r\n    polygonOverlay?: OverlayKey;\r\n    preset?: string;\r\n    rectangleOverlay?: OverlayKey;\r\n    setMapCursorInDragging?: boolean;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  class GeoObjectCollection implements IGeoObject, IGeoObjectCollection {\r\n    constructor(\r\n      feature?: {\r\n        children?: IGeoObject[];\r\n        geometry?: IGeometry | object;\r\n        properties?: IDataManager | object;\r\n      },\r\n      options?: object,\r\n    );\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    properties: IDataManager;\r\n\r\n    state: IDataManager;\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    getMap(): Map;\r\n\r\n    add(child: IGeoObject, index?: number): this;\r\n\r\n    each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(object: IGeoObject): number;\r\n\r\n    remove(child: IGeoObject): this;\r\n\r\n    removeAll(): this;\r\n\r\n    set(index: number, child: IGeoObject): this;\r\n\r\n    splice(index: number, length: number): this;\r\n\r\n    toArray(): IGeoObject[];\r\n  }\r\n\r\n  interface ILayerOptions {\r\n    brightness?: number;\r\n    notFoundTile?: string | null;\r\n    pane?: IPane | string;\r\n    projection?: any;\r\n    tileSize?: number[][];\r\n    tileTransparent?: boolean;\r\n    zIndex?: number;\r\n  }\r\n\r\n  class Layer implements ILayer, IParentOnMap, IPositioningContext {\r\n    constructor(\r\n      tileUrlTemplate: string | ((tileNumber: number[], tileZoom: number) => string),\r\n      options?: ILayerOptions,\r\n    );\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    clientPixelsToNumber(clientPixelPoint: number, tileZoom: number): number[];\r\n\r\n    fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n    getBrightness?(): number;\r\n\r\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    getMap(): Map;\r\n\r\n    getPane(): IPane;\r\n\r\n    getParent(): null | IControlParent;\r\n\r\n    getTileSize(zoom: number): number[];\r\n\r\n    getTileStatus(): { readyTileNumber: number; totalTileNumber: number };\r\n\r\n    getTileUrl(tileNumber: number[], tileZoom: number): string | null;\r\n\r\n    getTileUrlTemplate(): string | any;\r\n\r\n    getZoom(): number;\r\n\r\n    getZoomRange?(point: number[]): Promise<number[]>;\r\n\r\n    numberToClientBounds(tileNumber: number[], tileZoom: number): number[][];\r\n\r\n    restrict(num: number[], tileZoom: number): number[] | null;\r\n\r\n    setParent(parent: IControlParent): this;\r\n\r\n    setTileUrlTemplate(tileUrlTemplate: string | any): void;\r\n\r\n    toClientPixels(globalPixelPoint: number[]): number[];\r\n\r\n    update(updateBounds: any): void;\r\n\r\n    getAlias(): string;\r\n\r\n    getElement(): HTMLElement;\r\n  }\r\n\r\n  class Map implements IDomEventEmitter {\r\n    constructor(parentElement: HTMLElement | string, state: IMapState, options?: IMapOptions);\r\n\r\n    action: map.action.Manager;\r\n\r\n    balloon: map.Balloon;\r\n\r\n    behaviors: map.behavior.Manager;\r\n\r\n    container: map.Container;\r\n\r\n    controls: control.Manager;\r\n\r\n    converter: map.Converter;\r\n\r\n    copyrights: map.Copyrights;\r\n\r\n    cursors: util.cursor.Manager;\r\n\r\n    events: event.Manager;\r\n\r\n    geoObjects: map.GeoObjects;\r\n\r\n    hint: map.Hint;\r\n\r\n    layers: map.layer.Manager;\r\n\r\n    margin: map.margin.Manager;\r\n\r\n    options: option.Manager;\r\n\r\n    panes: map.pane.Manager;\r\n\r\n    zoomRange: map.ZoomRange;\r\n\r\n    destroy(): void;\r\n\r\n    getBounds(options?: IMapMarginOptions): number[][];\r\n\r\n    getCenter(options?: IMapMarginOptions): number[];\r\n\r\n    getGlobalPixelCenter(options?: IMapMarginOptions): number[];\r\n\r\n    getPanoramaManager(): Promise<panorama.Manager>;\r\n\r\n    getType(): string | MapType;\r\n\r\n    getZoom(): number;\r\n\r\n    panTo(center: number[] | object[], options?: IMapPanOptions): Promise<void>;\r\n\r\n    setBounds(bounds: number[][], options?: IMapBoundsOptions): Promise<void>;\r\n\r\n    setCenter(center: number[], zoom?: number, options?: IMapPositionOptions): Promise<void>;\r\n\r\n    setGlobalPixelCenter(\r\n      globalPixelCenter: number[],\r\n      zoom?: number,\r\n      options?: IMapPositionOptions,\r\n    ): Promise<void>;\r\n\r\n    setType(type: string | MapType, options?: IMapCheckZoomRangeOptions): Promise<void>;\r\n\r\n    setZoom(zoom: number, options?: IMapZoomOptions): Promise<void>;\r\n  }\r\n\r\n  interface IMapMarginOptions {\r\n    useMapMargin?: boolean;\r\n  }\r\n\r\n  interface IMapCheckZoomRangeOptions {\r\n    checkZoomRange?: boolean;\r\n  }\r\n\r\n  interface IMapZoomOptions extends IMapMarginOptions, IMapCheckZoomRangeOptions {\r\n    duration?: number;\r\n  }\r\n\r\n  interface IMapPositionOptions extends IMapZoomOptions {\r\n    timingFunction?: string;\r\n  }\r\n\r\n  interface IMapBoundsOptions extends IMapPositionOptions {\r\n    preciseZoom?: boolean;\r\n    zoomMargin?: number[][] | number[];\r\n  }\r\n\r\n  interface IMapPanOptions extends IMapPositionOptions {\r\n    delay?: number;\r\n    flying?: boolean;\r\n    safe?: boolean;\r\n  }\r\n\r\n  class MapType {\r\n    constructor(name: string, layers: Array<IClassConstructor<Layer> | string>);\r\n  }\r\n\r\n  interface IMapState {\r\n    behaviors?: string[];\r\n    bounds?: number[][];\r\n    center?: number[];\r\n    controls?: ControlKey[];\r\n    margin?: number | number[];\r\n    type?: 'yandex#map' | 'yandex#satellite' | 'yandex#hybrid' | MapType;\r\n    zoom?: number;\r\n  }\r\n\r\n  interface IMapOptions {\r\n    autoFitToViewport?: 'none' | 'ifNull' | 'always';\r\n    avoidFractionalZoom?: boolean;\r\n    exitFullscreenByEsc?: boolean;\r\n    fullscreenZIndex?: number;\r\n    mapAutoFocus?: boolean;\r\n    maxAnimationZoomDifference?: number;\r\n    maxZoom?: number;\r\n    minZoom?: number;\r\n    nativeFullscreen?: boolean;\r\n    projection?: IProjection;\r\n    restrictMapArea?: boolean | number[][];\r\n    suppressMapOpenBlock?: boolean;\r\n    suppressObsoleteBrowserNotifier?: boolean;\r\n    yandexMapAutoSwitch?: boolean;\r\n    yandexMapDisablePoiInteractivity?: boolean;\r\n\r\n    copyrightLogoVisible?: boolean;\r\n    copyrightProvidersVisible?: boolean;\r\n    copyrightUaVisible?: boolean;\r\n  }\r\n\r\n  class Placemark extends GeoObject<IPointGeometry, geometry.Point> {\r\n    constructor(\r\n      geometry: number[] | object | IPointGeometry,\r\n      properties: IPlacemarkProperties | IDataManager,\r\n      options?: IPlacemarkOptions,\r\n    );\r\n  }\r\n\r\n  interface IPlacemarkProperties {\r\n    iconContent?: string;\r\n    iconCaption?: string;\r\n    hintContent?: string;\r\n    balloonContent?: string;\r\n    balloonContentHeader?: string;\r\n    balloonContentBody?: string;\r\n    balloonContentFooter?: string;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  interface IPlacemarkOptions {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    hideIconOnBalloonOpen?: boolean;\r\n    iconColor?: string;\r\n    iconLayout?: 'default#image' | 'default#imageWithContent' | string;\r\n    iconOffset?: number[];\r\n    iconShape?: IGeometryJson | null;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: string;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    pane?: string;\r\n    pointOverlay?: string;\r\n    preset?: string;\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  class Polygon extends GeoObject<IPolygonGeometry> {\r\n    constructor(\r\n      geometry: number[][][] | object | IPolygonGeometry,\r\n      properties?: object | IDataManager,\r\n      options?: IPolygonOptions,\r\n    );\r\n  }\r\n\r\n  interface IPolygonOptions {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    fill?: boolean;\r\n    fillColor?: string;\r\n    fillImageHref?: string;\r\n    fillMethod?: 'stretch' | 'tile';\r\n    fillOpacity?: number;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: string;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    outline?: boolean;\r\n    pane?: string;\r\n    polygonOverlay?: string;\r\n    strokeColor?: string | string[];\r\n    strokeOpacity?: number | number[];\r\n    strokeStyle?: string | string[] | object | object[];\r\n    strokeWidth?: number | number[];\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Polyline extends GeoObject<ILineStringGeometry> {\r\n    constructor(\r\n      geometry: number[][] | object | ILineStringGeometry,\r\n      properties?: object | IDataManager,\r\n      options?: IPolylineOptions,\r\n    );\r\n  }\r\n\r\n  interface IPolylineOptions {\r\n    cursor?: string;\r\n    draggable?: boolean;\r\n    hasBalloon?: boolean;\r\n    hasHint?: boolean;\r\n    interactiveZIndex?: boolean;\r\n    interactivityModel?: string;\r\n    lineStringOverlay?: () => object | string;\r\n    opacity?: number;\r\n    openBalloonOnClick?: boolean;\r\n    openEmptyBalloon?: boolean;\r\n    openEmptyHint?: boolean;\r\n    openHintOnHover?: boolean;\r\n    pane?: string;\r\n    strokeColor?: string | string[];\r\n    strokeOpacity?: number | number[];\r\n    strokeStyle?: string | string[] | object | object[];\r\n    strokeWidth?: number | number[];\r\n    syncOverlayInit?: boolean;\r\n    useMapMarginInDragging?: boolean;\r\n    visible?: boolean;\r\n    zIndex?: number;\r\n    zIndexActive?: number;\r\n    zIndexDrag?: number;\r\n    zIndexHover?: number;\r\n  }\r\n\r\n  class Popup<T> implements IPopup<T> {\r\n    constructor(map: Map, options?: IPopupOptions);\r\n\r\n    options: IOptionManager;\r\n\r\n    events: IEventManager;\r\n\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    getData(): object;\r\n\r\n    getOverlay(): Promise<IOverlay>;\r\n\r\n    getOverlaySync(): IOverlay;\r\n\r\n    getPosition(): number[];\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPopupOptions {\r\n    closeTimeout?: number;\r\n    interactivityModel?: InteractivityModelKey;\r\n    openTimeout?: number;\r\n    pane?: IPane | string;\r\n    projection?: IProjection;\r\n    zIndex?: number;\r\n  }\r\n\r\n  function ready(\r\n    successCallback?: () => any | IReadyobject,\r\n    errorCallback?: () => any,\r\n    context?: object,\r\n  ): Promise<void>;\r\n\r\n  interface IReadyobject {\r\n    require?: string[];\r\n    context?: object;\r\n\r\n    successCallback?(): void;\r\n\r\n    errorCallback?(): void;\r\n  }\r\n\r\n  namespace templateLayoutFactory {\r\n    function createClass(\r\n      template: string,\r\n      overrides?: object,\r\n      staticMethods?: object,\r\n    ): IClassConstructor<layout.templateBased.Base>;\r\n  }\r\n\r\n  namespace util {\r\n    namespace cursor {\r\n      class Accessor {\r\n        constructor(key: string);\r\n\r\n        getKey(): string;\r\n\r\n        remove(): void;\r\n\r\n        setKey(): void;\r\n      }\r\n\r\n      class Manager {\r\n        constructor(element: HTMLElement);\r\n\r\n        push(key: string): Accessor;\r\n      }\r\n    }\r\n\r\n    class Storage {\r\n      add(key: string, object: object): this;\r\n\r\n      get(key: string | object): object | string;\r\n\r\n      remove(key: string): object;\r\n    }\r\n  }\r\n\r\n  namespace vow {\r\n    class Deferred {\r\n      promise(): Promise;\r\n\r\n      reject(reason: object): void;\r\n\r\n      resolve(value: object): void;\r\n    }\r\n\r\n    class Promise {\r\n      constructor(resolver?: () => void);\r\n\r\n      done(\r\n        onFulfilled?: () => void,\r\n        onRejected?: () => void,\r\n        onProgress?: () => void,\r\n        ctx?: object,\r\n      ): void;\r\n\r\n      spread(onFulfilled?: () => void, onRejected?: () => void, ctx?: object): Promise;\r\n\r\n      then(\r\n        onFulfilled?: () => void,\r\n        onRejected?: () => void,\r\n        onProgress?: () => void,\r\n        ctx?: object,\r\n      ): Promise;\r\n\r\n      valueOf(): object;\r\n    }\r\n\r\n    function resolve(value: any): any;\r\n  }\r\n\r\n  /* Interfaces */\r\n\r\n  interface IBaloon<T> extends IPopup<T>, ICustomizable, IChild<T>, IFreezable {\r\n    autoPan(): Promise<T>;\r\n  }\r\n\r\n  interface IBalloonManager<T> extends IPopupManager<T> {\r\n    autoPan(): Promise<T>;\r\n  }\r\n\r\n  interface IBaseGeometry extends IEventEmitter {\r\n    getBounds(): number[][] | null;\r\n\r\n    getType(): string;\r\n  }\r\n\r\n  interface IBaseLineStringGeometry extends IBaseGeometry, ILineStringGeometryAccess {}\r\n\r\n  interface IBasePointGeometry extends IBaseGeometry, IPointGeometryAccess {}\r\n\r\n  interface IBasePolygonGeometry extends IBaseGeometry, IPolygonGeometryAccess {}\r\n\r\n  interface IBehavior extends IChildOnMap, ICustomizable {\r\n    disable(): void;\r\n\r\n    enable(): void;\r\n\r\n    isEnabled(): boolean;\r\n  }\r\n\r\n  interface IChild<T> extends IEventEmitter {\r\n    getParent(): object | null;\r\n\r\n    setParent(parent: object | null): this;\r\n  }\r\n\r\n  interface IChildOnMap extends IChild<IControlParent> {}\r\n\r\n  interface ICircleGeometry extends ICircleGeometryAccess, IGeometry {}\r\n\r\n  interface ICircleGeometryAccess extends IFreezable {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[] | null;\r\n\r\n    getRadius(): number;\r\n\r\n    setCoordinates(coordinates: number[] | null): this;\r\n\r\n    setRadius(radius: number): this;\r\n  }\r\n\r\n  interface ICollection extends IEventEmitter {\r\n    add(object: object): this;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    remove(object: object): this;\r\n  }\r\n\r\n  interface IControl extends IChildOnMap {}\r\n\r\n  interface IControlParent extends IParentOnMap {\r\n    getChildElement(child: IControl): Promise<HTMLElement>;\r\n  }\r\n\r\n  interface ICoordSystem {\r\n    getDistance(point1: number[], point2: number[]): number;\r\n\r\n    solveDirectProblem(startPoint: number[], direction: number[], distance: number): object;\r\n\r\n    solveInverseProblem(\r\n      startPoint: number[],\r\n      endPoint: number[],\r\n      reverseDirection?: boolean,\r\n    ): object;\r\n  }\r\n\r\n  interface ICopyrightsAccessor extends ICopyrightsProvider {}\r\n\r\n  interface ICopyrightsProvider extends IEventEmitter {\r\n    getCopyrights(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    remove(): void;\r\n\r\n    setCopyrights(copyrights: string | HTMLElement | Array<string | HTMLElement>): void;\r\n  }\r\n\r\n  interface ICustomizable extends IEventEmitter {\r\n    options: IOptionManager;\r\n  }\r\n\r\n  interface IDataManager extends IEventEmitter {\r\n    set(key: object | string, value?: object | number | string | null | undefined): this;\r\n\r\n    get(path: string, defaultValue?: object): object;\r\n  }\r\n\r\n  interface IDomEventEmitter extends IEventEmitter {}\r\n\r\n  interface IEvent<OriginalEvent = {}, Target = {}> {\r\n    originalEvent: {\r\n      target: Target;\r\n      [key: string]: any;\r\n    };\r\n\r\n    allowMapEvent(): void;\r\n\r\n    callMethod(name: string): void;\r\n\r\n    get<T extends {}, K extends keyof T = keyof T>(name: K): T[K];\r\n\r\n    get(name: 'type'): string;\r\n\r\n    get(name: 'objectId'): string | undefined;\r\n\r\n    get(name: 'newZoom' | 'oldZoom'): number | undefined;\r\n\r\n    get(name: string): any;\r\n\r\n    getSourceEvent(): IEvent<OriginalEvent> | null;\r\n\r\n    isDefaultPrevented(): boolean;\r\n\r\n    isImmediatePropagationStopped(): boolean;\r\n\r\n    isMapEventAllowed(): boolean;\r\n\r\n    isPropagationStopped(): boolean;\r\n\r\n    preventDefault(): boolean;\r\n\r\n    stopImmediatePropagation(): boolean;\r\n\r\n    stopPropagation(): boolean;\r\n  }\r\n\r\n  interface IEventController {\r\n    onStartListening?(events: IEventManager, type: string): void;\r\n\r\n    onStopListening?(events: IEventManager, type: string): void;\r\n  }\r\n\r\n  interface IEventEmitter {\r\n    events: IEventManager;\r\n  }\r\n\r\n  interface IEventGroup {\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    removeAll(): this;\r\n  }\r\n\r\n  interface IEventManager<Target = {}> extends IEventTrigger {\r\n    add(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    getParent(): object | null;\r\n\r\n    group(): IEventGroup;\r\n\r\n    remove(\r\n      types: string[][] | string[] | string,\r\n      callback: (event: object | IEvent) => void,\r\n      context?: object,\r\n      priority?: number,\r\n    ): this;\r\n\r\n    setParent(parent: object | null): this;\r\n  }\r\n\r\n  interface IEventTrigger {\r\n    fire(type: string, eventobject?: object | IEvent): this;\r\n  }\r\n\r\n  interface IEventWorkflowController extends IEventController {\r\n    onAfterEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\r\n\r\n    onBeforeEventFiring?(events: IEventManager, type: string, event?: IEvent): void;\r\n  }\r\n\r\n  interface IExpandableControlLayout extends ILayout {}\r\n\r\n  interface IFreezable {\r\n    events: IEventManager;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    unfreeze(): IFreezable;\r\n  }\r\n\r\n  interface IGeocodeProvider {\r\n    geocode(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n        skip?: number;\r\n        strictBounds?: boolean;\r\n      },\r\n    ): Promise<object>;\r\n\r\n    suggest(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n        strictBounds?: boolean;\r\n      },\r\n    ): Promise<object>;\r\n  }\r\n\r\n  function geocode(request: string | number[], options?: IGeocodeOptions): Promise<object>;\r\n\r\n  interface IGeocodeOptions {\r\n    boundedBy?: number[][];\r\n    json?: boolean;\r\n    kind?: string;\r\n    provider?: IGeocodeProvider | string;\r\n    results?: number;\r\n    searchCoordOrder?: string;\r\n    skip?: number;\r\n    strictBounds?: boolean;\r\n  }\r\n\r\n  interface IGeometry extends IBaseGeometry, ICustomizable {\r\n    getMap(): Map | null;\r\n\r\n    getPixelGeometry(options?: object): IPixelGeometry;\r\n\r\n    setMap(map: Map): void;\r\n  }\r\n\r\n  interface IGeometryEditor extends ICustomizable, IEventEmitter {\r\n    geometry: IGeometry;\r\n    state: IDataManager;\r\n\r\n    startEditing(): void;\r\n\r\n    stopEditing(): void;\r\n  }\r\n\r\n  interface IGeometryEditorChildModel extends IGeometryEditorModel {\r\n    editor: IGeometryEditor;\r\n    geometry: IBaseGeometry;\r\n\r\n    getParent(): IGeometryEditorModel;\r\n\r\n    setPixels(pixels: number[]): void;\r\n  }\r\n\r\n  interface IGeometryEditorModel extends IEventEmitter {\r\n    destroy(): void;\r\n\r\n    getPixels(): number[];\r\n  }\r\n\r\n  interface IGeometryEditorRootModel extends IGeometryEditorModel {}\r\n\r\n  interface IGeometryJson {\r\n    type: string;\r\n    coordinates: number[] | number[][] | number[][][];\r\n    fillRule?: 'evenOdd' | 'nonZero';\r\n    radius?: number;\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  interface IGeoObject<T = IGeometry>\r\n    extends IChildOnMap,\r\n      ICustomizable,\r\n      IDomEventEmitter,\r\n      IParentOnMap {\r\n    geometry: T | null;\r\n    properties: IDataManager;\r\n    state: IDataManager;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n  }\r\n\r\n  interface IGeoObjectCollection extends ICustomizable, IEventEmitter, IParentOnMap {\r\n    add(child: IGeoObject, index?: number): this;\r\n\r\n    each(callback: (object: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(object: IGeoObject): number;\r\n\r\n    remove(child: IGeoObject): this;\r\n\r\n    removeAll(): this;\r\n\r\n    set(index: number, child: IGeoObject): this;\r\n\r\n    splice(index: number, length: number): this;\r\n  }\r\n\r\n  interface IGeoObjectSequence extends ICustomizable, IEventEmitter, IParentOnMap {\r\n    each(callback: (geoObject: IGeoObject) => void, context?: object): void;\r\n\r\n    get(index: number): IGeoObject;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getIterator(): IIterator;\r\n\r\n    getLength(): number;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    indexOf(geoObject: IGeoObject): number;\r\n  }\r\n\r\n  interface IHintManager<T> extends IPopupManager<T> {}\r\n\r\n  interface IIterator {\r\n    getNext(): object | null;\r\n  }\r\n\r\n  interface ILayer extends IChildOnMap, ICustomizable, IEventEmitter {\r\n    getBrightness?(): number;\r\n\r\n    getCopyrights?(coords: number[], zoom: number): Promise<Array<string | HTMLElement>>;\r\n\r\n    getZoomRange?(point: number[]): Promise<number[]>;\r\n  }\r\n\r\n  interface ILayout extends IDomEventEmitter {\r\n    destroy(): void;\r\n\r\n    getData(): object;\r\n\r\n    getParentElement(): HTMLElement;\r\n\r\n    getShape(): IShape | null;\r\n\r\n    isEmpty(): boolean;\r\n\r\n    setData(data: object): void;\r\n\r\n    setParentElement(parent: HTMLElement | null): void;\r\n  }\r\n\r\n  interface ILinearRingGeometryAccess extends IFreezable {\r\n    contain(position: number): boolean;\r\n\r\n    freeze(): IFreezable;\r\n\r\n    get(index: number): number[];\r\n\r\n    getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getFillRule(): string;\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, coordinates: number[]): ILinearRingGeometryAccess;\r\n\r\n    isFrozen(): boolean;\r\n\r\n    remove(index: number): number[];\r\n\r\n    set(index: number, coordinates: number[]): ILinearRingGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][]): ILinearRingGeometryAccess;\r\n\r\n    setFillRule(fillRule: string): ILinearRingGeometryAccess;\r\n\r\n    splice(index: number, number: number): number[][];\r\n\r\n    unfreeze(): IFreezable;\r\n  }\r\n\r\n  interface ILineStringGeometry extends IGeometry, ILineStringGeometryAccess {}\r\n\r\n  interface ILineStringGeometryAccess extends IFreezable {\r\n    get(index: number): number[];\r\n\r\n    getChildGeometry(index: number): IPointGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n    remove(index: number): number[];\r\n\r\n    set(index: number, coordinates: number[]): ILineStringGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][]): ILineStringGeometryAccess;\r\n\r\n    splice(index: number, length: number): number[][];\r\n  }\r\n\r\n  interface IMapAction extends IEventEmitter {\r\n    begin(mapActionManager: map.action.Manager): void;\r\n\r\n    end(): void;\r\n  }\r\n\r\n  interface IMapObjectCollection extends ICollection, ICustomizable, IParentOnMap {}\r\n\r\n  interface IMultiRouteModelJson {\r\n    params?: IMultiRouteParams;\r\n    referencePoints: IMultiRouteReferencePoint[];\r\n  }\r\n\r\n  interface IMultiRouteParams {\r\n    avoidTrafficJams?: boolean;\r\n    boundedBy?: number[][] | null;\r\n    requestSendInterval?: string | number;\r\n    results?: number;\r\n    reverseGeocoding?: boolean;\r\n    routingMode?: 'auto' | 'masstransit' | 'pedestrian';\r\n    searchCoordOrder?: string;\r\n    strictBounds?: boolean;\r\n    viaIndexes?: number[];\r\n  }\r\n\r\n  type IMultiRouteReferencePoint = string | number[] | geometry.Point;\r\n\r\n  interface IOptionManager extends IChild<IOptionManager>, IEventEmitter, IFreezable {\r\n    get(key: string, defaultValue?: object): object;\r\n\r\n    getAll(): object;\r\n\r\n    getName(): string;\r\n\r\n    getNative(key: string): object;\r\n\r\n    resolve(key: string, name?: string): object;\r\n\r\n    set(key: object | string, value?: object | number | string | null | undefined): this;\r\n\r\n    setName(name: string): void;\r\n  }\r\n\r\n  interface IOverlay extends ICustomizable, IDomEventEmitter {\r\n    getData(): object;\r\n\r\n    getGeometry(): IPixelGeometry;\r\n\r\n    getMap(): Map | null;\r\n\r\n    getShape(): IShape | null;\r\n\r\n    isEmpty(): boolean;\r\n\r\n    setData(data: object): void;\r\n\r\n    setGeometry(geometry: IPixelGeometry): void;\r\n\r\n    setMap(map: Map | null): void;\r\n  }\r\n\r\n  interface IPane extends IEventEmitter {\r\n    destroy(): void;\r\n\r\n    getElement(): HTMLElement;\r\n\r\n    getMap(): Map;\r\n\r\n    getOverflow(): 'visible' | 'hidden';\r\n\r\n    getZIndex(): number;\r\n  }\r\n\r\n  interface IPanorama {\r\n    getAngularBBox(): number[];\r\n\r\n    getConnectionArrows(): IPanoramaConnectionArrow[];\r\n\r\n    getConnectionMarkers(): IPanoramaConnectionMarker[];\r\n\r\n    getCoordSystem(): ICoordSystem;\r\n\r\n    getDefaultDirection(): number[];\r\n\r\n    getDefaultSpan(): number[];\r\n\r\n    getGraph(): IPanoramaGraph | null;\r\n\r\n    getMarkers(): IPanoramaMarker[];\r\n\r\n    getName(): string;\r\n\r\n    getPosition(): number[];\r\n\r\n    getTileLevels(): IPanoramaTileLevel[];\r\n\r\n    getTileSize(): number[];\r\n  }\r\n\r\n  interface IPanoramaConnection {\r\n    getConnectedPanorama(): Promise<IPanorama>;\r\n  }\r\n\r\n  interface IPanoramaConnectionArrow extends IPanoramaConnection {\r\n    properties: data.Manager;\r\n\r\n    getDirection(): number[];\r\n\r\n    getPanorama(): IPanorama;\r\n  }\r\n\r\n  interface IPanoramaConnectionMarker extends IPanoramaConnection, IPanoramaMarker {}\r\n\r\n  interface IPanoramaGraph {\r\n    getEdges(): IPanoramaGraphEdge[];\r\n\r\n    getNodes(): IPanoramaGraphEdge[];\r\n\r\n    getPanorama(): IPanorama;\r\n  }\r\n\r\n  interface IPanoramaGraphEdge {\r\n    getEndNodes(): IPanoramaGraphNode[];\r\n  }\r\n\r\n  interface IPanoramaGraphNode {\r\n    getConnectedPanorama(): Promise<IPanorama>;\r\n  }\r\n\r\n  interface IPanoramaMarker {\r\n    properties: data.Manager;\r\n\r\n    getIconSet(): Promise<IPanoramaMarkerIconSet>;\r\n\r\n    getPanorama(): IPanorama;\r\n\r\n    getPosition(): number[];\r\n  }\r\n\r\n  interface IPanoramaMarkerIcon {\r\n    image: HTMLCanvasElement | HTMLImageElement;\r\n    offset: number[];\r\n  }\r\n\r\n  interface IPanoramaMarkerIconSet {\r\n    default: IPanoramaMarkerIcon | null;\r\n    expanded: IPanoramaMarkerIcon | null;\r\n    expandedHovered: IPanoramaMarkerIcon | null;\r\n    hovered: IPanoramaMarkerIcon | null;\r\n  }\r\n\r\n  interface IPanoramaTileLevel {\r\n    getImageSize(): number[];\r\n\r\n    getTileUrl(x: number, y: number): string;\r\n  }\r\n\r\n  interface IParentOnMap {\r\n    getMap(): Map;\r\n  }\r\n\r\n  interface IPixelCircleGeometry extends IPixelGeometry {\r\n    getCoordinates(): number[];\r\n\r\n    getRadius(): number;\r\n  }\r\n\r\n  interface IPixelLineStringGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelPointGeometry extends IPixelGeometry {\r\n    getCoordinates(): number[];\r\n  }\r\n\r\n  interface IPixelMultiLineGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelMultiPolygonGeometry extends IPixelGeometry {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][][];\r\n\r\n    getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelPolygonGeometry extends IPixelGeometry {\r\n    contains(position: number[]): boolean;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getFillRule(): 'evenOdd' | 'nonZero';\r\n\r\n    getLength(): number;\r\n  }\r\n\r\n  interface IPixelRectangleGeometry extends IPixelGeometry {\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][];\r\n  }\r\n\r\n  interface IPixelGeometry extends IBaseGeometry {\r\n    equals(geometry: IPixelGeometry): boolean;\r\n\r\n    getMetaData(): object;\r\n\r\n    scale(factor: number): IPixelGeometry;\r\n\r\n    shift(offset: number[]): IPixelGeometry;\r\n  }\r\n\r\n  interface IPointGeometry extends IGeometry, IPointGeometryAccess {}\r\n\r\n  interface IPointGeometryAccess {\r\n    getCoordinates(): number[] | null;\r\n\r\n    setCoordinates(coordinates: number[] | null): this;\r\n  }\r\n\r\n  interface IPolygonGeometry extends IGeometry, IPolygonGeometryAccess {}\r\n\r\n  interface IPolygonGeometryAccess extends IFreezable {\r\n    contains(position: number[]): boolean;\r\n\r\n    get(index: number): number[][];\r\n\r\n    getChildGeometry(index: number): ILinearRingGeometryAccess;\r\n\r\n    getClosest(anchorPosition: number[]): object;\r\n\r\n    getCoordinates(): number[][][];\r\n\r\n    getFillRule(): string;\r\n\r\n    getLength(): number;\r\n\r\n    insert(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n    remove(index: number): ILinearRingGeometryAccess;\r\n\r\n    set(index: number, path: number[][]): IPolygonGeometryAccess;\r\n\r\n    setCoordinates(coordinates: number[][][]): IPolygonGeometryAccess;\r\n\r\n    setFillRule(fillRule: string): IPolygonGeometryAccess;\r\n\r\n    splice(index: number, number: number): ILinearRingGeometryAccess[];\r\n  }\r\n\r\n  interface IPopup<T> extends ICustomizable, IEventEmitter {\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    getData(): object;\r\n\r\n    getOverlay(): Promise<IOverlay>;\r\n\r\n    getOverlaySync(): IOverlay;\r\n\r\n    getPosition(): number[];\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position: number[], data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPopupManager<T> extends IEventEmitter {\r\n    close(force?: boolean): Promise<T>;\r\n\r\n    destroy(): void;\r\n\r\n    getData(): object | null;\r\n\r\n    getOptions(): IOptionManager | null;\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getPosition(): number[] | null;\r\n\r\n    isOpen(): boolean;\r\n\r\n    open(position?: number[], data?: object | string | HTMLElement, options?: object): Promise<T>;\r\n\r\n    setData(data: object | string | HTMLElement): Promise<T>;\r\n\r\n    setOptions(options: object): Promise<T>;\r\n\r\n    setPosition(position: number[]): Promise<T>;\r\n  }\r\n\r\n  interface IPositioningContext {\r\n    fromClientPixels(clientPixelPoint: number[]): number[];\r\n\r\n    getZoom(): number;\r\n\r\n    toClientPixels(globalPixelPoint: number[]): number[];\r\n  }\r\n\r\n  interface IProjection {\r\n    fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\r\n\r\n    getCoordSystem(): ICoordSystem;\r\n\r\n    isCycled(): boolean[];\r\n\r\n    toGlobalPixels(coordPoint: number[], zoom: number): number[];\r\n  }\r\n\r\n  interface IRoutePanel {\r\n    options: IOptionManager;\r\n\r\n    state: IDataManager;\r\n\r\n    enable(): void;\r\n\r\n    geolocate(name: string): Promise<{ geoObjects: GeoObjectCollection }>;\r\n\r\n    getRoute(): multiRouter.MultiRoute;\r\n\r\n    getRouteAsync(): Promise<multiRouter.MultiRoute>;\r\n\r\n    isEnable(): boolean;\r\n\r\n    switchPoints(): void;\r\n  }\r\n\r\n  interface ISearchControlLayout extends IExpandableControlLayout {}\r\n\r\n  interface ISelectableControl extends IControl {\r\n    deselect(): void;\r\n\r\n    disable(): void;\r\n\r\n    enable(): void;\r\n\r\n    isEnabled(): boolean;\r\n\r\n    isSelected(): boolean;\r\n\r\n    select(): void;\r\n  }\r\n\r\n  interface ISelectableControlLayout extends ILayout {}\r\n\r\n  interface IShape {\r\n    contains(position: number[]): boolean;\r\n\r\n    equals(shape: IShape): boolean;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getGeometry(): IPixelGeometry;\r\n\r\n    getType(): string;\r\n\r\n    scale(factor: number): IShape;\r\n\r\n    shift(offset: number[]): IShape;\r\n  }\r\n\r\n  class Monitor {\r\n    constructor(dataManager: IDataManager | IOptionManager);\r\n\r\n    add(\r\n      name: string[] | string,\r\n      changeCallback: (event: object | IEvent) => void,\r\n      context?: any,\r\n      params?: any,\r\n    ): Monitor;\r\n\r\n    forceChange(): Monitor;\r\n\r\n    get(name: string): any;\r\n\r\n    remove(name: string): Monitor;\r\n\r\n    removeAll(): Monitor;\r\n  }\r\n\r\n  class ObjectManager implements ICustomizable, IEventEmitter, IGeoObject, IParentOnMap {\r\n    constructor(options: IObjectManagerOptions);\r\n\r\n    clusters: objectManager.ClusterCollection;\r\n\r\n    events: IEventManager;\r\n\r\n    geometry: IGeometry | null;\r\n\r\n    objects: objectManager.ObjectCollection;\r\n\r\n    options: IOptionManager;\r\n\r\n    properties: IDataManager;\r\n\r\n    state: IDataManager;\r\n\r\n    add(objects: object | object[] | string): this;\r\n\r\n    getBounds(): number[][] | null;\r\n\r\n    getFilter(): string | ((object: object | string) => boolean) | null;\r\n\r\n    getMap(): Map;\r\n\r\n    getObjectState(id: any): {\r\n      found: boolean;\r\n      isShown: boolean;\r\n      cluster?: object;\r\n      isClustered: boolean;\r\n      isFilteredOut: boolean;\r\n    };\r\n\r\n    getOverlay(): Promise<IOverlay | null>;\r\n\r\n    getOverlaySync(): IOverlay | null;\r\n\r\n    getParent(): IParentOnMap | null;\r\n\r\n    getPixelBounds(): number[][] | null;\r\n\r\n    remove(objects: object | object[] | string): this;\r\n\r\n    removeAll(): this;\r\n\r\n    setFilter(filterFunction: (object: object | string) => boolean): void;\r\n\r\n    setParent(parent: IParentOnMap | null): this;\r\n  }\r\n\r\n  interface IObjectManagerOptions extends Omit<IClustererOptions, 'hasBalloon' | 'hasHint'> {\r\n    clusterize?: boolean;\r\n    syncOverlayInit?: boolean;\r\n    viewportMargin?: number | number[];\r\n\r\n    [key: string]: any;\r\n  }\r\n\r\n  namespace objectManager {\r\n    class Balloon implements Omit<IBalloonManager<map.Balloon>, 'isOpen' | 'open'> {\r\n      constructor(collection: object);\r\n\r\n      events: IEventManager;\r\n\r\n      autoPan(): Promise<ymaps.Balloon>;\r\n\r\n      close(force?: boolean): Promise<ymaps.Balloon>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(id: any): boolean;\r\n\r\n      open(objectId: any, anchorPixelPosition?: boolean): Promise<ymaps.Balloon>;\r\n\r\n      setData(objectData: object | string | HTMLElement): Promise<ymaps.Balloon>;\r\n\r\n      setOptions(options: object): Promise<ymaps.Balloon>;\r\n\r\n      setPosition(position: number[]): Promise<ymaps.Balloon>;\r\n    }\r\n\r\n    class ClusterCollection implements ICustomizable, IEventEmitter {\r\n      balloon: objectManager.Balloon;\r\n\r\n      events: IEventManager;\r\n\r\n      hint: objectManager.Hint;\r\n\r\n      options: option.Manager;\r\n\r\n      overlays: objectManager.OverlayCollection;\r\n\r\n      state: data.Manager;\r\n\r\n      each(callback: (cluster: object) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: string): object | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getObjectManager(): ObjectManager;\r\n\r\n      setClusterOptions(objectId: string, options: object): this;\r\n    }\r\n\r\n    class Hint implements Omit<IHintManager<map.Hint>, 'isOpen' | 'open'> {\r\n      constructor(collection: object);\r\n\r\n      events: IEventManager;\r\n\r\n      close(force?: boolean): Promise<map.Hint>;\r\n\r\n      destroy(): void;\r\n\r\n      getData(): object | null;\r\n\r\n      getOptions(): IOptionManager | null;\r\n\r\n      getOverlay(): Promise<IOverlay | null>;\r\n\r\n      getOverlaySync(): IOverlay | null;\r\n\r\n      getPosition(): number[] | null;\r\n\r\n      isOpen(id: any): boolean;\r\n\r\n      open(objectId: any, position?: number[]): Promise<map.Hint>;\r\n\r\n      setData(data: object | string | HTMLElement): Promise<map.Hint>;\r\n\r\n      setOptions(options: object): Promise<map.Hint>;\r\n\r\n      setPosition(position: number[]): Promise<map.Hint>;\r\n    }\r\n\r\n    class ObjectCollection implements ICollection, ICustomizable {\r\n      balloon: objectManager.Balloon;\r\n\r\n      events: IEventManager;\r\n\r\n      hint: objectManager.Hint;\r\n\r\n      options: option.Manager;\r\n\r\n      overlays: objectManager.OverlayCollection;\r\n\r\n      add(object: object): this;\r\n\r\n      each(callback: (object: object) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: number): object | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n\r\n      getObjectManager(): ObjectManager;\r\n\r\n      remove(data: object | object[] | string): this;\r\n\r\n      removeAll(): objectManager.ObjectCollection;\r\n\r\n      setObjectOptions(objectId: any, options: object): ObjectCollection;\r\n    }\r\n\r\n    class OverlayCollection implements ICustomizable, IEventEmitter {\r\n      events: IEventManager;\r\n\r\n      options: IOptionManager;\r\n\r\n      each(callback: (overlay: IOverlay) => void, context?: object): void;\r\n\r\n      getAll(): object[];\r\n\r\n      getById(id: number): IOverlay | null;\r\n\r\n      getId(overlay: IOverlay): number | null;\r\n\r\n      getIterator(): IIterator;\r\n\r\n      getLength(): number;\r\n    }\r\n  }\r\n\r\n  namespace modules {\r\n    function require(modules: string | string[]): vow.Promise;\r\n  }\r\n\r\n  class Hotspot implements IHotspot {\r\n    constructor(shape: IShape, zIndex?: number);\r\n\r\n    events: IEventManager;\r\n  }\r\n\r\n  interface IHotspot extends IDomEventEmitter {\r\n    events: IEventManager;\r\n  }\r\n\r\n  namespace geolocation {\r\n    interface IGeolocationOptions {\r\n      autoReverseGeocode?: boolean;\r\n      mapStateAutoApply?: boolean;\r\n      provider?: string;\r\n      timeout?: number;\r\n      useMapMargin?: boolean;\r\n    }\r\n\r\n    function get(options?: IGeolocationOptions): Promise<{ geoObjects: GeoObjectCollection }>;\r\n  }\r\n\r\n  interface ISuggestProvider {\r\n    suggest(\r\n      request: string,\r\n      options?: {\r\n        boundedBy?: number[][];\r\n        results?: number;\r\n      },\r\n    ): Promise<object>;\r\n  }\r\n\r\n  interface ISuggestViewOptions {\r\n    boundedBy?: number[][];\r\n    container?: HTMLElement;\r\n    layout?: string | any;\r\n    offset?: number[];\r\n    provider?: string | ISuggestProvider;\r\n    results?: number;\r\n    width?: number;\r\n    zIndex?: number;\r\n  }\r\n\r\n  class SuggestView implements ICustomizable, IEventEmitter {\r\n    constructor(element: HTMLElement | string, options?: ISuggestViewOptions);\r\n\r\n    events: IEventManager;\r\n\r\n    options: IOptionManager;\r\n\r\n    state: data.Manager;\r\n\r\n    destroy(): void;\r\n  }\r\n\r\n  interface ITile extends IEventEmitter {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n  }\r\n\r\n  interface ICanvasTile extends ITile {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n\r\n    renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\r\n  }\r\n\r\n  interface IDomTile extends ITile {\r\n    events: IEventManager;\r\n\r\n    destroy(): void;\r\n\r\n    isReady(): boolean;\r\n\r\n    renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\r\n  }\r\n\r\n  namespace layer {\r\n    const storage: util.Storage;\r\n\r\n    namespace tile {\r\n      interface ITileOptions {\r\n        notFoundTile?: string | null;\r\n        tileAnimationDuration?: number;\r\n      }\r\n\r\n      interface ITileRenderOptions {\r\n        tileNumber?: number[];\r\n        tileZoom?: number;\r\n      }\r\n\r\n      class CanvasTile implements ICanvasTile {\r\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        isReady(): boolean;\r\n\r\n        renderAt(context: any, canvasSize: number[], bounds: number[][], animate?: boolean): void;\r\n      }\r\n\r\n      class DomTile implements IDomTile {\r\n        constructor(url: string, options?: ITileOptions, renderOptions?: ITileRenderOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        destroy(): void;\r\n\r\n        isReady(): boolean;\r\n\r\n        renderAt(context: HTMLElement, clientBounds: number[][], animate?: boolean): void;\r\n      }\r\n    }\r\n\r\n    namespace tileContainer {\r\n      interface CanvasContainerOptions {\r\n        notFoundTile?: string | null;\r\n        tileClass?: ICanvasTile;\r\n        tileTransparent?: boolean;\r\n      }\r\n\r\n      class CanvasContainer implements IChildOnMap {\r\n        constructor(layer: ILayer, options?: CanvasContainerOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        getParent(): object | null;\r\n\r\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\r\n\r\n        setParent(parent: object | null): this;\r\n      }\r\n\r\n      interface DomContainerOptions {\r\n        notFoundTile?: string | null;\r\n        tileClass?: IDomTile;\r\n        tileTransparent?: boolean;\r\n      }\r\n\r\n      class DomContainer implements IChildOnMap {\r\n        constructor(layer: ILayer, options?: DomContainerOptions);\r\n\r\n        events: IEventManager;\r\n\r\n        getMap(): Map;\r\n\r\n        getParent(): object | null;\r\n\r\n        getTile(tileNumber: number[], tileZoom: number, priority: number): ICanvasTile;\r\n\r\n        setParent(parent: object | null): this;\r\n      }\r\n    }\r\n  }\r\n\r\n  namespace mapType {\r\n    const storage: util.Storage;\r\n  }\r\n\r\n  namespace projection {\r\n    class Cartesian implements IProjection {\r\n      constructor(bounds: number[][], cycled?: boolean[], scale?: number | number[]);\r\n\r\n      fromGlobalPixels(globalPixelPoint: number[], zoom: number): number[];\r\n\r\n      getCoordSystem(): ICoordSystem;\r\n\r\n      isCycled(): boolean[];\r\n\r\n      toGlobalPixels(coordPoint: number[], zoom: number): number[];\r\n    }\r\n\r\n    const sphericalMercator: IProjection;\r\n\r\n    const wgs84Mercator: IProjection;\r\n  }\r\n}\r\n"]}