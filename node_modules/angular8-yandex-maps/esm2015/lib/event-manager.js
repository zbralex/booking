/**
 * Copied from angular/components/google-maps and edited for Yandex Maps API.
 * {@link https://github.com/angular/components/blob/master/src/google-maps/map-event-manager.ts}
 */
import { BehaviorSubject, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
/**
 * Manages event on a Yandex Maps object, ensuring that events are added only when necessary.
 * @internal
 */
export class EventManager {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * Listeners that were added before the target was set.
         */
        this._pending = [];
        this._listeners = [];
        this._targetStream = new BehaviorSubject(undefined);
    }
    /**
     * Gets an observable that adds an event listener to the map when a consumer subscribes to it.
     * @param name
     */
    getLazyEmitter(name) {
        return this._targetStream.pipe(switchMap((target) => {
            const observable = new Observable((observer) => {
                // If the target hasn't been initialized yet, cache the observer so it can be added later.
                if (!target) {
                    this._pending.push({ observable, observer });
                    return undefined;
                }
                const callback = (event) => {
                    const e = {
                        event,
                        target,
                        ymaps,
                    };
                    this._ngZone.run(() => observer.next(e));
                };
                const listener = target.events.add(name, callback);
                this._listeners.push({ name, callback, manager: listener });
                // Unsubscribe function
                return () => listener.remove(name, callback);
            });
            return observable;
        }));
    }
    /**
     * Sets the current target that the manager should bind events to.
     * @param target
     */
    setTarget(target) {
        const currentTarget = this._targetStream.value;
        if (target === currentTarget) {
            return;
        }
        // Clear the listeners from the pre-existing target.
        if (currentTarget) {
            this._clearListeners();
            this._pending = [];
        }
        this._targetStream.next(target);
        // Add the listeners that were bound before the map was initialized.
        this._pending.forEach((subscriber) => subscriber.observable.subscribe(subscriber.observer));
        this._pending = [];
    }
    /**
     * Destroys the manager and clears the event listeners.
     */
    destroy() {
        this._clearListeners();
        this._pending = [];
        this._targetStream.complete();
    }
    /**
     * Clears all currently-registered event listeners.
     */
    _clearListeners() {
        this._listeners.forEach((listener) => {
            const { name, callback, manager } = listener;
            manager.remove(name, callback);
        });
        this._listeners = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXI4LXlhbmRleC1tYXBzL3NyYy9saWIvZXZlbnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFHSCxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFVM0M7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFpQnZCLFlBQTZCLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBaEI1Qzs7V0FFRztRQUNLLGFBQVEsR0FHVixFQUFFLENBQUM7UUFFRCxlQUFVLEdBSVosRUFBRSxDQUFDO1FBRVEsa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBaUMsU0FBUyxDQUFDLENBQUM7SUFFakQsQ0FBQztJQUVoRDs7O09BR0c7SUFDSCxjQUFjLENBQUMsSUFBWTtRQUN6QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuQixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBVSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN0RCwwRkFBMEY7Z0JBQzFGLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztvQkFDN0MsT0FBTyxTQUFTLENBQUM7aUJBQ2xCO2dCQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBa0IsRUFBRSxFQUFFO29CQUN0QyxNQUFNLENBQUMsR0FBRzt3QkFDUixLQUFLO3dCQUNMLE1BQU07d0JBQ04sS0FBSztxQkFDTixDQUFDO29CQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDO2dCQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUU1RCx1QkFBdUI7Z0JBQ3ZCLE9BQU8sR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBZSxDQUFDLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLFVBQVUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxNQUEwQjtRQUNsQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUUvQyxJQUFJLE1BQU0sS0FBSyxhQUFhLEVBQUU7WUFDNUIsT0FBTztTQUNSO1FBRUQsb0RBQW9EO1FBQ3BELElBQUksYUFBYSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhDLG9FQUFvRTtRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFNUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTztRQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxRQUFRLENBQUM7WUFDN0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBZSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29waWVkIGZyb20gYW5ndWxhci9jb21wb25lbnRzL2dvb2dsZS1tYXBzIGFuZCBlZGl0ZWQgZm9yIFlhbmRleCBNYXBzIEFQSS5cclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2NvbXBvbmVudHMvYmxvYi9tYXN0ZXIvc3JjL2dvb2dsZS1tYXBzL21hcC1ldmVudC1tYW5hZ2VyLnRzfVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBZYUV2ZW50IH0gZnJvbSAnLi90eXBpbmdzL3lhLWV2ZW50JztcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnR5cGUgRXZlbnRNYW5hZ2VyVGFyZ2V0ID0ge1xyXG4gIGV2ZW50czogeW1hcHMuSUV2ZW50TWFuYWdlcjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNYW5hZ2VzIGV2ZW50IG9uIGEgWWFuZGV4IE1hcHMgb2JqZWN0LCBlbnN1cmluZyB0aGF0IGV2ZW50cyBhcmUgYWRkZWQgb25seSB3aGVuIG5lY2Vzc2FyeS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcclxuICAvKipcclxuICAgKiBMaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkIGJlZm9yZSB0aGUgdGFyZ2V0IHdhcyBzZXQuXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfcGVuZGluZzoge1xyXG4gICAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgb2JzZXJ2ZXI6IFN1YnNjcmliZXI8YW55PjtcclxuICB9W10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSBfbGlzdGVuZXJzOiB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjYWxsYmFjazogKGU6IHltYXBzLkV2ZW50KSA9PiB2b2lkO1xyXG4gICAgbWFuYWdlcjogeW1hcHMuSUV2ZW50TWFuYWdlcjtcclxuICB9W10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBfdGFyZ2V0U3RyZWFtID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFdmVudE1hbmFnZXJUYXJnZXQgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX25nWm9uZTogTmdab25lKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGFuIG9ic2VydmFibGUgdGhhdCBhZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBtYXAgd2hlbiBhIGNvbnN1bWVyIHN1YnNjcmliZXMgdG8gaXQuXHJcbiAgICogQHBhcmFtIG5hbWVcclxuICAgKi9cclxuICBnZXRMYXp5RW1pdHRlcihuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFlhRXZlbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLl90YXJnZXRTdHJlYW0ucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCh0YXJnZXQpID0+IHtcclxuICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8WWFFdmVudD4oKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGhhc24ndCBiZWVuIGluaXRpYWxpemVkIHlldCwgY2FjaGUgdGhlIG9ic2VydmVyIHNvIGl0IGNhbiBiZSBhZGRlZCBsYXRlci5cclxuICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmcucHVzaCh7IG9ic2VydmFibGUsIG9ic2VydmVyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGV2ZW50OiB5bWFwcy5FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlID0ge1xyXG4gICAgICAgICAgICAgIGV2ZW50LFxyXG4gICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICB5bWFwcyxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX25nWm9uZS5ydW4oKCkgPT4gb2JzZXJ2ZXIubmV4dChlKSk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGNvbnN0IGxpc3RlbmVyID0gdGFyZ2V0LmV2ZW50cy5hZGQobmFtZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2goeyBuYW1lLCBjYWxsYmFjaywgbWFuYWdlcjogbGlzdGVuZXIgfSk7XHJcblxyXG4gICAgICAgICAgLy8gVW5zdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lci5yZW1vdmUobmFtZSwgY2FsbGJhY2sgYXMgYW55KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdGFyZ2V0IHRoYXQgdGhlIG1hbmFnZXIgc2hvdWxkIGJpbmQgZXZlbnRzIHRvLlxyXG4gICAqIEBwYXJhbSB0YXJnZXRcclxuICAgKi9cclxuICBzZXRUYXJnZXQodGFyZ2V0OiBFdmVudE1hbmFnZXJUYXJnZXQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGN1cnJlbnRUYXJnZXQgPSB0aGlzLl90YXJnZXRTdHJlYW0udmFsdWU7XHJcblxyXG4gICAgaWYgKHRhcmdldCA9PT0gY3VycmVudFRhcmdldCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xlYXIgdGhlIGxpc3RlbmVycyBmcm9tIHRoZSBwcmUtZXhpc3RpbmcgdGFyZ2V0LlxyXG4gICAgaWYgKGN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgdGhpcy5fY2xlYXJMaXN0ZW5lcnMoKTtcclxuICAgICAgdGhpcy5fcGVuZGluZyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3RhcmdldFN0cmVhbS5uZXh0KHRhcmdldCk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGJvdW5kIGJlZm9yZSB0aGUgbWFwIHdhcyBpbml0aWFsaXplZC5cclxuICAgIHRoaXMuX3BlbmRpbmcuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlci5vYnNlcnZhYmxlLnN1YnNjcmliZShzdWJzY3JpYmVyLm9ic2VydmVyKSk7XHJcblxyXG4gICAgdGhpcy5fcGVuZGluZyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVzdHJveXMgdGhlIG1hbmFnZXIgYW5kIGNsZWFycyB0aGUgZXZlbnQgbGlzdGVuZXJzLlxyXG4gICAqL1xyXG4gIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jbGVhckxpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fcGVuZGluZyA9IFtdO1xyXG4gICAgdGhpcy5fdGFyZ2V0U3RyZWFtLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgYWxsIGN1cnJlbnRseS1yZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycy5cclxuICAgKi9cclxuICBwcml2YXRlIF9jbGVhckxpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xyXG4gICAgICBjb25zdCB7IG5hbWUsIGNhbGxiYWNrLCBtYW5hZ2VyIH0gPSBsaXN0ZW5lcjtcclxuICAgICAgbWFuYWdlci5yZW1vdmUobmFtZSwgY2FsbGJhY2sgYXMgYW55KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xyXG4gIH1cclxufVxyXG4iXX0=