import { __rest } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { from, fromEvent, merge, throwError } from 'rxjs';
import { map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export const YA_CONFIG = new InjectionToken('YA_CONFIG');
/**
 * The `YaApiLoader` service handles loading of Yandex.Maps API.
 *
 * @example
 * ```ts
 * import { YaApiLoaderService } from 'angular8-yandex-maps';
 *
 * export class AppComponent {
 *   constructor(private yaApiLoaderService: YaApiLoaderService) {
 *     this.yaApiLoaderService.load()
 *       .subscribe(v => console.log(v))
 *   }
 * }
 *```
 *
 * @dynamic
 */
export class YaApiLoaderService {
    constructor(config, _document) {
        this._document = _document;
        this._defaultConfig = { lang: 'ru_RU' };
        this._config = Object.assign(Object.assign({}, this._defaultConfig), config);
    }
    /**
     * Loads Yandex.Maps API
     */
    load() {
        if (window.ymaps) {
            return from(ymaps.ready()).pipe(map(() => ymaps));
        }
        if (!this._script) {
            const script = this._document.createElement('script');
            script.type = 'text/javascript';
            script.src = this._getScriptSource(this._config);
            script.id = 'yandexMapsApiScript';
            script.async = true;
            script.defer = true;
            this._script = this._document.body.appendChild(script);
        }
        const load = fromEvent(this._script, 'load').pipe(switchMap(() => from(ymaps.ready()).pipe(map(() => ymaps))));
        const error = fromEvent(this._script, 'error').pipe(switchMap((e) => throwError(e)));
        return merge(load, error).pipe(take(1));
    }
    /**
     * Returns script source by config
     * @param config config with parameters that will be added in source
     * @example
     * // returns 'https://api-maps.yandex.ru/2.1/?apikey=658f67a2-fd77-42e9-b99e-2bd48c4ccad4&lang=en_US'
     * getScriptSource({ apikey: '658f67a2-fd77-42e9-b99e-2bd48c4ccad4', lang: 'en_US' })
     */
    _getScriptSource(config) {
        const { enterprise, version = '2.1' } = config, rest = __rest(config, ["enterprise", "version"]);
        const params = this._convertConfigIntoQueryParams(rest);
        return `https://${enterprise ? 'enterprise.' : ''}api-maps.yandex.ru/${version}/?${params}`;
    }
    /**
     * Converts a config into a query string parameters
     * @param config object for converting
     * @example
     * // returns "lang=ru_RU&apikey=XXX"
     * convertIntoQueryParams({ lang: 'ru_RU', apikey: 'XXX' })
     */
    _convertConfigIntoQueryParams(config) {
        return Object.entries(config)
            .map(([key, value]) => `${key}=${value}`)
            .join('&');
    }
}
YaApiLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function YaApiLoaderService_Factory() { return new YaApiLoaderService(i0.ɵɵinject(YA_CONFIG, 8), i0.ɵɵinject(i1.DOCUMENT)); }, token: YaApiLoaderService, providedIn: "root" });
YaApiLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
YaApiLoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [YA_CONFIG,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,