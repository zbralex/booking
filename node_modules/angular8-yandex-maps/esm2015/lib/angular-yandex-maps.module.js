import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { YA_CONFIG } from './services/ya-api-loader/ya-api-loader.service';
import { YaClustererComponent } from './components/ya-clusterer/ya-clusterer.component';
import { YaControlDirective } from './components/ya-control/ya-control.directive';
import { YaGeoObjectDirective } from './components/ya-geoobject/ya-geoobject.directive';
import { YaMapComponent } from './components/ya-map/ya-map.component';
import { YaMultirouteDirective } from './components/ya-multiroute/ya-multiroute.directive';
import { YaPanoramaDirective } from './components/ya-panorama/ya-panorama.directive';
import { YaPlacemarkDirective } from './components/ya-placemark/ya-placemark.directive';
export class AngularYandexMapsModule {
    /**
     * Please use this method when you register the module at the root level
     * @param config
     */
    static forRoot(config) {
        return {
            ngModule: AngularYandexMapsModule,
            providers: [{ provide: YA_CONFIG, useValue: config }],
        };
    }
}
AngularYandexMapsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    YaClustererComponent,
                    YaControlDirective,
                    YaGeoObjectDirective,
                    YaMapComponent,
                    YaMultirouteDirective,
                    YaPanoramaDirective,
                    YaPlacemarkDirective,
                ],
                imports: [CommonModule],
                exports: [
                    YaClustererComponent,
                    YaControlDirective,
                    YaGeoObjectDirective,
                    YaMapComponent,
                    YaMultirouteDirective,
                    YaPanoramaDirective,
                    YaPlacemarkDirective,
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci15YW5kZXgtbWFwcy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyOC15YW5kZXgtbWFwcy9zcmMvbGliL2FuZ3VsYXIteWFuZGV4LW1hcHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsU0FBUyxFQUFZLE1BQU0sZ0RBQWdELENBQUM7QUFFckYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDeEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBdUJ4RixNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBZ0I7UUFDN0IsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztTQUN0RCxDQUFDO0lBQ0osQ0FBQzs7O1lBL0JGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUU7b0JBQ1osb0JBQW9CO29CQUNwQixrQkFBa0I7b0JBQ2xCLG9CQUFvQjtvQkFDcEIsY0FBYztvQkFDZCxxQkFBcUI7b0JBQ3JCLG1CQUFtQjtvQkFDbkIsb0JBQW9CO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRTtvQkFDUCxvQkFBb0I7b0JBQ3BCLGtCQUFrQjtvQkFDbEIsb0JBQW9CO29CQUNwQixjQUFjO29CQUNkLHFCQUFxQjtvQkFDckIsbUJBQW1CO29CQUNuQixvQkFBb0I7aUJBQ3JCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgWUFfQ09ORklHLCBZYUNvbmZpZyB9IGZyb20gJy4vc2VydmljZXMveWEtYXBpLWxvYWRlci95YS1hcGktbG9hZGVyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBZYUNsdXN0ZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy95YS1jbHVzdGVyZXIveWEtY2x1c3RlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBZYUNvbnRyb2xEaXJlY3RpdmUgfSBmcm9tICcuL2NvbXBvbmVudHMveWEtY29udHJvbC95YS1jb250cm9sLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBZYUdlb09iamVjdERpcmVjdGl2ZSB9IGZyb20gJy4vY29tcG9uZW50cy95YS1nZW9vYmplY3QveWEtZ2Vvb2JqZWN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBZYU1hcENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy95YS1tYXAveWEtbWFwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBZYU11bHRpcm91dGVEaXJlY3RpdmUgfSBmcm9tICcuL2NvbXBvbmVudHMveWEtbXVsdGlyb3V0ZS95YS1tdWx0aXJvdXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBZYVBhbm9yYW1hRGlyZWN0aXZlIH0gZnJvbSAnLi9jb21wb25lbnRzL3lhLXBhbm9yYW1hL3lhLXBhbm9yYW1hLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBZYVBsYWNlbWFya0RpcmVjdGl2ZSB9IGZyb20gJy4vY29tcG9uZW50cy95YS1wbGFjZW1hcmsveWEtcGxhY2VtYXJrLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFlhQ2x1c3RlcmVyQ29tcG9uZW50LFxuICAgIFlhQ29udHJvbERpcmVjdGl2ZSxcbiAgICBZYUdlb09iamVjdERpcmVjdGl2ZSxcbiAgICBZYU1hcENvbXBvbmVudCxcbiAgICBZYU11bHRpcm91dGVEaXJlY3RpdmUsXG4gICAgWWFQYW5vcmFtYURpcmVjdGl2ZSxcbiAgICBZYVBsYWNlbWFya0RpcmVjdGl2ZSxcbiAgXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtcbiAgICBZYUNsdXN0ZXJlckNvbXBvbmVudCxcbiAgICBZYUNvbnRyb2xEaXJlY3RpdmUsXG4gICAgWWFHZW9PYmplY3REaXJlY3RpdmUsXG4gICAgWWFNYXBDb21wb25lbnQsXG4gICAgWWFNdWx0aXJvdXRlRGlyZWN0aXZlLFxuICAgIFlhUGFub3JhbWFEaXJlY3RpdmUsXG4gICAgWWFQbGFjZW1hcmtEaXJlY3RpdmUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJZYW5kZXhNYXBzTW9kdWxlIHtcbiAgLyoqXG4gICAqIFBsZWFzZSB1c2UgdGhpcyBtZXRob2Qgd2hlbiB5b3UgcmVnaXN0ZXIgdGhlIG1vZHVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFlhQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxBbmd1bGFyWWFuZGV4TWFwc01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQW5ndWxhcllhbmRleE1hcHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFlBX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB9XSxcbiAgICB9O1xuICB9XG59XG4iXX0=